'use strict';

/**
 * 用户上下文信息
 */
var superagent = require('superagent');
var jsonp = require('superagent-jsonp');
var Cookies = require('js-cookie');
var AuthToken = {
    CONTEXT_KEY: 'icop_context' //cookie键
    , SERVER_URL: 'http://60.205.12.0:81/icop-workbench/getWorkbenchCookie' //获取上下文的URL
    , _cacheContext: null
    /**
     * 初始化上下文信息
     * @param options 参数配置{
     *  url:获取上下文的URL
     *  success:初始化上下文成功时的回调
     *  error:初始化上下文失败时的回调
     * }
     */
    , init: function init(options) {
        var _url = options && options.url ? options.url : this.SERVER_URL; //无URL参数则使用默认获取上下文的URL
        var _success = options && options.success ? options.success : null;
        var _error = options && options.error ? options.error : null;
        var that = this;
        delete this._cacheContext; //清除内存级存储
        Cookies.remove(this.CONTEXT_KEY); //清除cookie级存储
        superagent.get(_url).use(jsonp).end(function (err, res) {
            if (res != null && res.body != null) {
                console.log('初始化上下文', res.body);
                Cookies.set(that.CONTEXT_KEY, res.body);
                if (typeof _success == 'function') {
                    _success();
                }
            } else {
                if (typeof _error == 'function') {
                    _error(err);
                }
            }
        });
    }
    /**
     * 获取上下文信息
     * @returns {String}
     */
    , getContext: function getContext() {
        if (!this._cacheContext) {
            //内存级存储
            var context = Cookies.get(this.CONTEXT_KEY); //cookies级存储
            if (isJsonStr(context)) {
                //确保为JSON格式的字符串
                var jsTxt = '(' + decodeURIComponent(context.replace(/'/, "\'")) + ')';
                var jsonObj = eval(jsTxt); //转换为JSON对象
                this._cacheContext = jsonObj;
            }
        }
        return this._cacheContext;
    }, getToken: function getToken() {
        // 获取Token
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["token"];
    }, getStaff: function getStaff() {
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return {
            id: context["staffId"],
            code: context["staffCode"],
            name: context["staffName"]
        };
    }, getStaffId: function getStaffId() {
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["staffId"];
    }, getStaffCode: function getStaffCode() {
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["staffCode"];
    }, getStaffName: function getStaffName() {
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["staffName"];
    }, getDept: function getDept() {
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return {
            id: context["deptId"],
            code: context["deptCode"],
            name: context["deptName"]
        };
    }, getDeptId: function getDeptId() {
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["deptId"];
    }, getDeptCode: function getDeptCode() {
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["deptCode"];
    }, getDeptName: function getDeptName() {
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["deptName"];
    }, getUser: function getUser() {
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return {
            id: context["_A_P_userId"],
            code: context["_A_P_userLoginName"],
            name: context["_A_P_userName"]
        };
    }, getUserId: function getUserId() {
        // 获取用户ID
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["_A_P_userId"];
    }, getUserCode: function getUserCode() {
        // 获取用户编码
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["_A_P_userLoginName"];
    }, getUserName: function getUserName() {
        // 获取用户名称
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["_A_P_userName"];
    }, getOrga: function getOrga() {
        // 获取组织ID,CODE,NAME信息
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return {
            id: context["companyId"],
            code: context["companyCode"],
            name: context["companyName"]
        };
    },
    getOrgaId: function getOrgaId() {
        // 获取组织ID
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["companyId"];
    }, getOrgaCode: function getOrgaCode() {
        // 获取组织编码
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["companyCode"];
    }, getOrgaName: function getOrgaName() {
        // 获取组织名称
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["companyName"];
    }, getLogints: function getLogints() {
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["u_logints"];
    }, getTenantId: function getTenantId() {
        var context = this.getContext();
        if (context == null || context == undefined) {
            return null;
        }
        return context["tenantid"];
    }, getAuthenticationStr: function getAuthenticationStr() {
        var includeFields = ["u_logints", "u_usercode", "token", "tenantid", "userId", "userType", "typeAlias" //认证需要的字段，下面为扩展字段
        , "_A_P_userLoginName", "_A_P_userName", "userType", "companyId", "companyName", "companyCode"];
        var set = new Set();
        includeFields.forEach(function (value) {
            set.add(value);
        });

        var authentication = '';
        var context = this.getContext();
        if (context) {
            for (var prop in context) {
                if (set.has(prop) && context[prop]) {
                    authentication += prop + '=' + encodeURI(context[prop]) + ';';
                }
            }
        }
        if (authentication.length > 0 && authentication[authentication.length - 1] == ';') authentication = authentication.substring(0, authentication.length - 1);
        return authentication;
    }
};
/**
 * @desc 是否为JSON对象格式的字符串形态。匹配格式:"{...}"
 */
function isJsonStr(val) {
    return typeof val == "string" && /^\{.*\}$/.test(val);
}
module.exports = AuthToken;