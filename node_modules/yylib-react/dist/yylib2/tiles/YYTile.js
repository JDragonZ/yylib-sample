'use strict';

/**
 * Created by zhangzhzhc on 2016/10/24
 * 磁贴块
 */
require('./style/index.less');
var React = require('react');

var _require = require('react-router');

var Link = _require.Link;

var YYClass = require('../base/YYClass');
var YYIcon = require('../icon/YYIcon');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
//定义META
var uiMeta = {
    name: 'tile',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('id', null, PropTypes.string, false, 'tileid'), field('title', '建筑云', PropTypes.number, false, 'title'), field('color', '#340faf', PropTypes.string, false, '磁贴背景色'), field('icon', 'cloud', PropTypes.string, false, 'iconType'), field('link', false, PropTypes.string, false, '链接地址'), field('rowSpan', 1, PropTypes.number, false, '占据的行数'), field('colSpan', 1, PropTypes.number, false, '占据的列数'), field('rowIndex', 0, PropTypes.number, false, '位于第几行')]
};
var YYTile = YYClass.create({
    uiMeta: uiMeta,
    getDefaultProps: function getDefaultProps() {
        return {
            rowSpan: 1,
            colSpan: 1,
            color: '#340faf',
            isRoute: true,
            title: '建筑云',
            icon: 'cloud'
        };
    },
    _getContent: function _getContent(tileH) {
        var color = this.props.color;
        var icon = this.props.icon;
        var iconSize = tileH ? tileH * 0.60 : null;
        var tileId = this.props.id;
        return React.createElement(
            'div',
            { className: this.className('content'), 'data-tileid': tileId, style: { backgroundColor: color } },
            React.createElement(
                'div',
                { className: this.className('icon'), 'data-tileid': tileId, style: { height: iconSize, width: iconSize } },
                React.createElement(YYIcon, { type: icon })
            ),
            React.createElement(
                'div',
                { className: this.className('title'), 'data-tileid': tileId },
                this.props.title
            )
        );
    },
    _getLinkContent: function _getLinkContent(tileH) {
        var link = this.props.link;
        var that = this;
        if (link && link.length > 0) {
            if (this.props.isRoute === false) {
                return React.createElement(
                    'a',
                    { href: link },
                    that._getContent(tileH)
                );
            } else {
                return React.createElement(
                    Link,
                    { to: { pathname: link } },
                    that._getContent(tileH)
                );
            }
        } else {
            return that._getContent(tileH);
        }
    },
    render: function render() {
        var minSize = this.props.tilesWidth / 8;
        var tileH = minSize * this.props.rowSpan;
        var tileW = minSize * this.props.colSpan;
        var that = this;
        return React.createElement(
            'div',
            { className: this.className(), style: { height: tileH, width: tileW } },
            that._getLinkContent(tileH)
        );
    }
});

module.exports = YYTile;