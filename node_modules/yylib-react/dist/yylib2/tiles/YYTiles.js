'use strict';

var _antd = require('antd');

/**
 * Created by zhangzhzhc on 2016/10/24
 * 带轮播磁贴组件
 */
require('./style/index.less');
var React = require('react');
var _ = require('lodash');

var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
//定义META
var uiMeta = {
    name: 'tiles',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('id', 'yyui-tiles', PropTypes.string, false, 'id,用以区分同一页面多个磁贴'), field('effect', 'scrollx', PropTypes.string, false, '动画效果函数，可取 scrollx, fade'), field('dots', true, PropTypes.bool, false, '是否显示面板指示点'), field('arrows', false, PropTypes.bool, false, '是否显示面板左右箭头'), field('vertical', false, PropTypes.bool, false, '垂直显示'), field('autoplay', false, PropTypes.bool, false, '是否自动切换'), field('easing', 'linear', PropTypes.string, false, '动画效果'), field('beforeChange', null, PropTypes.func, false, '切换面板的回调'), field('afterChange', null, PropTypes.func, false, '切换面板的回调'), field('onClick', null, PropTypes.func, false, '点击磁贴的回调')]
};
var YYTiles = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            width: null
        };
    },

    getDefaultProps: function getDefaultProps() {
        return {
            id: 'yyui-tiles'
        };
    },
    _onClick: function _onClick(e) {
        e.stopPropagation();
        if (this.props.onClick && typeof this.props.onClick === 'function') {
            var target = e.target;
            var targetId = target.dataset.tileid;
            var parentId = target.parentElement.dataset.tileid;
            var targetTile = targetId ? targetId : parentId ? parentId : null;
            if (targetTile) {
                this.props.onClick(targetTile);
            }
        }
    },
    _getChildren: function _getChildren() {
        var tilesWidth = this.state.width;
        if (tilesWidth) {
            var children = this.props.children;
            if (children && children.length > 0) {
                children.forEach(function (child) {
                    child.props.tilesWidth = tilesWidth;
                });
            }
            var _props = _.cloneDeep(this.props);
            _props.children = null;
            return React.createElement(
                _antd.Carousel,
                _props,
                children
            );
        } else {
            return null;
        }
    },
    componentDidMount: function componentDidMount() {
        var that = this;
        var width = document.getElementById(that.props.id).clientWidth;
        this.setState({
            width: width
        });
    },
    render: function render() {
        var that = this;
        return React.createElement(
            'div',
            { id: that.props.id, className: this.className(), onClick: that._onClick },
            that._getChildren()
        );
    }
});

module.exports = YYTiles;