'use strict';

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('../lib');

var getValueType = _require.getValueType;

var YYPopover = require('../../popover/YYPopover');
var YYButton = require('../../button/YYButton');
var YYInput = require('../../formcontrols/input/YYInput');
var YYForm = require('../../formcontrols/form/YYForm');
var YYFormItem = require('../../formcontrols/form/YYFormItem');
var YYIcon = require('../../icon/YYIcon');
var uiMeta = {
    name: 'add-element',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('fieldValue', undefined, PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object, PropTypes.number, PropTypes.bool]), false, '属性值'), field('path', undefined, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])), false, '属性查找路径')]
};

var AddElementButton = YYClass.create({
    uiMeta: uiMeta,
    contextTypes: {
        jsonEditor: PropTypes.object
    },
    getInitialState: function getInitialState() {
        return {
            newElementName: '',
            newElementNameInvalid: false,
            visiblePopover: false
        };
    },
    componentDidMount: function componentDidMount() {},
    _addElement: function _addElement(e) {
        if (e) {
            e.preventDefault();
        }

        var _props = this.props;
        var fieldValue = _props.fieldValue;
        var path = _props.path;
        var newElementName = this.state.newElementName;
        var _context$jsonEditor = this.context.jsonEditor;
        var addArrayElement = _context$jsonEditor.addArrayElement;
        var addMapElement = _context$jsonEditor.addMapElement;


        if (getValueType(fieldValue) === 'array') {
            return addArrayElement(path, null);
        }

        var added = addMapElement(path, newElementName, null);
        if (added) {
            this.setState({
                visiblePopover: false,
                newElementInvalidName: false
            });
        } else {
            this.setState({
                visiblePopover: false,
                newElementInvalidName: true
            });
        }
    },
    _hidePopover: function _hidePopover() {
        this.setState({ visiblePopover: false });
    },
    _showPopover: function _showPopover() {
        this.setState({ visiblePopover: true });
    },
    _renderPopForm: function _renderPopForm() {
        var _this = this;

        var _state = this.state;
        var newElementName = _state.newElementName;
        var newElementInvalidName = _state.newElementInvalidName;


        return React.createElement(
            YYForm,
            { onSubmit: this._addElement },
            React.createElement(
                YYFormItem,
                null,
                React.createElement(YYInput, {
                    style: { width: 130 },
                    placeholder: '元素键',
                    value: newElementName,
                    onChange: function onChange(e) {
                        return _this.setState({ newElementName: e.target.value });
                    }
                })
            ),
            React.createElement(YYIcon, { type: 'check', onClick: this._addElement }),
            React.createElement(YYIcon, { type: 'cross', onClick: this._hidePopover }),
            newElementInvalidName && React.createElement(
                'div',
                { className: 'invalid-element-name' },
                ' Map 元素的键值必须唯一 '
            )
        );
    },
    render: function render() {
        var fieldValue = this.props.fieldValue;

        var isArray = getValueType(fieldValue) === 'array';
        var onBtnClick = isArray ? this._addElement : this._showPopover;

        var button = React.createElement(
            YYButton,
            { size: 'small', icon: 'plus', onClick: onBtnClick },
            '添加元素'
        );

        // new array elements don't need a name, so just render the button and add the element when it's clicked
        if (isArray) {
            return button;
        }

        return React.createElement(
            YYPopover,
            {
                placement: 'top',
                trigger: ['click'],
                visible: this.state.visiblePopover,
                overlayClassName: this.className(),
                content: this._renderPopForm()
            },
            button
        );
    }
});

module.exports = AddElementButton;