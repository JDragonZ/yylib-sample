'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var YYInput = require('../input/YYInput');
var _ = require('lodash');
var YYClass = require('../../base/YYClass');

var _require = require('react-dom');

var findDOMNode = _require.findDOMNode;

var formatUtils = require('yylib-utils/formatUtils');
var uiMetaFields = require('./uiMetaFields');
//定义META
var uiMeta = {
    name: 'inputcash',
    fields: uiMetaFields
};

var InputCash = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var value = this.props.value;
        return {
            value: value,
            inputValue: value,
            isEdit: false
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var _props = this.props;
        var symbol = _props.symbol;
        var decimal = _props.decimal;
        var commaVisible = _props.commaVisible;

        var sp = commaVisible ? 3 : 0;
        if ('value' in nextProps && this.state.isEdit == false) {
            this.setState({
                value: nextProps.value != '' && nextProps.value != null ? symbol + formatUtils.formatNumber(nextProps.value, decimal, sp) : '',
                inputValue: nextProps.value
            });
        }
    },
    componentDidMount: function componentDidMount() {
        this.handleStyle('right');
        var value = this.state.value;
        var _props2 = this.props;
        var symbol = _props2.symbol;
        var decimal = _props2.decimal;
        var commaVisible = _props2.commaVisible;

        var sp = commaVisible ? 3 : 0;
        if (value) {
            this.setState({
                value: symbol + formatUtils.formatNumber(value, decimal, sp)
            });
        }
    },
    handleFormat: function handleFormat(value) {
        var arr = value.split('');
        var formatArr = [];
        var minus = this.props.minus;
        _.forEach(arr, function (val) {
            var code = val.charCodeAt(0);
            var judgement = minus ? 48 <= code && code <= 57 || code == 46 || code == 45 : 48 <= code && code <= 57 || code == 46;
            if (!judgement) {
                val = '';
            }
            formatArr.push(val);
        });
        return formatArr.join('');
    },
    handlePoint: function handlePoint(preValue, value) {
        var pre_sub = preValue.slice(0, preValue.indexOf('.'));
        var cur_sub = value.slice(0, value.indexOf('.'));
        var index; // 记录小数点位置
        if (_.toNumber(pre_sub) != _.toNumber(cur_sub)) {
            // 小数点前移
            index = value.indexOf('.');
            value = value.replace(/\./g, '');
            value = value.slice(0, index) + '.' + value.slice(index);
        } else if (_.toNumber(pre_sub) == _.toNumber(cur_sub)) {
            // 小数点后移
            index = _.lastIndexOf(value, '.');
            value = value.replace(/\./g, '');
            value = value.slice(0, index - 1) + '.' + value.slice(index - 1);
        }
        return value;
    },
    handleZero: function handleZero(value) {
        var hasMinus = value.indexOf('-') > -1 ? true : false;
        value = value.replace(/-/g, '');
        var substr1 = value.substr(0, 1);
        var substr2 = value.substr(1, 1);
        var substr3 = value.substr(2);

        if (value.length > 1 && substr1 == 0 && substr2 != '.') {
            value = substr2 + substr3;
        }
        value = hasMinus ? '-' + value : value;
        return value;
    },
    handleMinus: function handleMinus(value) {
        var index = value.indexOf('-');
        if (index > -1) {
            value = value.replace(/-/g, '');
            value = '-' + value;
        }
        return value;
    },
    handleStyle: function handleStyle(key) {
        var direction = key == 'left' ? 'left' : 'right';
        var inputNode = findDOMNode(this.refs.inputCash).querySelector('input');
        if (inputNode) {
            var style = inputNode.style ? inputNode.style : {};
            style.textAlign = direction;
        }
    },
    handleChange: function handleChange(e) {
        var _this = this;
        var decimal = this.props.decimal;
        var value;
        if (e && e.target) {
            value = e.target.value;
            value = this.handleFormat(value);
            if (_.indexOf(value, '.') != _.lastIndexOf(value, '.')) {
                value = this.handlePoint(this.state.value, e.target.value);
            }
            value = this.handleMinus(value);
            value = this.handleZero(value);
        } else {
            value = '';
        }
        this.setState({
            value: value,
            inputValue: value,
            isEdit: true
        }, function () {
            if (_.isFunction(_this.props.onChange)) {
                _this.props.onChange(this.state.value != '' ? formatUtils.formatNumber(this.state.value, decimal, 0) : undefined);
            }
        });
    },
    handleFocus: function handleFocus(e) {
        this.handleStyle('left');
        var value = this.state.value;
        if (value) {
            this.setState({
                value: this.state.inputValue
            });
        }
        if (_.isFunction(this.props.onFocus)) {
            this.props.onFocus(e);
        }
    },
    handleBlur: function handleBlur(e) {
        this.handleStyle('right');
        var _props3 = this.props;
        var min = _props3.min;
        var max = _props3.max;
        var decimal = _props3.decimal;
        var symbol = _props3.symbol;
        var commaVisible = _props3.commaVisible;

        var sp = commaVisible ? 3 : 0;
        var value = this.state.value;
        if (min) {
            value = _.toNumber(value) < min ? min : value;
        }
        if (max) {
            value = _.toNumber(value) > max ? max : value;
        }
        if (value) {
            this.setState({
                value: symbol + formatUtils.formatNumber(value, decimal, sp),
                inputValue: formatUtils.formatNumber(value, decimal, sp)
            });
        }
        if (_.isFunction(this.props.onBlur)) {
            this.props.onBlur(e);
        }
    },
    render: function render() {
        var value = this.state.value;
        return React.createElement(YYInput, _extends({}, this.props, {
            onChange: this.handleChange,
            value: value,
            onFocus: this.handleFocus,
            onBlur: this.handleBlur,
            ref: 'inputCash'
        }));
    }
});
module.exports = InputCash;