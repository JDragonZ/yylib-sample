'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd');

var InputNumber = _require.InputNumber;

var _require2 = require('react-dom');

var findDOMNode = _require2.findDOMNode;

var classNames = require('classnames');
require('./index.less');
var InputCash = require('./InputCash');
var uiMetaFields = require('./uiMetaFields');
//定义META
var uiMeta = {
    name: 'inputnumber',
    fields: uiMetaFields
};

var YYInputNumber = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            defaultValue: this.props.defaultValue
        };
    },
    componentWillMount: function componentWillMount() {
        if (!!this.state.defaultValue === false) {
            this.setState({
                defaultValue: ''
            });
        };
    },
    componentDidMount: function componentDidMount() {
        this.numHandler();
    },
    numHandler: function numHandler() {
        var stepDisabled = this.props.stepDisabled;
        if (stepDisabled) {
            var inputnumber = this.refs.inputnumber;
            if (inputnumber) {
                var numHandler = findDOMNode(this.refs.inputnumber).querySelector('.ant-input-number-handler-wrap');
                numHandler.style.visibility = 'hidden';
            }
        }
    },
    renderLabledInput: function renderLabledInput(children) {
        var props = this.props;
        var wrapperClassName = this.className() + '-group';
        var addonClassName = wrapperClassName + '-addon';
        var addonBefore = props.addonBefore ? React.createElement(
            'span',
            { className: addonClassName },
            props.addonBefore
        ) : null;
        var addonAfter = props.addonAfter ? React.createElement(
            'span',
            { className: addonClassName },
            props.addonAfter
        ) : null;
        var className = classNames(_defineProperty({}, wrapperClassName, addonBefore || addonAfter));
        return React.createElement(
            'span',
            { className: className },
            addonBefore,
            children,
            addonAfter
        );
    },
    getchildren: function getchildren(type) {
        var children = null;
        switch (type) {
            case 'number':
                {
                    children = React.createElement(
                        InputNumber,
                        _extends({}, this.props, { ref: 'inputnumber', defaultValue: this.state.defaultValue }),
                        this.props.children
                    );
                    break;
                }
            case 'currency':
                {
                    children = React.createElement(
                        InputCash,
                        _extends({ className: 'input-cash' }, this.props),
                        this.props.children
                    );
                    break;
                }
            default:
                {}
        }
        return children;
    },
    render: function render() {
        var props = this.props;
        var children = this.getchildren(props.type);
        var hasAddon = props.addonBefore || props.addonAfter ? true : false;
        return React.createElement(
            'div',
            { className: this.className() },
            hasAddon ? this.renderLabledInput(children) : children
        );
    }
});
module.exports = YYInputNumber;