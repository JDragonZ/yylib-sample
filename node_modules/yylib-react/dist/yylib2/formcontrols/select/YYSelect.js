'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd');

var Select = _require.Select;

var YYMessage = require('../../message/YYMessage');
var ajax = require('../../../utils/ajax');
require('./style/index.less');
var _ = require('lodash');
var uiMeta = {
    name: 'select',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('dataurl', null, PropTypes.string, false, '远程数据Url，注意:当配置此属性时，本地数据源即item、children属性将失效'), field('dataparams', null, PropTypes.string, false, '请求数据时的自定义参数'), field('multiple', false, PropTypes.bool, false, '支持多选'), field('allowClear', false, PropTypes.bool, false, '支持清除, 单选模式有效'), field('tags', false, PropTypes.bool, false, '可以把随意输入的条目作为 tag，输入项不需要与下拉选项匹配'), field('dropdownMatchSelectWidth', true, PropTypes.bool, false, '下拉菜单和选择器同宽'), field('combobox', false, PropTypes.bool, false, '输入框自动提示模式'), field('showSearch', false, PropTypes.bool, false, '在选择框中显示搜索框'), field('disabled', false, PropTypes.bool, false, '是否禁用'), field('defaultActiveFirstOption', true, PropTypes.bool, false, '是否默认高亮第一个选项'), field('labelInValue', false, PropTypes.bool, false, '是否把每个选项的 label 包装到 value 中，决定 Select 的 value 类型'), field('onSelect', null, PropTypes.func, false, '被选中时调用，参数为选中项的 value 值'), field('onDeselect', null, PropTypes.func, false, '取消选中时调用，参数为选中项的 option value 值，仅在 multiple 或 tags 模式下生效'), field('onChange', null, PropTypes.func, false, '选中 option，或 input 的 value 变化（combobox 模式下）时，调用此函数'), field('onSearch', null, PropTypes.func, false, '文本框值变化时回调'), field('value', undefined, PropTypes.oneOf([PropTypes.string, PropTypes.array]), false, '指定当前选中的条目'), field('defaultValue', undefined, PropTypes.oneOf([PropTypes.string, PropTypes.array]), false, '指定当前选中的条目'), field('filterOption', undefined, PropTypes.oneOf([PropTypes.bool, PropTypes.func]), false, '是否根据输入项进行筛选。当其为一个函数时，会接收 inputValue option 两个参数，当 option 符合筛选条件时，应返回 true，反之则返回 false。'), field('size', 'default', PropTypes.oneOf(['large', 'default', 'small']), false, '选择框大小，可选 large small'), field('placeholder', '', PropTypes.string, false, '选择框默认文字'), field('notFoundContent', 'Not Found', PropTypes.string, false, '当下拉列表为空时显示的内容'), field('optionFilterProp', 'value', PropTypes.string, false, '搜索时过滤对应的 option 属性，如设置为 children 表示对内嵌内容进行搜索'), field('optionLabelProp', undefined, PropTypes.string, false, '选择框回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 value默认文字'), field('getPopupContainer', function () {
        return document.body;
    }, PropTypes.func, false, '菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位'), field('items', null, PropTypes.array, false, '存放下拉菜单option数据')]
};
var YYSelect = YYClass.create({
    uiMeta: uiMeta,
    statics: {
        Option: Select.Option,
        OptGroup: Select.OptGroup
    },
    getInitialState: function getInitialState() {
        var props = this.props;
        var value = props.value ? props.value : props.defaultValue;
        return {
            value: value,
            options: []
        };
    },
    componentDidMount: function componentDidMount() {
        this._requestData();
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var _props = this.props;
        var dataurl = _props.dataurl;
        var dataparams = _props.dataparams;

        if ('defaultValue' in nextProps) {
            if (this.props.defaultValue != nextProps.defaultValue) {
                this.setState({ value: nextProps.defaultValue });
            }
        }
        //value优先级高于defaultValue
        if ('value' in nextProps) {
            if (this.props.value != nextProps.value) {
                this.setState({ value: nextProps.value });
            }
        }
        if (nextProps.dataurl !== dataurl || !_.isEqual(nextProps.dataparams, dataparams)) {
            this._requestData(nextProps.dataurl, nextProps.dataparams);
        }
    },
    _requestData: function _requestData() {
        var _props2 = this.props;
        var dataurl = _props2.dataurl;
        var dataparams = _props2.dataparams;

        var _this = this;
        if (dataurl) {
            if (dataparams) {
                ajax.getJSON(dataurl, dataparams, function (result) {
                    if (result.success) {
                        _this.setState({
                            options: result.backData
                        });
                    } else {
                        YYMessage.error(result.backMsg);
                    }
                });
            } else {
                ajax.getJSON(dataurl, function (result) {
                    if (result.success) {
                        _this.setState({
                            options: result.backData
                        });
                    } else {
                        YYMessage.error(result.backMsg);
                    }
                });
            }
        }
    },
    _onChange: function _onChange(keys) {
        var that = this;
        this.setState({ value: keys }, function () {
            if (_.isFunction(that.props.onChange)) {
                that.props.onChange(keys);
            }
        });
    },
    getOptions: function getOptions(items) {
        var options = [];
        _.forEach(items, function (item) {
            options.push(React.createElement(
                Select.Option,
                _extends({}, item, { value: item.value }),
                item.text
            ));
        });
        return options;
    },
    render: function render() {
        var dataurl = this.props.dataurl;
        var optionViews = [];
        if (dataurl) {
            optionViews = this.getOptions(this.state.options);
        } else {
            var items = this.props.items;

            if (items == null) {
                optionViews = this.props.children;
            } else {
                optionViews = this.getOptions(items);
            }
        }
        return React.createElement(
            Select,
            _extends({}, this.props, { className: this.className(), onChange: this._onChange, value: this.state.value }),
            optionViews
        );
    }
});
module.exports = YYSelect;