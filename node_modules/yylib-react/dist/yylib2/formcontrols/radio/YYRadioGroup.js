'use strict';

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('lodash');

var assign = _require.assign;
var isFunction = _require.isFunction;

require('./style/index.less');

var uiMeta = {
    name: 'radiogroup',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('onChange', null, PropTypes.func, false, '选项变化时的回调函数'), field('defaultValue', undefined, PropTypes.string, false, '默认选中的值'), field('value', undefined, PropTypes.string, false, '用于设置当前选中的值'), field('size', 'default', PropTypes.oneOf(['large', 'default', 'small']), false, '大小，只对按钮样式生效')]
};

function getCheckedValue(children) {
    var value = null;
    var matched = false;
    React.Children.forEach(children, function (radio) {
        if (radio && radio.props && radio.props.checked) {
            value = radio.props.value;
            matched = true;
        }
    });
    return matched ? { value: value } : undefined;
}

var YYRadioGroup = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var value;
        var props = this.props;
        if ('value' in props) {
            value = props.value;
        } else if ('defaultValue' in props) {
            value = props.defaultValue;
        } else {
            var checkedValue = getCheckedValue(props.children);
            value = checkedValue ? checkedValue.value : undefined;
        }
        return {
            value: value
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            this.setState({
                value: nextProps.value
            });
        } else {
            var checkedValue = getCheckedValue(nextProps.children);
            if (checkedValue) {
                this.setState({
                    value: checkedValue.value
                });
            }
        }
    },
    onRadioChange: function onRadioChange(ev) {
        if (!('value' in this.props)) {
            this.setState({
                value: ev.target.value
            });
        }
        var onChange = this.props.onChange;
        if (isFunction(onChange)) {
            onChange(ev);
        }
    },
    render: function render() {
        var _this = this;
        var props = this.props;
        var cls = props.size ? ' ant-radio-group-' + props.size : '';
        var children = React.Children.map(props.children, function (radio) {
            //此处并未对childre进行严格判断
            if (radio && radio.props) {
                var keyProps = {};
                if (!('key' in radio.props) && typeof radio.props.value === 'string') {
                    keyProps.key = radio.value;
                }
                return React.cloneElement(radio, assign({}, keyProps, radio.props, {
                    onChange: _this.onRadioChange,
                    checked: _this.state.value === radio.props.value,
                    disabled: radio.props.disabled || _this.props.disabled
                }));
            }
        });
        return React.createElement(
            'div',
            { className: this.className() + cls, style: props.style },
            children
        );
    }
});

module.exports = YYRadioGroup;