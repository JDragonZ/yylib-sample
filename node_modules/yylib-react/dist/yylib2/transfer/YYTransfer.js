'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Created by Liyongfen on 2016/7/4.
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var field = YYClass.field;
var PropTypes = YYClass.PropTypes;
var YYTransferList = require('./YYTransferList');
var YYTransferOperation = require('./YYTransferOperation');
var _ = require('lodash');
require('./style/index.less');

var uiMeta = {
    name: 'transfer',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('titleLeft', '左列表', PropTypes.string, false, '左边列表标题文本'), field('titleRight', '右列表', PropTypes.string, false, '右边列表标题文本'), field('btnDownTextLeft', '下移', PropTypes.string, false, ''), field('btnUpTextLeft', '上移', PropTypes.string, false, ''), field('btnDownTextRight', '下移', PropTypes.string, false, ''), field('btnUpTextRight', '上移', PropTypes.string, false, ''), field('btnLeftText', '左移', PropTypes.string, false, ''), field('btnRightText', '右移', PropTypes.string, false, ''), field('isBtnLeftDisable', false, PropTypes.bool, false, ''), field('isBtnRightDisable', false, PropTypes.bool, false, ''), field('isBtnUpDisableLeft', true, PropTypes.bool, false, ''), field('isBtnDownDisableLeft', true, PropTypes.bool, false, ''), field('isBtnUpDisableRight', true, PropTypes.bool, false, ''), field('isBtnDownDisableRight', true, PropTypes.bool, false, ''), field('isMultipleCheckLeft', false, PropTypes.bool, false, ''), field('isMultipleCheckRight', false, PropTypes.bool, false, ''), field('leftData', [], PropTypes.array, false, '初始化数组'), field('rightData', [], PropTypes.array, false, '初始化数组')]
};

var YYTransfer = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            selectArrayLeft: [], //左边栏--当前列举项中被选中的value集合
            selectArrayRight: [],
            isBtnMoveDisableLeft: true, //左边栏--是否禁用变灰
            isBtnMovelDisableRight: true, //
            optionsLeft: this.props.leftData, //左边栏--当前列举项
            optionsRight: this.props.rightData,
            isAllCheckedLeft: false, //左边栏--全选按钮
            isAllCheckedRight: false, //
            isAllDisabledLeft: false, //左边栏--不使能全选按钮
            isAllDisabledRight: false //
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {},
    handleCheck: function handleCheck(checkedOption, flag, optionIndex, e) {
        var _setState;

        var _state = this.state;
        var selectArrayLeft = _state.selectArrayLeft;
        var selectArrayRight = _state.selectArrayRight;
        // 是否单选模式

        var isMultipleCheck = flag === 'left' ? this.props.isMultipleCheckLeft : this.props.isMultipleCheckRight;
        // 已选择的项
        var holder = flag === 'left' ? selectArrayLeft : selectArrayRight;
        var index;
        // 删除已存在的项
        holder.forEach(function (item, i) {
            if (item.value === checkedOption.value) {
                index = i;
            }
        });
        if (index > -1) {
            holder.splice(index, 1);
        }

        // 单选模式
        if (!isMultipleCheck) {
            holder = [];
            holder.push(checkedOption);
        }
        // 多选模式
        else if (e.target.checked) {
                // 插入时为每项添加order (多选上下移动需要选择的项的顺序)
                checkedOption.order = optionIndex;
                if (_.isEmpty(holder)) {
                    holder.push(checkedOption);
                } else {
                    var isPush = false;
                    holder.some(function (checkItem, i) {
                        if (optionIndex < checkItem.order) {
                            holder.splice(i, 0, checkedOption);
                            isPush = true;
                            return isPush;
                        }
                    });
                    // holder中不存在更小order的项
                    if (!isPush) {
                        holder.push(checkedOption); // 在末尾添加
                    }
                }
            }

        var _state2 = this.state;
        var optionsLeft = _state2.optionsLeft;
        var optionsRight = _state2.optionsRight;

        var optionsHolder = flag === 'left' ? optionsLeft : optionsRight;

        //控制全选状态
        var isAllChecked = false;
        if (optionsHolder.length == holder.length) isAllChecked = true;
        this.setState((_setState = {}, _defineProperty(_setState, flag === 'left' ? 'selectArrayLeft' : 'selectArrayRight', holder), _defineProperty(_setState, flag === 'left' ? 'isAllCheckedLeft' : 'isAllCheckedRight', isAllChecked), _defineProperty(_setState, flag === 'left' ? 'isBtnMovelDisableRight' : 'isBtnMoveDisableLeft', _.isEmpty(holder)), _setState));
    },
    handleSelectAll: function handleSelectAll(e, flag) {
        var _setState2;

        var options = flag == 'left' ? this.state.optionsLeft : this.state.optionsRight;
        var selectArray = [];
        if (e.target.checked) {
            options.forEach(function (option, i) {
                selectArray.push(option);
            });
        }

        this.setState((_setState2 = {}, _defineProperty(_setState2, flag === 'left' ? 'selectArrayLeft' : 'selectArrayRight', selectArray), _defineProperty(_setState2, flag === 'left' ? 'isAllCheckedLeft' : 'isAllCheckedRight', e.target.checked), _defineProperty(_setState2, flag === 'left' ? 'isBtnMovelDisableRight' : 'isBtnMoveDisableLeft', _.isEmpty(selectArray)), _setState2));
    },
    handleDownMove: function handleDownMove(flag) {
        var pos = 1;
        var selectItems = flag === 'right' ? this.state.selectArrayRight : this.state.selectArrayLeft;
        var options = flag === 'right' ? this.state.optionsRight : this.state.optionsLeft;

        for (var index = selectItems.length, posIndex = 0; index > 0; index--, posIndex++) {
            var _setState3;

            var selectItem = selectItems[index - 1];
            var selectIndex = 0;
            options.some(function (option, optionIndex) {
                if (option.value == selectItem.value) {
                    selectIndex = optionIndex;
                    return true;
                }
            });

            var targetPos = selectIndex + pos; // 目标位置索引
            var count = options.length; // 总数

            if (selectIndex > count) {
                selectIndex = count; //最后一行
            } else if (selectIndex < 0) {
                selectIndex = 0;
            }

            if (targetPos > count) {
                targetPos = count; //最后一行
            } else if (targetPos < 0) {
                targetPos = 0;
            }

            // 获取可向下移动的位数
            var moveCount = options.length - selectIndex - posIndex - 1;
            if (moveCount == 0) {
                continue;
            }
            options.splice(selectIndex, 1); // 删除当前选中元素
            options.splice(targetPos, 0, selectItem); //

            // console.log('selectItem' , selectItem);
            this.setState((_setState3 = {}, _defineProperty(_setState3, flag == 'left' ? 'optionsLeft' : 'optionsRight', options), _defineProperty(_setState3, flag == 'left' ? 'selectArrayLeft' : 'selectArrayRight', selectItems), _setState3));
        };
    },
    handleUpMove: function handleUpMove(flag) {
        var pos = -1;
        var selectItems = flag === 'right' ? this.state.selectArrayRight : this.state.selectArrayLeft;
        var options = flag === 'right' ? this.state.optionsRight : this.state.optionsLeft;
        // selectItems.forEach(function (selectItem, index) {
        for (var index = 0, posIndex = 0; index < selectItems.length; index++, posIndex++) {
            // self.handleMoveVertical(selectItem, options, pos, flag);
            var selectItem = selectItems[index];
            var selectIndex = 0;
            options.some(function (option, optionIndex) {
                if (option.value == selectItem.value) {
                    selectIndex = optionIndex;
                    return true;
                }
            });

            var targetPos = selectIndex + pos; // 目标位置索引
            var count = options.length; // 总数

            if (selectIndex > count) {
                selectIndex = count; //最后一行
            } else if (selectIndex < 0) {
                selectIndex = 0;
            }

            if (targetPos > count) {
                targetPos = count; //最后一行
            } else if (targetPos < 0) {
                targetPos = 0;
            }

            // 获取可向上移动的位数
            var moveCount = selectIndex - posIndex;
            // console.log('selectItem' , selectItem);

            if (moveCount > 0) {
                var _setState4;

                options.splice(selectIndex, 1); // 删除当前选中元素
                options.splice(targetPos, 0, selectItem); //

                this.setState((_setState4 = {}, _defineProperty(_setState4, flag == 'left' ? 'optionsLeft' : 'optionsRight', options), _defineProperty(_setState4, flag == 'left' ? 'selectArrayLeft' : 'selectArrayRight', selectItems), _setState4));
            }
        };
    },
    onHandleMove: function onHandleMove(flag) {
        var _setState5;

        var selectArray = flag == 'right' ? this.state.selectArrayLeft : this.state.selectArrayRight;
        var optionsTarget = flag == 'right' ? this.state.optionsRight : this.state.optionsLeft;
        var optionsSource = flag == 'right' ? this.state.optionsLeft : this.state.optionsRight;

        selectArray.map(function (selectItem) {
            optionsSource = optionsSource.filter(function (optionSource) {
                return selectItem.value != optionSource.value;
            });
        });

        // 重新调整options的value
        var target = _.map(optionsTarget.concat(selectArray), function (option, i) {
            option.value = i;
            return option;
        });
        this.setState((_setState5 = {}, _defineProperty(_setState5, flag == 'left' ? 'optionsLeft' : 'optionsRight', target), _defineProperty(_setState5, flag == 'right' ? 'optionsLeft' : 'optionsRight', optionsSource), _defineProperty(_setState5, flag == 'right' ? 'selectArrayLeft' : 'selectArrayRight', []), _defineProperty(_setState5, flag === 'right' ? 'isBtnMovelDisableRight' : 'isBtnMoveDisableLeft', true), _defineProperty(_setState5, flag === 'right' ? 'isAllCheckedLeft' : 'isAllCheckedRight', false), _setState5));
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: this.className() },
            React.createElement(YYTransferList, { title: this.props.titleLeft,
                btnDownText: this.props.btnDownTextLeft,
                btnUpText: this.props.btnUpTextLeft,
                isBtnDownDisable: this.props.isBtnDownDisableLeft,
                isBtnUpDisable: this.props.isBtnUpDisableLeft,
                flag: 'left' //代表左边列
                , searchPlaceholder: '请输入查找内容',
                options: this.state.optionsLeft,
                selectArray: this.state.selectArrayLeft,
                isAllChecked: this.state.isAllCheckedLeft,
                isAllDisabled: this.state.isAllDisabledLeft,
                handleSelectAll: this.handleSelectAll,
                handleCheck: this.handleCheck,
                handleUpMove: this.handleUpMove,
                handleDownMove: this.handleDownMove,
                isSearchDisabled: this.props.isSearchDisabled,
                isMultipleCheck: this.props.isMultipleCheckLeft }),
            React.createElement(
                'div',
                { className: 'yyui-transfer-btn' },
                React.createElement(YYTransferOperation, { key: 'b1',
                    flag: 'right' //代表移动方向
                    , text: this.props.btnRightText,
                    onHandleMove: this.onHandleMove,
                    enableClick: this.state.isBtnMovelDisableRight }),
                React.createElement(YYTransferOperation, { key: 'b2',
                    flag: 'left',
                    text: this.props.btnLeftText,
                    onHandleMove: this.onHandleMove,
                    enableClick: this.state.isBtnMoveDisableLeft })
            ),
            React.createElement(YYTransferList, { title: this.props.titleRight,
                btnDownText: this.props.btnDownTextRight,
                btnUpText: this.props.btnUpTextRight,
                isBtnDownDisable: this.props.isBtnDownDisableRight,
                isBtnUpDisable: this.props.isBtnUpDisableRight,
                flag: 'right',
                searchPlaceholder: '请输入查找内容',
                options: this.state.optionsRight,
                selectArray: this.state.selectArrayRight,
                isAllChecked: this.state.isAllCheckedRight,
                isAllDisabled: this.state.isAllDisabledRight,
                handleSelectAll: this.handleSelectAll,
                handleCheck: this.handleCheck,
                handleUpMove: this.handleUpMove,
                handleDownMove: this.handleDownMove,
                isSearchDisabled: this.props.isSearchDisabled,
                isMultipleCheck: this.props.isMultipleCheckRight })
        );
    }
});
module.exports = YYTransfer;