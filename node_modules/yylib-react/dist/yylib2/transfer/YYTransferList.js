'use strict';

/**
 * Created by wuhao on 16/7/18.
 */

var React = require('react');
var YYClass = require('../base/YYClass');
var YYTransferSearch = require('./YYTransferSearch');
var YYButton = require('../button/YYButton');
var YYCheckbox = require('../formcontrols/checkbox/YYCheckbox');
var _ = require('lodash');
require('./style/index.less');

var noop = function noop() {};

var YYTransferList;
YYTransferList = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            title: '',
            btnUpText: '上移',
            btnDownText: '下移',
            isBtnUpDisable: true, // 是否禁用『上移』按钮
            isBtnDownDisable: true, // 是否禁用『下移』按钮
            searchPlaceholder: '', // 搜索框placeholder
            selectArray: [], // 选择的项
            options: [], // 列表项
            isMutipleCheck: false, // 是否启用多选
            isAllChecked: false, // 是否全选
            isAllDisabled: false, // 是否全部禁用
            isSearchDisabled: true // 是否禁用搜索

        };
    },
    getInitialState: function getInitialState() {
        return {
            findIndex: -1, //当前查找项的值
            optionsSearch: [], // 筛选后列表
            highlight: {}, // 查找高亮样式
            searchText: '', // 搜索框内容
            handleSelectAll: noop, // 全选
            handleCheck: noop,
            handleDownMove: noop, // 下移
            handleUpMove: noop, // 移动
            handleClear: noop
        };
    },
    handleSelectAll: function handleSelectAll(e) {
        if (_.isFunction(this.props.handleSelectAll)) {
            this.props.handleSelectAll(e, this.props.flag);
        }
    },
    handleCheck: function handleCheck(checkedOption, index, e) {
        if (_.isFunction(this.props.handleCheck)) {
            this.props.handleCheck(checkedOption, this.props.flag, index, e);
        }
    },
    handleDownMove: function handleDownMove() {
        if (_.isFunction(this.props.handleDownMove)) {
            this.props.handleDownMove(this.props.flag);
        }
    },
    handleUpMove: function handleUpMove() {
        if (_.isFunction(this.props.handleUpMove)) {
            this.props.handleUpMove(this.props.flag);
        }
    },
    matchFilter: function matchFilter(text, filterText) {
        var regex = new RegExp(filterText);
        return !!text.label.match(regex);
    },
    handleOnInputChange: function handleOnInputChange(e) {

        var filter = e.target.value;
        if (_.isEmpty(filter)) {
            this.handleClear(e);
        } else {
            var self = this;
            var optionsSearch = this.props.options.filter(function (optionSearch) {
                return self.matchFilter(optionSearch, filter);
            });
            this.setState({ optionsSearch: optionsSearch, searchText: e.target.value });
        }
    },
    handleFindNext: function handleFindNext() {
        // console.log('筛选index', this.state.findIndex);
        // 第一个
        if (this.state.findIndex == -1) {
            this.setState({ findIndex: 0 });
        } else if (this.state.optionsSearch.length - 1 > this.state.findIndex) {
            var findIndex = this.state.findIndex;
            this.setState({ findIndex: findIndex + 1 });
        }
    },
    handleClear: function handleClear(e) {
        this.setState({ optionsSearch: [], searchText: '', findIndex: -1 });
    },
    handleFindPrevious: function handleFindPrevious() {
        // console.log('筛选', this.state.optionsSearch);
        // 第一个
        if (this.state.findIndex == -1) {
            this.setState({ findIndex: this.state.optionsSearch.length - 1 });
        } else if (this.state.findIndex > 0) {
            var findIndex = this.state.findIndex;
            this.setState({ findIndex: findIndex - 1 });
        }
    },
    renderListHeader: function renderListHeader(props) {
        return [props.isMultipleCheck ? [React.createElement(
            'div',
            { className: 'yyui-transfer-list-title' },
            React.createElement(YYCheckbox, { onChange: props.handleSelectAll,
                checked: props.isAllChecked,
                disabled: props.isAllDisabled }),
            React.createElement(
                'span',
                { className: 'yyui-transfer-list-title-clauses' },
                props.len,
                '/',
                props.count,
                '条'
            ),
            React.createElement(
                'span',
                { className: 'yyui-transfer-list-title-name' },
                props.title
            )
        )] : [React.createElement(
            'div',
            { className: 'yyui-transfer-list-title' },
            React.createElement(
                'span',
                { className: 'yyui-transfer-list-title-clauses' },
                '共',
                props.count,
                '条'
            ),
            React.createElement(
                'span',
                { className: 'yyui-transfer-list-title-name' },
                props.title
            )
        )]];
    },
    renderListFooter: function renderListFooter(props) {
        return React.createElement(
            'div',
            null,
            !props.isBtnDownDisable ? React.createElement(
                YYButton,
                { type: 'primary', size: 'small',
                    style: { margin: 5, float: 'right' },
                    onClick: this.handleDownMove },
                props.btnDownText
            ) : null,
            !props.isBtnUpDisable ? React.createElement(
                YYButton,
                { type: 'primary', size: 'small',
                    style: { margin: 5, float: 'right' },
                    onClick: this.handleUpMove },
                props.btnUpText
            ) : null
        );
    },
    renderListContent: function renderListContent(props) {
        // 列表数据
        var options = props.options;
        var selectArray = props.selectArray;

        //列表内容
        var listContent = [];
        // 查找高亮
        var self = this;
        var highlight = {};
        var optionSeachCurrent;
        options.map(function (option, index) {
            if (!_.isEmpty(self.state.optionsSearch) && self.state.findIndex != -1) {
                optionSeachCurrent = self.state.optionsSearch[self.state.findIndex];
                if (optionSeachCurrent && optionSeachCurrent.value == option.value) {
                    // 设置当前项高亮
                    highlight = { color: 'blue' };
                } else {
                    highlight = {};
                }
            }
            if (self.props.isMultipleCheck) {
                listContent.push(React.createElement(
                    YYCheckbox,
                    { style: highlight,
                        onChange: self.handleCheck.bind(this, option, index),
                        checked: selectArray.some(function (key) {
                            return key.value === option.value;
                        }) },
                    option == undefined ? '' : option.label
                ));
            } else {
                var aClass = {
                    color: '#666',
                    cursor: 'pointer',
                    display: 'block',
                    padding: '7px 16px'
                };
                aClass = _.assign(aClass, highlight);

                var selectItem = selectArray.length == 1 ? selectArray[0] : {};
                if (selectItem.value == option.value) {
                    aClass = _.assign(aClass, highlight, { color: '#2db7f5' });
                    // console.log(aClass);
                }

                listContent.push(React.createElement(
                    'a',
                    { style: aClass, onClick: self.handleCheck.bind(this, option) },
                    option == undefined ? '' : option.label
                ));
            }
        });
        return listContent;
    },
    render: function render() {
        var cls = 'yyui-transfer-list' + (this.props.className ? this.props.className : '');
        var _props = this.props;
        var isMultipleCheck = _props.isMultipleCheck;
        var handleSelectAll = _props.handleSelectAll;
        var isAllChecked = _props.isAllChecked;
        var isAllDisabled = _props.isAllDisabled;
        var selectArray = _props.selectArray;
        var options = _props.options;
        var title = _props.title;
        var isBtnDownDisable = _props.isBtnDownDisable;
        var isBtnUpDisable = _props.isBtnUpDisable;
        var btnUpText = _props.btnUpText;
        var btnDownText = _props.btnDownText;


        return React.createElement(
            'div',
            { className: cls },
            this.renderListHeader({
                isMultipleCheck: isMultipleCheck,
                handleSelectAll: handleSelectAll,
                isAllChecked: isAllChecked,
                isAllDisabled: isAllDisabled,
                len: selectArray.length,
                count: options.length,
                title: title
            }),
            React.createElement(
                'div',
                { className: 'yyui-transfer-list-main' },
                !this.props.isSearchDisabled ? React.createElement(YYTransferSearch, { value: this.state.searchText,
                    searchPlaceholder: this.props.searchPlaceholder,
                    handleOnInputChange: this.handleOnInputChange,
                    handleClear: this.handleClear,
                    handleFindPrevious: this.handleFindPrevious,
                    handleFindNext: this.handleFindNext }) : null,
                React.createElement(
                    'div',
                    { className: 'yyui-transfer-content' },
                    this.renderListContent({
                        options: options,
                        selectArray: selectArray,
                        isMultipleCheck: isMultipleCheck
                    })
                )
            ),
            React.createElement(
                'div',
                { className: 'yyui-transfer-list-footer' },
                this.renderListFooter({
                    isBtnDownDisable: isBtnDownDisable,
                    isBtnUpDisable: isBtnUpDisable,
                    btnUpText: btnUpText,
                    btnDownText: btnDownText
                })
            )
        );
    }
});

module.exports = YYTransferList;