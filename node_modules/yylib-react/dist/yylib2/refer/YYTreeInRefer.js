'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYTree = require('../tree/YYTree');
var YYTreeNode = require('../tree/YYTreeNode');
var YYSelect = require('../formcontrols/select/YYSelect');
var ReactUtils = require('../../utils/ReactUtils');
var YYOption = YYSelect.Option;
var store = window.localStorage;

var _require = require('./utils/YYReferUtils');

var generateTreeNodes = _require.generateTreeNodes;
var getNewTreeData = _require.getNewTreeData;

//定义META

var uiMeta = {
    name: 'refer-innertree',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('treeData', null, PropTypes.array, true, '树数据'), field('checkable', null, PropTypes.bool, true, '是否有复选框'), field('checkedKeys', [], PropTypes.array, true, '默认勾选的项'), field('selectedKeys', [], PropTypes.array, true, '默认选择的项'), field('onCheckNodes', null, PropTypes.func, true, '勾选复选框回调'), field('onSelectNode', null, PropTypes.func, true, '点击树节点回调'), field('treerelyselect', null, PropTypes.array, false, '多树对象数组')]
};
var YYTreeInRefer = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            // treeData: [],
            treeData: this.props.treeData,
            multiple: false,
            checkedKeys: this.props.checkedKeys,
            selectedKeys: this._formatSelectedKey(this.props.selectedKeys),
            loading: this.props.loading,
            expandedKeys: [], // 受控原因：控制默认的初始expandedKeys与用户点击产生的expandedKeys
            autoExpandParent: true
        };
    },

    // 规范selectedKeys
    _formatSelectedKey: function _formatSelectedKey(selectedKeys) {
        if (selectedKeys) {
            if (typeof selectedKeys === "string") {
                //如果是单值时，转化为数组
                return selectedKeys.split(",");
            } else {
                return selectedKeys;
            }
        } else {
            // 如果为空，返回空数组，防止tree内部报null.length错误
            return [];
        }
    },
    onLoadData: function onLoadData(treeNode) {
        var _this = this;

        return new Promise(function (resolve) {
            setTimeout(function () {
                var treeData = [].concat(_toConsumableArray(_this.state.treeData));
                getNewTreeData(treeData, treeNode.props.eventKey, generateTreeNodes(treeNode), 2);
                _this.setState({ treeData: treeData });
                resolve();
            }, 500);
        });
    },
    componentDidMount: function componentDidMount() {
        // const {treeData} = this.props;
        // setTimeout(() => {
        //     this.setState({
        //       treeData: treeData
        //     });
        // }, 100);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var _this2 = this;

        var treeData = nextProps.treeData;

        setTimeout(function () {
            _this2.setState({
                treeData: treeData,
                loading: nextProps.loading,
                checkedKeys: nextProps.checkedKeys,
                selectedKeys: _this2._formatSelectedKey(nextProps.selectedKeys)
            });
        }, 100);
    },
    onExpand: function onExpand(expandedKeys) {
        // if not set autoExpandParent to false, if children expanded, parent can not collapse.
        // or, you can remove all expanded children keys.
        this.setState({
            expandedKeys: expandedKeys,
            autoExpandParent: false
        });
    },
    getBoolVal: function getBoolVal(srcVal) {
        if (srcVal === true || srcVal === 'true') {
            return true;
        }
        return false;
    },
    onChangeSelect: function onChangeSelect(value) {
        this.props.onTreeChanged(value);
    },
    _getSearchSelect: function _getSearchSelect() {
        var that = this;
        var treerelyselect = this.props.treerelyselect;
        if (treerelyselect && treerelyselect.length > 0) {
            var options = [];
            for (var i = 0; i < treerelyselect.length; i++) {
                var curData = treerelyselect[i];
                options.push(React.createElement(
                    YYOption,
                    { value: curData['treerelyurl'], title: curData['relyfieldname'] },
                    curData['relyfieldname']
                ));
            }
            var storeKey = this.props.storeKeyOfTree;
            var firstTree = store[storeKey] ? JSON.parse(store[storeKey]) : treerelyselect[0]['treerelyurl'];
            return React.createElement(
                YYSelect,
                { style: { minWidth: 100 }, defaultValue: firstTree, onChange: that.onChangeSelect },
                options
            );
        } else {
            return null;
        }
    },

    // 合并数组
    _doConcat: function _doConcat(originArray, newArray) {
        if (newArray && newArray instanceof Array && newArray.length > 0) {
            originArray = originArray.concat(newArray);
        }
        return originArray;
    },

    //默认展开根级
    _getDefaultExpandedKeys: function _getDefaultExpandedKeys(treeNodes) {
        if (this.state.expandedKeys.length > 0) {
            return this.state.expandedKeys;
        }
        var defaultExpandedKeys = [];
        for (var i = 0; i < treeNodes.length; i++) {
            treeNodes[i].key ? defaultExpandedKeys.push(treeNodes[i].key) : null;
        }
        // 合并checkedKeys、selectedKeys,以解决默认选择的树节点没有被展开的bug
        var checkedKeys = this.state.checkedKeys;
        var selectedKeys = this.state.selectedKeys;
        defaultExpandedKeys = this._doConcat(defaultExpandedKeys, checkedKeys);
        defaultExpandedKeys = this._doConcat(defaultExpandedKeys, selectedKeys);
        return defaultExpandedKeys;
    },
    render: function render() {
        var _this3 = this;

        var that = this;
        var loop = function loop(data) {
            return data.map(function (item) {
                var isdisable = _this3.getBoolVal(item.disable);
                // var selectable = this.getBoolVal(!item.unSelectable);
                var selectable = item.selectable === false || item.selectable === 'false' ? false : true;
                var isLeaf = _this3.getBoolVal(item.isLeaf);
                if (item.children) {
                    return React.createElement(
                        YYTreeNode,
                        { code: item.code, extdata: item.extdata, title: item.name, key: item.key, disabled: isdisable, selectable: selectable, isLeaf: isLeaf },
                        loop(item.children)
                    );
                }
                return React.createElement(YYTreeNode, { code: item.code, extdata: item.extdata, title: item.name, key: item.key, disabled: isdisable, selectable: selectable, isLeaf: isLeaf });
            });
        };
        var treeNodes = loop(this.state.treeData);
        var expandedKeys = this._getDefaultExpandedKeys(treeNodes);
        var emptyView = React.createElement(
            'div',
            { style: { marginTop: '30%', marginLeft: '40%' } },
            ' 无数据 '
        );
        return React.createElement(
            YYTree,
            {
                autoExpandParent: this.state.autoExpandParent,
                className: this.className(),
                loadData: this.onLoadData,
                checkable: this.props.checkable,
                multiple: this.props.multiple,
                loading: this.state.loading,
                expandedKeys: expandedKeys,
                onSelect: this.props.onSelectNode,
                onCheck: this.props.onCheckNodes,
                onExpand: this.onExpand,
                onNodeDblClick: this.props.onNodeDblClick,
                checkedKeys: that.state.checkedKeys,
                selectedKeys: that.state.selectedKeys,
                searchFilter: that.props.searchFilter,
                checkStrictly: that.props.checkStrictly,
                emptyView: emptyView,
                searchAddonBefore: this._getSearchSelect() },
            treeNodes
        );
    }
});

module.exports = YYTreeInRefer;