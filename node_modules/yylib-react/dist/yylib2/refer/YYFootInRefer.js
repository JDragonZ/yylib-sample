'use strict';

var _ReferConstants = require('./constants/ReferConstants');

var React = require('react');
var YYClass = require('../base/YYClass');
var YYTag = require('../tag/YYTag');
var YYButton = require('../button/YYButton');
var YYScrollbar = require('../scrollbar/YYScrollbar');
var YYRow = require('../layout/YYRow');
var YYCol = require('../layout/YYCol');
var YYRadio = require('../formcontrols/radio/YYRadio');
var YYRadioGroup = require('../formcontrols/radio/YYRadioGroup');
var AuthToken = require("../../utils/AuthToken");
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var store = window.localStorage;
var storeKey = null;


//定义META
var uiMeta = {
	name: 'refer-foot',
	fields: [
	//field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
	field('refinfokey', null, PropTypes.string, true, '参照key'), field('onOk', null, PropTypes.func, true, '确认操作回调函数'), field('onCancel', null, PropTypes.func, true, '取消操作回调函数'), field('idField', null, PropTypes.string, true, 'id字段'), field('nameField', null, PropTypes.string, true, 'name字段'), field('selectedDatas', null, PropTypes.array, true, '选择的数据行'), field('refname', null, PropTypes.string, true, '当前参照名称'), field('multiselect', null, PropTypes.bool, false, '是否支持多选')]
};
var YYFootInRefer = YYClass.create({
	getInitialState: function getInitialState() {
		return {
			tagField: this._getTagField()

		};
	},

	_getTagField: function _getTagField() {
		var tagField = this.props.nameField;
		var refinfokey = this.props.refinfokey;

		if (store) {
			var userCode = AuthToken.getUserCode();
			storeKey = _ReferConstants.REFER_TAGFIELD + userCode + "-" + refinfokey;
			if (store[storeKey]) {
				tagField = JSON.parse(store[storeKey]);
			}
		}
		return tagField;
	},
	componentWillUnmount: function componentWillUnmount() {
		var tagField = this.state.tagField;
		store.setItem(storeKey, JSON.stringify(tagField));
	},
	_getTags: function _getTags() {
		var _this = this;

		var _props = this.props;
		var nameField = _props.nameField;
		var idField = _props.idField;
		var selectedDatas = _props.selectedDatas;

		var tagField = this.state.tagField;
		var selectedTags = null;
		if (selectedDatas && nameField) {
			selectedTags = [];
			for (var i = selectedDatas.length - 1; i >= 0; i--) {
				if (selectedDatas[i] && selectedDatas[i][idField]) {
					(function () {
						var id = selectedDatas[i][idField];
						selectedTags.push(React.createElement(
							YYTag,
							{ closable: true, afterClose: function afterClose() {
									return _this.props.onTagClose(id);
								}, key: id },
							selectedDatas[i][tagField]
						));
					})();
				}
			};
		};

		return selectedTags;
	},

	onChange: function onChange(e) {
		this.setState({
			tagField: e.target.value
		});
	},
	render: function render() {
		var that = this;
		var refname = this.props.refname;
		if (this.props.multiselect) {
			var selectedTags = this._getTags();
			var hasTags = false;
			if (selectedTags && selectedTags.length > 0) {
				hasTags = true;
			}
			var nameField = this.props.nameField;
			var codeField = this.props.codeField;
			if (this.props.ifTreeFooter) {
				// 树型参照中已选择数据和 操作按钮是上下结构
				return React.createElement(
					'div',
					{ className: 'yyui-refer-footer' },
					React.createElement(
						'div',
						null,
						React.createElement(
							YYCol,
							{ span: 12 },
							React.createElement(
								'span',
								{ className: 'yyui-refer-selected-label' },
								'已选择',
								refname,
								'：'
							)
						),
						React.createElement(
							YYCol,
							{ span: 12 },
							hasTags ? React.createElement(
								YYRadioGroup,
								{ defaultValue: 'a', onChange: this.onChange, value: that.state.tagField },
								React.createElement(
									YYRadio,
									{ key: 'name', value: nameField },
									'名称'
								),
								React.createElement(
									YYRadio,
									{ key: 'code', value: codeField },
									'编码'
								)
							) : null
						),
						React.createElement(
							YYScrollbar,
							{ style: { height: 50 } },
							selectedTags
						)
					),
					React.createElement(
						'div',
						{ style: { textAlign: 'right', paddingTop: 10 } },
						React.createElement(
							YYButton,
							{ ghost: true, onClick: that.props.onClean, type: 'warning' },
							'清除'
						),
						React.createElement(
							YYButton,
							{ className: 'yyui-refer-button-ok', ghost: true, onClick: that.props.onCancel },
							'取消'
						),
						React.createElement(
							YYButton,
							{ className: 'yyui-refer-button-ok', onClick: that.props.onOk, type: 'primary' },
							'确认'
						)
					)
				);
			} else {
				// 树型参照中已选择数据和 操作按钮是左右结构
				return React.createElement(
					'div',
					{ className: 'yyui-refer-footer' },
					React.createElement(
						YYCol,
						{ span: 16, style: { padding: 5 } },
						React.createElement(
							'div',
							null,
							React.createElement(
								YYCol,
								{ span: 12 },
								React.createElement(
									'span',
									{ className: 'yyui-refer-selected-label' },
									'已选择',
									refname,
									'：'
								)
							),
							React.createElement(
								YYCol,
								{ span: 12 },
								hasTags ? React.createElement(
									YYRadioGroup,
									{ defaultValue: 'a', onChange: this.onChange, value: that.state.tagField },
									React.createElement(
										YYRadio,
										{ key: 'name', value: nameField },
										'名称'
									),
									React.createElement(
										YYRadio,
										{ key: 'code', value: codeField },
										'编码'
									)
								) : null
							),
							React.createElement(
								YYScrollbar,
								{ style: { height: 60 } },
								selectedTags
							)
						)
					),
					React.createElement(
						YYCol,
						{ span: 8 },
						React.createElement(
							'div',
							{ className: 'yyui-refer-buttons-muiti' },
							React.createElement(
								YYButton,
								{ ghost: true, onClick: that.props.onClean, type: 'warning' },
								'清除'
							),
							React.createElement(
								YYButton,
								{ className: 'yyui-refer-button-ok', ghost: true, onClick: that.props.onCancel },
								'取消'
							),
							React.createElement(
								YYButton,
								{ className: 'yyui-refer-button-ok', onClick: that.props.onOk, type: 'primary' },
								'确认'
							)
						)
					)
				);
			}
		} else {
			return React.createElement(
				'div',
				{ className: 'yyui-refer-footer' },
				React.createElement(
					'div',
					{ className: 'yyui-refer-buttons' },
					React.createElement(
						YYButton,
						{ ghost: true, onClick: that.props.onClean, type: 'warning' },
						'清除'
					),
					React.createElement(
						YYButton,
						{ className: 'yyui-refer-button-ok', ghost: true, onClick: that.props.onCancel },
						'取消'
					),
					React.createElement(
						YYButton,
						{ className: 'yyui-refer-button-ok', onClick: that.props.onOk, type: 'primary' },
						'确认'
					)
				)
			);
		}
	}
});

module.exports = YYFootInRefer;