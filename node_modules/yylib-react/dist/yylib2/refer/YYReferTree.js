'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _ReferConstants = require('./constants/ReferConstants');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var React = require('react');
var _ = require('lodash');
var ajax = require('../../utils/ajax');
var YYClass = require('../base/YYClass');
var YYRow = require('../layout/YYRow');
var YYCol = require('../layout/YYCol');
var YYTabs = require('../tabs/YYTabs');
var YYTab = require('../tabs/YYTab');
var YYTag = require('../tag/YYTag');
var YYIcon = require('../icon/YYIcon');
var YYButton = require('../button/YYButton');
var YYTable = require('../table/YYTable');
var YYScrollbars = require('../scrollbar/YYScrollbar');
var YYInputButton = require('../formcontrols/inputbutton/YYInputButton');
var YYMessage = require('../message/YYMessage');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('react-redux');

var connect = _require.connect;

var _require2 = require('./actions/reference');

var getTreeData = _require2.getTreeData;
var addOften = _require2.addOften;
var deleteOften = _require2.deleteOften;

var YYTreeInRefer = require('./YYTreeInRefer');
var YYFootInRefer = require('./YYFootInRefer');
require('./style/index.less');
var AuthToken = require("../../utils/AuthToken");

var _require3 = require('./utils/YYReferUtils');

var formatOftenToServer = _require3.formatOftenToServer;
var formatOftenFromServer = _require3.formatOftenFromServer;

var store = window.localStorage;
var storeKey = null;

var mapStateToProps = function mapStateToProps(state) {
	return {
		refinfo: state.refinfo
	};
};

function noop() {};
//定义META
var uiMeta = {
	name: 'refer-tree',
	fields: [
	//field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
	field('refinfokey', null, PropTypes.string, true, '参照key'), field('refname', null, PropTypes.string, true, '参照名称'), field('dataurl', null, PropTypes.string, true, '查询url'), field('id', null, PropTypes.string, true, 'id'), field('initialValue', null, PropTypes.oneOfType([PropTypes.object, PropTypes.Array]), false, '默认初始值'), field('operateurl', null, PropTypes.string, true, '操作url'), field('orderfield', null, PropTypes.string, true, '排序字段'), field('often', null, PropTypes.bool, true, '是否显示常用'), field('multiselect', null, PropTypes.bool, true, '是否支持多选'), field('querystr', null, PropTypes.string, true, '查询条件(过期)'), field('condition', null, PropTypes.oneOfType([PropTypes.func, PropTypes.object]), true, '自定义查询条件'), field('onOk', null, PropTypes.func, true, '确认操作回调函数'), field('onCancel', null, PropTypes.func, true, '取消操作回调函数'), field('customheader', null, PropTypes.element, false, '自定义header'), field('contentH', null, PropTypes.number, true, '内容区域的高度')]
};
var YYReferTree = YYClass.create({
	uiMeta: uiMeta,
	getInitialState: function getInitialState() {
		return {
			refid: null,
			name: null,
			loadOften: false,
			selectedNode: this._getDefaultNodes(), // 单选模式 selected的节点
			// 单选模式下不会有checkedKeys,但是多选模式下会有selectedKeys,所以要注意下多选模式下不需要有初始的selectedNodes
			selectedNodeKey: this.props.multiselect ? [] : this._getDefaultKey(), // 单选模式 selected的节点key
			checkedNodes: this._getDefaultNodes(), // 多选模式 checkedd的节点s
			checkedKeys: this._getDefaultKey() };
	}
	// 获取之前选取的值
	, _getDefaultNodes: function _getDefaultNodes() {
		var refValue = this.props.initialValue;
		if (refValue) {
			if (refValue instanceof Array) {
				refValue.forEach(function (value) {
					value.key = value.id;
				});
			} else {
				refValue.key = refValue.id;
			}
			return refValue;
		}

		return null;
	}
	// 根据之前选择的值，设置树的默认selectedkeys/checkedKeys
	,
	_getDefaultKey: function _getDefaultKey() {
		var keys = [];
		var refValue = this.props.initialValue;
		if (refValue) {
			if (refValue instanceof Array) {
				if (refValue.length > 0) {
					for (var i = 0; i < refValue.length; i++) {
						keys.push(refValue[i].id);
					}
				}
			} else {
				keys.push(refValue.id);
			}
		}

		return keys;
	},
	componentWillMount: function componentWillMount() {
		var refinfokey = this.props.refinfokey;

		if (store) {
			var userCode = AuthToken.getUserCode();
			storeKey = _ReferConstants.REFER_OFTEN + userCode + "-" + refinfokey;
		}
	},
	componentDidMount: function componentDidMount() {
		var that = this;
		// 延迟，解决tab错位的bug
		setTimeout(function () {
			that.doQuery(null);
		}, 500);
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		if (nextProps && nextProps.refinfo) {
			var refinfo = nextProps.refinfo;
			if (refinfo.doReload) {
				//重新查询数据
				this.doQuery(null);
			}
			if (refinfo.showMsg) {
				var showMsg = refinfo.showMsg;
				if (showMsg.success) {
					YYMessage.success(showMsg.success);
				} else if (showMsg.error) {
					YYMessage.error(showMsg.error);
				}
			}
		}
	},
	getQuery: function getQuery(querystr, condition, searchText, orderfield, orgId) {
		var getQuery = {};
		if (querystr && querystr.length > 0) getQuery.relyCondition = querystr;
		if (orderfield && orderfield.length > 0) getQuery.orderCondition = orderfield;
		if (searchText && searchText.length > 0) getQuery.searchText = searchText;
		if (orgId && orgId.length > 0) getQuery.orgId = orgId;
		var _condition = ajax.getParams(condition);
		if (!_.isEmpty(_condition) && _.isPlainObject(_condition)) {
			//转成JSON格式字符串
			getQuery.condition = JSON.stringify(_condition);
		}
		return getQuery;
	},
	doQuery: function doQuery(searchValue) {
		var _props = this.props;
		var dataurl = _props.dataurl;
		var querystr = _props.querystr;
		var condition = _props.condition;
		var orderfield = _props.orderfield;
		var dispatch = _props.dispatch;
		var id = _props.id;

		var getQuery = this.getQuery(querystr, condition, searchValue, orderfield, id);
		dispatch(getTreeData(dataurl, getQuery));
	}
	// 保存/删除 常用数据到服务器. oper=0: 手动， oper=1：自动
	, _saveOften: function _saveOften(records, oper, isDelete, ifShowMsg) {
		var dispatch = this.props.dispatch;
		var userId = AuthToken.getUserId();
		var refinfokey = this.props.refinfokey;
		var idField = this.props.idField;
		var serverUrl = this.props.serverUrl;
		if (isDelete === true) {
			var ids = records[idField]; // 当前删除只支持单个删除，后续支持批量删除后在此扩展
			dispatch(deleteOften(serverUrl, { userId: userId, refinfokey: refinfokey, ids: ids }));
		} else {
			var dataset = formatOftenToServer(records, idField);
			if (dataset && dataset.length > 0) {
				dispatch(addOften(serverUrl, { userId: userId, refinfokey: refinfokey, oper: oper, dataset: dataset }, ifShowMsg));
			}
		}
	},
	addOften: function addOften(e) {
		var multiselect = this.props.multiselect;

		var nodes = multiselect ? this.state.checkedNodes : this.state.selectedNode;
		var nodeKey = null;
		if (store && nodes) {
			this._saveOften(nodes, 0, false, true);
		}
	},
	delOften: function delOften(record, e) {
		e.stopPropagation();
		this._saveOften(record, 0, true);
		this.setState({
			loadOften: !this.state.loadOften
		});
	},
	doHandleDatas: function doHandleDatas(checkedNodes, selectedNode, isHandleOk) {
		var nodes = checkedNodes ? checkedNodes : this.state.checkedNodes;
		var node = selectedNode ? selectedNode : this.state.selectedNode;
		var multiselect = this.props.multiselect;

		var selNode = null;
		if (multiselect) {
			selNode = nodes;
		} else {
			selNode = node;
		}
		if (isHandleOk) {
			if (this.props.often) {
				this._saveOften(selNode, 1, false);
			}
			//点击确认按钮 逻辑
			this.props.onOk(selNode);
		} else {
			//实时传递选择的数据 逻辑
			this.props.onSelectedChanged(selNode);
		}
	},
	onRowClick: function onRowClick(record, index) {
		//选中行 单选时
		if (record) {
			var _node;

			var nodeKey = record.id;
			var node = (_node = {
				key: record.key,
				id: record.id,
				code: record.code,
				name: record.name
			}, _defineProperty(_node, 'code', record.code), _defineProperty(_node, 'extdata', record.extdata), _node);
			this.setState({
				selectedNodeKey: nodeKey,
				selectedNode: node
			});
			this.doHandleDatas(null, node, false);
		}
	},
	onChangeRow: function onChangeRow(keys, rows) {
		var checkedNodes = [];
		if (rows && rows.length > 0) {
			for (var i = rows.length - 1; i >= 0; i--) {
				checkedNodes[i] = {
					key: rows[i].key,
					id: rows[i].id,
					code: rows[i].code,
					name: rows[i].name,
					extdata: rows[i].extdata
				};
			};
		}
		this.setState({
			checkedKeys: keys,
			checkedNodes: checkedNodes
		});
		this.doHandleDatas(checkedNodes, null, false);
	},
	onCheckNodes: function onCheckNodes(info, e) {
		var checkedNodes = [];
		if (info.length > 0 && e.checkedNodes.length > 0) {
			var nodes = e.checkedNodes;
			for (var i = nodes.length - 1; i >= 0; i--) {
				checkedNodes[i] = {
					key: nodes[i].key,
					id: nodes[i].key,
					code: nodes[i].props.code,
					name: nodes[i].props.title,
					extdata: nodes[i].props.extdata
				};
			};
		}
		this.setState({
			checkedKeys: info,
			checkedNodes: checkedNodes
		});
		this.doHandleDatas(checkedNodes, null, false);
	},
	onOkHandle: function onOkHandle(e) {
		this.doHandleDatas(null, null, true);
	},
	changeTags: function changeTags(key) {
		this.setState({
			loadOften: !this.state.loadOften
		});
	},
	onCancelHandle: function onCancelHandle(e) {
		if (this.props.onCancel) {
			this.props.onCancel(e);
		}
	},
	onClean: function onClean() {
		this.setState({
			selectedNode: null,
			selectedNodeKey: null,
			checkedNodes: null,
			checkedKeys: null
		});
	}
	// 处理onSelect、onNodeDblClick
	, _onSelectSingleNode: function _onSelectSingleNode(info, e, ifHandleOK) {
		if (info) {
			var nodeInfo = info;
			var nodeProps = {};
			if (info instanceof Array && info.length > 0) {
				nodeInfo = info[0];
				nodeProps = e.selectedNodes[0].props;
			} else {
				nodeProps = e.node.props;
			}
			var selectedNode = {
				key: nodeInfo,
				id: nodeInfo,
				code: nodeProps.code,
				name: nodeProps.title,
				extdata: nodeProps.extdata
			};
			this.setState({
				selectedNodeKey: nodeInfo,
				selectedNode: selectedNode
			});
			this.doHandleDatas(null, selectedNode, ifHandleOK);
		}
	},
	onSelectNode: function onSelectNode(info, e) {
		this._onSelectSingleNode(info, e, false);
	},
	onNodeDblClick: function onNodeDblClick(info, e) {
		this._onSelectSingleNode(info, e, true);
	}
	//移除数组中属性id == key的元素 
	, removeRow: function removeRow(arr, key) {
		var j = 0;
		for (var i = arr.length - 1; i >= 0; i--) {
			if (arr[i][this.props.idField] === key) {
				arr.splice(i, 1);
			}
		};
		return arr;
	},
	onTagClose: function onTagClose(key) {
		var checkedNodes = this.state.checkedNodes;
		var checkedKeys = this.state.checkedKeys;
		checkedKeys.indexOf(key) > -1 ? checkedKeys.splice(checkedKeys.indexOf(key), 1) : null;
		this.removeRow(checkedNodes, key);
		this.setState({
			checkedNodes: checkedNodes,
			checkedKeys: checkedKeys
		});
		this.doHandleDatas(checkedNodes, null, false);
	}
	//处理树数据的子数据
	,
	_getTreeChildren: function _getTreeChildren(childrenData) {
		var _this = this;

		var data = [];
		if (childrenData && childrenData.length > 0) {
			childrenData.map(function (elem, eindex) {
				var node = _.cloneDeep(elem);
				node.key = elem.id;
				if (elem.children && elem.children.length > 0) {
					node.children = _this._getTreeChildren(elem.children);
				} else {
					node.isLeaf = true;
				}
				data.push(node);
			});
		}
		return data;
	}
	//获取树结构的数据
	, _getTreeData: function _getTreeData() {
		var _this2 = this;

		var treeData = [];
		var nodes = this.props.refinfo.tree;
		if (nodes && nodes.length > 0) {
			nodes.map(function (elem, idx) {
				var node = _.cloneDeep(elem);
				node.key = elem.id;
				node.children = _this2._getTreeChildren(elem.children);
				treeData.push(node);
			});
		}
		return treeData;
	}
	//渲染左侧选项页
	, _renderTabs: function _renderTabs() {
		var that = this;
		var _props2 = this.props;
		var refname = _props2.refname;
		var multiselect = _props2.multiselect;
		//是否显示常用按钮

		var showOftenBtn = !this.state.selectedNodeKey && !this.state.checkedKeys;
		//获取树结构数据
		var treeData = this._getTreeData();
		//多选态启用checkbox
		var rowSelection = null;
		if (multiselect) {
			rowSelection = {
				onChange: this.onChangeRow,
				selectedRowKeys: this.state.checkedKeys
			};
		}
		// 多选时，树参照的footer为上下结构，留出多余20px的空间给按钮
		var contentH = this.props.multiselect ? this.props.contentH - 20 : this.props.contentH;
		//当有添加常用的按钮时，流出常用按钮的区域高度
		var treeH = this.props.often ? contentH - 52 : contentH;
		var oftenTab = null;
		if (this.props.often) {
			//读取常用数据
			var oftenData = formatOftenFromServer(this.props.refinfo.often);
			//定义常用表格列头
			var oftenColumns = [{ key: 'name', dataIndex: 'name', title: '我的常用' }, { key: 'operation', width: 85, title: _ReferConstants.REFER_DELETE_OFTEN,
				render: function render(text, record) {
					return React.createElement(YYButton, { icon: 'minus', onClick: that.delOften.bind(null, record), ghost: true });
				}
			}];

			oftenTab = React.createElement(
				YYTab,
				{ key: refname + "_often", tab: '常用', disabled: !this.props.often, className: 'yyui-refer-tab' },
				React.createElement(
					YYScrollbars,
					{ style: { height: contentH } },
					React.createElement(YYTable, { columns: oftenColumns, pagination: false, size: 'middle',
						dataSource: oftenData, rowSelection: rowSelection,
						onRowClick: multiselect ? noop : this.onRowClick })
				)
			);
		}

		var dataTab = React.createElement(
			YYTab,
			{ key: refname + "_data", tab: refname, className: 'yyui-refer-tab' },
			this.props.customheader,
			React.createElement(
				YYScrollbars,
				{ style: { height: treeH } },
				treeData && treeData.length > 0 ? React.createElement(YYTreeInRefer, {
					searchFilter: true,
					treeData: treeData,
					checkable: multiselect,
					checkedKeys: this.state.checkedKeys,
					selectedKeys: this.state.selectedNodeKey,
					checkStrictly: that.props.checkControl === false ? true : false,
					onCheckNodes: multiselect ? this.onCheckNodes : noop,
					onNodeDblClick: multiselect ? noop : this.onNodeDblClick,
					onSelectNode: this.onSelectNode }) : //多选模式下依然selectedKeys受控
				React.createElement(
					'div',
					{ className: 'yyui-refer-nodata' },
					'暂无数据'
				)
			),
			this.props.often ? React.createElement(
				'div',
				{ className: 'yyui-refer-addoften', style: { padding: 10, height: 52 } },
				React.createElement(
					YYButton,
					{ disabled: showOftenBtn, className: 'yyui-refer-button-ghost', ghost: true, onClick: this.addOften },
					_ReferConstants.REFER_ADD_OFTEN
				)
			) : null
		);
		if (oftenTab === null) {
			return React.createElement(
				YYTabs,
				{ defaultActiveKey: refname + "_data", onChange: this.changeTags },
				dataTab
			);
		} else {
			return React.createElement(
				YYTabs,
				{ defaultActiveKey: refname + "_data", onChange: this.changeTags },
				oftenTab,
				dataTab
			);
		}
	},
	render: function render() {
		var props = {};
		props.refname = this.props.refname;
		props.multiselect = this.props.multiselect;
		props.idField = this.props.idField;
		props.nameField = this.props.nameField;
		props.codeField = this.props.codeField;
		props.onOk = this.onOkHandle;
		props.onCancel = this.onCancelHandle;
		props.onClean = this.onClean;
		props.onTagClose = this.onTagClose;
		props.selectedDatas = this.state.checkedNodes;
		props.refinfokey = this.props.refinfokey;
		return React.createElement(
			'div',
			{ className: this.className() },
			this._renderTabs(),
			React.createElement(YYFootInRefer, _extends({}, props, { ifTreeFooter: true }))
		);
	}
});
module.exports = connect(mapStateToProps)(YYReferTree);