'use strict';

var _YYTreeInRefer = require('./YYTreeInRefer');

var _YYTreeInRefer2 = _interopRequireDefault(_YYTreeInRefer);

var _YYReferOperateDlg = require('./YYReferOperateDlg');

var _YYReferOperateDlg2 = _interopRequireDefault(_YYReferOperateDlg);

var _reactRedux = require('react-redux');

var _reference = require('./actions/reference');

var _ReferConstants = require('./constants/ReferConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var React = require('react');
var _ = require('lodash');
var YYForm = require('../formcontrols/form/YYForm');
var YYFormItem = require('../formcontrols/form/YYFormItem');
var ajax = require('../../utils/ajax');
var YYClass = require('../base/YYClass');
var Tabs = require('../tabs/YYTabs');
var TabPane = require('../tabs/YYTab');
var Tag = require('../tag/YYTag');
var Icon = require('../icon/YYIcon');
var YYButton = require('../button/YYButton');
var YYTable = require('../table/YYTable');
var Pagination = require('../paging/YYPagination');
var YYScrollbar = require('../scrollbar/YYScrollbar');
var Select = require('../formcontrols/select/YYSelect');
var YYFootInRefer = require('./YYFootInRefer');
require('./style/index.less');
var YYRow = require('../layout/YYRow');
var YYCol = require('../layout/YYCol');
var YYInputButton = require('../formcontrols/inputbutton/YYInputButton');
var YYMessage = require('../message/YYMessage');
var AuthToken = require("../../utils/AuthToken");

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('./utils/YYReferUtils');

var getColumns = _require.getColumns;
var ifInArray = _require.ifInArray;
var removeRow = _require.removeRow;
var getPagination = _require.getPagination;
var getDefaultRows = _require.getDefaultRows;
var getDefaultKeys = _require.getDefaultKeys;
var getHeaders = _require.getHeaders;
var formatOftenToServer = _require.formatOftenToServer;
var formatOftenFromServer = _require.formatOftenFromServer;
var getOftenKeys = _require.getOftenKeys;
// const pageSize = 5;

var store = window.localStorage;
var tableKey = null;
var treeNodeKey = null; //key：store中存储的之前select的树节点
var selectedTreeKey = null; //值：选择的树节点id。初始值从store中获取， 根据treeNodeKey key值获取
var storeKeyOfTree = null; // key: treeURL
var charCode = String.fromCharCode(2);
var relyfield = null;
var ifSelectDefault = true;

function noop() {};

var mapStateToProps = function mapStateToProps(state) {
	return {
		refinfo: state.refinfo
	};
};
//定义META
var uiMeta = {
	name: 'refer-treegrid',
	fields: [
	//field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
	field('refinfokey', null, PropTypes.string, true, '参照key'), field('refname', null, PropTypes.string, true, '参照名称'), field('dataurl', null, PropTypes.string, true, '查询url'), field('operateurl', null, PropTypes.string, true, '操作url'), field('treerelyurl', null, PropTypes.string, true, '树参照url'), field('gridrelyurl', null, PropTypes.string, true, '表参照url'), field('initialValue', null, PropTypes.oneOfType([PropTypes.object, PropTypes.Array]), false, '默认初始值'), field('relyfield', null, PropTypes.array, true, '参照字段'), field('orderfield', null, PropTypes.string, true, '排序字段'), field('often', null, PropTypes.bool, true, '是否显示常用'), field('multiselect', null, PropTypes.bool, true, '是否支持多选'), field('querystr', null, PropTypes.string, true, '查询条件(过期)'), field('condition', null, PropTypes.oneOfType([PropTypes.func, PropTypes.object]), true, '自定义查询条件'), field('onOk', null, PropTypes.func, true, '确认操作回调函数'), field('onCancel', null, PropTypes.func, true, '取消操作回调函数'), field('customheader', null, PropTypes.element, false, '自定义header'), field('contentH', null, PropTypes.number, true, '内容区域的高度'), field('gridheaders', null, PropTypes.array, false, '表头信息'), field('treeValue', null, PropTypes.string, false, '树表参照中，树默认初始值节点id'), field('multiTreeValue', null, PropTypes.Array, false, '树表参照(树切换场景)中，树默认初始值节点ids')]
};
var YYReferTreeGrid = YYClass.create({
	uiMeta: uiMeta,
	getInitialState: function getInitialState() {
		return {
			current: 1,
			pageSize: 10,
			refid: null,
			name: null,
			loadOften: false,
			selectedNode: null,
			selectedNodeKey: null,
			selectedRow: this.props.multiselect ? null : getDefaultRows(this.props.initialValue, this.props.idField, this.props.codeField, this.props.nameField, this.props.multiselect), //单选row
			selectedRowKey: this.props.multiselect ? null : getDefaultKeys(this.props.initialValue, this.props.multiselect), //单选key,多选模式下不获取
			selectedRows: this.props.multiselect ? getDefaultRows(this.props.initialValue, this.props.idField, this.props.codeField, this.props.nameField, this.props.multiselect) : null, //多选rows
			selectedRowKeys: this.props.multiselect ? getDefaultKeys(this.props.initialValue, this.props.multiselect) : null, //多选keys, 单选模式下不获取
			searchVal: null,
			loading: false, //loading表
			loadingTree: false, //loadingtree
			showOperateDialog: false, //是否打开operate dialog
			operateurl: null };
	},
	componentWillMount: function componentWillMount() {
		var _props = this.props;
		var refinfokey = _props.refinfokey;
		var refinfo = _props.refinfo;

		if (store) {
			var userCode = AuthToken.getUserCode();
			//常用数据key
			tableKey = _ReferConstants.REFER_TABLEKEY + userCode + "-" + refinfokey;
			treeNodeKey = _ReferConstants.REFER_TREEGRID_SELECTED_NODEKEY + userCode + '-' + refinfokey;
			selectedTreeKey = store[treeNodeKey] ? store[treeNodeKey] : null;
			//树选择urlkey
			storeKeyOfTree = _ReferConstants.REFER_SELECTED_TREEURL + userCode + "-" + refinfokey;
		}
	},

	// 根据当前选择的tree，返回对应的relyfield，以查询表数据时用
	_getRelyField: function _getRelyField(treerelyselect, currentTree) {
		var relyfield = this.props.relyfield;
		for (var i = 0; i < treerelyselect.length; i++) {
			if (treerelyselect[i].treerelyurl === currentTree) {
				return treerelyselect[i].relyfield;
			}
		}
		// 避免控制，当字表中没有注册relyfield，仍然采用主表中的relyfield
		return relyfield;
	},
	componentDidMount: function componentDidMount() {
		var _props2 = this.props;
		var treerelyurl = _props2.treerelyurl;
		var treerelyselect = _props2.treerelyselect;

		var firstTree = treerelyurl;
		relyfield = this.props.relyfield;
		if (treerelyselect && treerelyselect instanceof Array && treerelyselect.length > 0) {
			firstTree = store[storeKeyOfTree] ? JSON.parse(store[storeKeyOfTree]) : treerelyselect[0].treerelyurl;
			// 树切换情况下， relyfield采用字表中的
			relyfield = this._getRelyField(treerelyselect, firstTree);
		}
		this._doQueryTree(firstTree);
	},

	// 根据默认的树url得出tree的id
	_getTreeId: function _getTreeId(url, trees) {
		for (var i = 0; i < trees.length; i++) {
			if (trees[i]['treerelyurl'] === url) {
				return trees[i]['id'];
			}
		}
		return trees[0]['id'];
	},

	// 根据treeid， 从默认值中获取对应的默认节点值
	_getSelectedTreeKey: function _getSelectedTreeKey(treeId, treeValues) {
		for (var i = 0; i < treeValues.length; i++) {
			if (treeValues[i]['treeId'] === treeId) {
				return treeValues[i]['nodeValue'];
			}
		}
		return null;
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		if (nextProps && nextProps.refinfo) {
			var refinfo = nextProps.refinfo;

			if (nextProps.refinfo.doReload) {
				//重新查询数据  与搜索的功能保持一致
				var _props3 = this.props;
				var dataurl = _props3.dataurl;
				var querystr = _props3.querystr;
				var condition = _props3.condition;
				var orderfield = _props3.orderfield;
				var refid = _props3.refid;
				var dispatch = _props3.dispatch;

				var query = this.getQuery(querystr, condition, relyfield, null, orderfield, 1);
				this.setState({ loading: true });
				dispatch((0, _reference.getGridData)(dataurl, query, _ReferConstants.REFER_TYPE_TREEGRID));
				//重置搜索条件和页码
				this.refs.searchGrid.state.value = '';
				this.setState({
					current: 1
				});
			}
			if (refinfo.showMsg) {
				var showMsg = refinfo.showMsg;
				if (showMsg.success) {
					YYMessage.success(showMsg.success);
				} else if (showMsg.error) {
					YYMessage.error(showMsg.error);
				}
			}
			if (ifSelectDefault) {
				// 初始化后，默认选中之前的值。否则，走以下场景
				if (selectedTreeKey === null || selectedTreeKey === '' || selectedTreeKey === 'null') {
					var multiTreeValue = nextProps.multiTreeValue;
					var treerelyselect = nextProps.treerelyselect;
					if (multiTreeValue && multiTreeValue instanceof Array && multiTreeValue.length > 0 && treerelyselect && treerelyselect instanceof Array && treerelyselect.length > 0) {
						//树切换场景
						var choosedTreeId = store[storeKeyOfTree] ? this._getTreeId(JSON.parse(store[storeKeyOfTree]), treerelyselect) : treerelyselect[0]['id'];
						selectedTreeKey = this._getSelectedTreeKey(choosedTreeId, multiTreeValue);
					}

					if (selectedTreeKey === null || selectedTreeKey === '' || selectedTreeKey === 'null') {
						if (this.props.treeValue) {
							// 普通树表场景
							selectedTreeKey = this.props.treeValue;
						} else if (refinfo) {
							// 无树默认值场景
							var nodes = refinfo.tree;
							if (nodes && nodes[0]) {
								if (nodes[0].children && nodes[0].children[0]) {
									// 选择第一个根节点的第一个子节点
									selectedTreeKey = nodes[0].children[0].id;
								} else {
									// 当没有子节点时，默认选中根节点(如：切换组织机构的场景)
									selectedTreeKey = nodes[0].id;
								}
							}
						}
					}
				}
				this.setState({
					selectedNodeKey: selectedTreeKey ? selectedTreeKey : refinfo.treegrid
				});
			}
			if (refinfo) {
				this.setState({
					loading: false,
					loadingTree: false
				});
			}
		}
	},
	componentWillUnmount: function componentWillUnmount() {
		// 存储，以下次打开时默认选中
		store.setItem(treeNodeKey, selectedTreeKey);
	},

	//组件内公共方法，执行查询树数据
	_doQueryTree: function _doQueryTree(treeUrl) {
		var _props4 = this.props;
		var dataurl = _props4.dataurl;
		var treerelyurl = _props4.treerelyurl;
		var treerelyselect = _props4.treerelyselect;
		var querystr = _props4.querystr;
		var condition = _props4.condition;
		var orderfield = _props4.orderfield;
		var dispatch = _props4.dispatch;

		var query = this.getQuery(querystr, condition, null, null, orderfield, 1);
		var queryGrid = this.getQuery(querystr, condition, relyfield, null, orderfield, 1);
		//loadingTree时同时loading 表
		ifSelectDefault = true;
		this.setState({
			loading: true,
			loadingTree: true
		});
		// 延迟，解决tab错位的bug
		setTimeout(function () {
			// 查询树后根据默认选择的树节点查询grid数据
			dispatch((0, _reference.getTreeData)(treeUrl, query, _ReferConstants.REFER_TYPE_TREEGRID, { 'dataurl': dataurl, 'querydata': queryGrid, 'relyfield': relyfield, 'nodeKey': selectedTreeKey }));
		}, 500);
	},
	changeTags: function changeTags(key) {
		this.setState({
			loadOften: !this.state.loadOften
		});
	},

	// 保存/删除 常用数据到服务器. oper=0: 手动， oper=1：自动
	_saveOften: function _saveOften(records, oper, isDelete) {
		var dispatch = this.props.dispatch;
		var userId = AuthToken.getUserId();
		var refinfokey = this.props.refinfokey;
		var idField = this.props.idField;
		var serverUrl = this.props.serverUrl;
		if (isDelete === true) {
			var ids = records[idField]; // 当前删除只支持单个删除，后续支持批量删除后在此扩展
			dispatch((0, _reference.deleteOften)(serverUrl, { userId: userId, refinfokey: refinfokey, ids: ids }));
		} else {
			var dataset = formatOftenToServer(records, idField);
			if (dataset && dataset.length > 0) {
				dispatch((0, _reference.addOften)(serverUrl, { userId: userId, refinfokey: refinfokey, oper: oper, dataset: dataset }));
			}
		}
	},

	//添加常用
	addOften: function addOften(record, e) {
		e.stopPropagation();
		if (store && record) {
			var nodeKey = record[this.props.idField];
			this._saveOften(record, 0);
		}
		this.setState({
			loadOften: !this.state.loadOften
		});
	},

	//删除常用
	delOften: function delOften(record, e) {
		e.stopPropagation();
		var nodeKey = record[this.props.idField];
		var isDelete = true; // 便于理解和维护。此处用于标识删除操作
		this._saveOften(record, null, isDelete);

		this.setState({
			loadOften: !this.state.loadOften
		});
	},

	//确认
	btn_ok: function btn_ok(e) {
		this.doHandleDatas(null, null, true);
	},

	//取消
	btn_cancel: function btn_cancel(e) {
		if (this.props.onCancel) {
			this.props.onCancel(e);
		}
	},
	onClean: function onClean() {
		this.setState({
			selectedRow: null,
			selectedRowKey: null,
			selectedRows: null,
			selectedRowKeys: null

		});
	},

	// 处理选择的树节点变化后的逻辑
	_changeSelectNode: function _changeSelectNode(node) {
		ifSelectDefault = false;
		this.setState({
			current: 1,
			selectedNodeKey: selectedTreeKey,
			selectedNode: node
		});
		var _props5 = this.props;
		var dataurl = _props5.dataurl;
		var querystr = _props5.querystr;
		var condition = _props5.condition;
		var orderfield = _props5.orderfield;
		var refid = _props5.refid;
		var dispatch = _props5.dispatch;

		var query = this.getQuery(querystr, condition, relyfield, null, orderfield, 1);
		this.setState({ loading: true });
		dispatch((0, _reference.getGridData)(dataurl, query, _ReferConstants.REFER_TYPE_TREEGRID));
		if (this.props.onNodeSelect && typeof this.props.onNodeSelect === 'function') {
			this.props.onNodeSelect(node);
		}
	},

	//点击树节点
	onSelectNode: function onSelectNode(info, e) {
		var treeId = null;
		if (info.length > 0) {
			treeId = info[0];
			selectedTreeKey = treeId;
			var curNode = {
				id: e.selectedNodes[0].key,
				code: e.selectedNodes[0].props.code,
				value: e.selectedNodes[0].props.title,
				extdata: e.selectedNodes[0].props.extdata
			};
			this._changeSelectNode(curNode);
		} else {
			// 取消选中之前选中后的节点后， 默认勾选第一个子节点或者根节点
			var curNode = {};
			var nodes = this.props.refinfo.tree;
			if (nodes && nodes[0]) {
				if (nodes[0].children && nodes[0].children[0]) {
					// 选择第一个根节点的第一个子节点
					selectedTreeKey = nodes[0].children[0].id;
					curNode = nodes[0].children[0];
				} else {
					// 当没有子节点时，默认选中根节点(如：切换组织机构的场景)
					selectedTreeKey = nodes[0].id;
					curNode = nodes[0];
				}
				this._changeSelectNode(curNode);
			}
		}
	},

	//设置查询条件
	getQuery: function getQuery(querystr, condition, relyfield, searchText, orderfield, pageNumber, pageSize) {
		var query = null;
		var relystr = null;
		var relyid = selectedTreeKey;
		if (relyid && relyfield) relystr = " " + relyfield + "=" + relyid;
		if (querystr) query = querystr;
		if (query) {
			if (relystr) query += " and " + relystr;
		} else {
			query = relystr;
		}
		var queryObj = {};
		queryObj.pageNumber = pageNumber;
		if (pageNumber) {
			queryObj.pageSize = pageSize ? pageSize : YYTable.getDefaultPageSize(tableKey);
		}
		if (query && query.length > 0) queryObj.relyCondition = query;
		if (orderfield && orderfield.length > 0) queryObj.orderCondition = orderfield;
		if (searchText && searchText.length > 0) queryObj.searchText = searchText;
		var _condition = ajax.getParams(condition);
		if (!_.isEmpty(_condition) && _.isPlainObject(_condition)) {
			//转成JSON格式字符串
			queryObj.condition = JSON.stringify(_condition);
		}
		return queryObj;
	},

	//处理树数据的子数据
	getChildren: function getChildren(childrenData) {
		var _this = this;

		var data = [];
		if (childrenData && childrenData.length > 0) {
			childrenData.map(function (elem, eindex) {
				var node = _.cloneDeep(elem);
				node.key = elem.id;
				if (elem.children && elem.children.length > 0) {
					node.children = _this.getChildren(elem.children);
				} else {
					node.isLeaf = true;
				}
				data.push(node);
			});
		}
		return data;
	},

	//页码更改
	onChangePage: function onChangePage(current) {
		var value = this.refs.searchGrid.state.value;
		var _props6 = this.props;
		var dataurl = _props6.dataurl;
		var querystr = _props6.querystr;
		var condition = _props6.condition;
		var orderfield = _props6.orderfield;
		var refid = _props6.refid;
		var dispatch = _props6.dispatch;

		var query = this.getQuery(querystr, condition, relyfield, value, orderfield, current);
		this.setState({ loading: true });
		dispatch((0, _reference.getGridData)(dataurl, query, _ReferConstants.REFER_TYPE_TREEGRID));
		this.setState({
			current: current
		});
	},

	// 每页显示条数更改
	onChangePageSize: function onChangePageSize(current, pageSize) {
		var value = this.refs.searchGrid.state.value;
		var _props7 = this.props;
		var dataurl = _props7.dataurl;
		var querystr = _props7.querystr;
		var condition = _props7.condition;
		var orderfield = _props7.orderfield;
		var refid = _props7.refid;
		var dispatch = _props7.dispatch;

		var query = this.getQuery(querystr, condition, relyfield, value, orderfield, current, pageSize);
		this.setState({ loading: true });
		dispatch((0, _reference.getGridData)(dataurl, query, _ReferConstants.REFER_TYPE_TREEGRID));
		this.setState({
			current: current
		});
	},

	//搜索表
	onSearchGrid: function onSearchGrid(e) {
		var value = this.refs.searchGrid.state.value;
		if (this.state.loading) {
			return;
		} else {
			var _props8 = this.props;
			var dataurl = _props8.dataurl;
			var querystr = _props8.querystr;
			var orderfield = _props8.orderfield;
			var condition = _props8.condition;
			var refid = _props8.refid;
			var dispatch = _props8.dispatch;

			var query = this.getQuery(querystr, condition, relyfield, value, orderfield, 1);
			this.setState({ loading: true });
			dispatch((0, _reference.getGridData)(dataurl, query, _ReferConstants.REFER_TYPE_TREEGRID));
			this.setState({
				current: 1,
				searchVal: value
			});
		}
	},

	//公用方法
	doHandleDatas: function doHandleDatas(selectedRows, selectedRow, isHandleOk) {
		var multiselect = this.props.multiselect;

		var row = null;
		if (multiselect) {
			row = selectedRows ? selectedRows : this.state.selectedRows;
		} else {
			row = selectedRow ? selectedRow : this.state.selectedRow;
		}
		if (isHandleOk) {
			if (this.props.often) {
				this._saveOften(row, 1);
			}
			this.props.onOk(row);
		} else {
			this.props.onSelectedChanged(row);
		}
	},
	onChangeRow: function onChangeRow(keys, rows) {
		var selectedRows = this.state.selectedRows ? this.state.selectedRows : [];
		var selectedRowKeys = this.state.selectedRowKeys ? this.state.selectedRowKeys : [];
		if (rows) {
			for (var i = rows.length - 1; i >= 0; i--) {
				if (!ifInArray(selectedRowKeys, rows[i][this.props.idField])) {
					selectedRowKeys.push(rows[i][this.props.idField]);
					selectedRows.push(rows[i]);
				};
			}
		} else {
			selectedRows = null;
		}
		this.setState({
			selectedRows: selectedRows,
			selectedRowKeys: selectedRowKeys
		});
		this.doHandleDatas(selectedRows, null, false);
	},

	//勾选
	onSelectRow: function onSelectRow(record, selected, selectRows) {
		var selectedRows = this.state.selectedRows ? this.state.selectedRows : [];
		var selectedRowKeys = this.state.selectedRowKeys;
		if (!selected) {
			var key = record[this.props.idField];
			selectedRowKeys.indexOf(key) > -1 ? selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1) : null;
			selectedRows = removeRow(selectedRows, key, this.props.idField);
			this.setState({
				selectedRows: selectedRows,
				selectedRowKeys: selectedRowKeys
			});
			this.doHandleDatas(selectedRows, null, false);
		}
	},

	//全勾选
	onSelectAllRow: function onSelectAllRow(selected, selectRows, changeRows) {
		var selectedRows = this.state.selectedRows ? this.state.selectedRows : [];
		var selectedRowKeys = this.state.selectedRowKeys;
		if (!selected) {
			for (var i = changeRows.length - 1; i >= 0; i--) {
				var key = changeRows[i][this.props.idField];
				selectedRowKeys.indexOf(key) > -1 ? selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1) : null;
				selectedRows = removeRow(selectedRows, key, this.props.idField);
			};
			this.setState({
				selectedRows: selectedRows,
				selectedRowKeys: selectedRowKeys
			});
			this.doHandleDatas(selectedRows, null, false);
		}
	},

	//选中行 单选时
	onRowClick: function onRowClick(record, index) {
		this.setState({
			selectedRow: record,
			selectedRowKey: record[this.props.idField]
		});
		this.doHandleDatas(null, record, false);
	},

	// 选中行 双击时 单选时
	onRowDoubleClick: function onRowDoubleClick(record, index) {
		this.doHandleDatas(null, record, true);
	},

	//关闭标签
	onTagClose: function onTagClose(key) {
		var selectedRows = this.state.selectedRows;
		var selectedRowKeys = this.state.selectedRowKeys;
		selectedRowKeys.indexOf(key) > -1 ? selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1) : null;
		removeRow(selectedRows, key, this.props.idField);
		this.setState({
			selectedRows: selectedRows,
			selectedRowKeys: selectedRowKeys
		});
		this.doHandleDatas(selectedRows, null, false);
	},

	//点击带链接字段
	onClickOperate: function onClickOperate(record, e) {
		if (record) {
			var url = null;
			var operateurl = this.props.operateurl;
			if (operateurl) {
				if (operateurl.indexOf('{') > 0 && operateurl.indexOf('}') > 0) {
					// 当注册的url有占位符{}，则按照注册的参数组织url, relyfield、selectedNodeId是约定名称
					record[_ReferConstants.REFER_PARAM_RELYFIELD] = relyfield; // relyfield
					record[_ReferConstants.REFER_PARAM_SELECTEDNODEID] = selectedTreeKey; // 选择的树节点id
					url = ajax.fillUrlParams(operateurl, record);
				} else {
					// 当注册的url没有占位符，默认参数是当前数据的id
					url = operateurl + record[this.props.idField];
				}
				this.setState({
					showOperateDialog: true,
					operateurl: url
				});
			}
		}
	},

	//关闭点击链接打开的dialog回调
	onCloseOperate: function onCloseOperate() {
		this.setState({
			showOperateDialog: false
		});
	},

	// 切换树 树组件选择下拉框onchange回调
	onTreeChanged: function onTreeChanged(newTree) {
		relyfield = this._getRelyField(this.props.treerelyselect, newTree);
		ifSelectDefault = true; // 切换后默认选中第一个树节点
		// TODO 此处如果有对应默认值，则切换到对应默认值，否则清空, 以切换后默认选中第一个根节点
		selectedTreeKey = null;
		store.setItem(storeKeyOfTree, JSON.stringify(newTree));
		this._doQueryTree(newTree);
	},

	//渲染tabs内容
	_renderTabs: function _renderTabs() {
		var _this2 = this;

		var that = this;
		var _props9 = this.props;
		var refinfo = _props9.refinfo;
		var refname = _props9.refname;
		var multiselect = _props9.multiselect;

		var grid = refinfo.treegrid;
		var header = getHeaders(that.props.gridheaders, grid);

		var nameField = this.props.nameField;
		var idField = this.props.idField;

		var griddata = grid ? grid.data : null;
		var totalsize = griddata ? griddata.count : 0; //总数量
		var content = griddata ? griddata.content : null;
		var data = [];
		if (content && content.length > 0) {
			data = content;
			data.map(function (elem, eindex) {
				elem.key = elem[_this2.props.idField];
			});
		}

		var treeData = [];
		var nodes = refinfo.tree;
		if (nodes && nodes.length > 0) {
			nodes.map(function (elem, eindex) {
				var node = _.cloneDeep(elem);
				node.key = elem.id;
				node.children = _this2.getChildren(elem.children);
				treeData.push(node);
			});
		}

		var columnsInStore = getColumns(header, store, this.props.nameField, this.props.operatefield, this.props.operateurl, this.onClickOperate);
		var columns = columnsInStore.columns;
		var oftenColumns = columnsInStore.oftenColumns;
		var totalWidth = columnsInStore.totalWidth;

		var selectedNode = this.state.selectedNode;
		var rowSelection = null;
		if (multiselect) {
			totalWidth += _ReferConstants.REFER_CHECKBOX_WIDTH;
			rowSelection = {
				onChange: this.onChangeRow,
				onSelect: this.onSelectRow,
				onSelectAll: this.onSelectAllRow,
				selectedRowKeys: this.state.selectedRowKeys
			};
		}

		var oftenTab = null;
		if (this.props.often) {
			//读取常用数据
			var oftenData = formatOftenFromServer(this.props.refinfo.often);
			var oftenkeys = getOftenKeys(this.props.refinfo.often);
			columns.push({
				key: 'operation',
				title: _ReferConstants.REFER_ADD_OFTEN,
				width: _ReferConstants.REFER_OPERATE_COLUMN_WIDTH,
				render: function render(text, record) {
					return React.createElement(
						'div',
						null,
						ifInArray(oftenkeys, record[idField]) ? React.createElement(YYButton, { icon: 'minus', ghost: true, onClick: _this2.delOften.bind(null, record) }) : React.createElement(YYButton, { icon: 'plus', ghost: true, onClick: _this2.addOften.bind(null, record) })
					);
				}
			});
			oftenColumns.push({
				key: 'operationOften',
				title: _ReferConstants.REFER_DELETE_OFTEN,
				width: _ReferConstants.REFER_OPERATE_COLUMN_WIDTH,
				render: function render(text, record) {
					return React.createElement(YYButton, { icon: 'minus', ghost: true, onClick: _this2.delOften.bind(null, record) });
				}
			});

			totalWidth += _ReferConstants.REFER_OPERATE_COLUMN_WIDTH;
			oftenTab = React.createElement(
				TabPane,
				{ key: '1', tab: '常用', disabled: !this.props.often, className: 'yyui-refer-tab' },
				React.createElement(YYTable, { columns: oftenColumns,
					style: { marginTop: 5 },
					scroll: { x: totalWidth, y: this.props.contentH },
					rowKey: that.props.idField,
					dataSource: oftenData,
					pagination: false,
					rowSelection: rowSelection,
					rowActiveKey: that.state.selectedRowKey,
					onRowDoubleClick: multiselect ? noop : this.onRowDoubleClick,
					onRowClick: multiselect ? noop : this.onRowClick })
			);
		}
		var gridTableH = this.props.contentH - 28 - 45 - 10 - 10; //28是表格上方搜索框的高度、45是分页的高度，10是marginTop、marginBottom
		var labelBeforSearch = selectedNode ? selectedNode.value : '请选择左侧数据';
		labelBeforSearch += ': ';
		// 树表中的分页组件，当dialog的宽度低于1000时，设置为大小small， 否则走参照通用大小。
		// 不以分辨率来判断，是因为有在高分辨率下，开发者自定义dialog宽度过小的可能。
		var paginationSize = this.props.dialogWidth < 950 ? 'small' : null;
		var pagination = getPagination(totalsize, that.state.current, that.onChangePage, that.onChangePageSize, paginationSize);
		var dataTab = React.createElement(
			TabPane,
			{ tab: refname, key: '2', className: 'yyui-refer-tab' },
			this.props.customheader,
			React.createElement(
				YYRow,
				{ style: { marginBottom: 10 } },
				React.createElement(
					YYCol,
					{ span: 6, style: { paddingRight: 15, marginTop: -5 } },
					React.createElement(
						YYScrollbar,
						{ style: { height: this.props.contentH - 10 } },
						React.createElement(_YYTreeInRefer2.default, {
							searchFilter: true,
							treeData: treeData,
							loading: that.state.loadingTree,
							onTreeChanged: that.onTreeChanged,
							treerelyselect: that.props.treerelyselect,
							storeKeyOfTree: storeKeyOfTree,
							selectedKeys: that.state.selectedNodeKey,
							onSelectNode: that.onSelectNode })
					)
				),
				React.createElement(
					YYCol,
					{ span: 18, style: { paddingLeft: 20, borderLeftColor: '#e1e1e1', borderLeftWidth: 1, borderLeftStyle: 'solid' } },
					React.createElement(
						'div',
						{ className: 'yyui-refer-treegrid-search' },
						labelBeforSearch,
						React.createElement(YYInputButton, { ref: 'searchGrid', placeholder: "请输入搜索的" + refname, buttonIcon: 'search', onPressEnter: this.onSearchGrid, buttonClick: this.onSearchGrid })
					),
					React.createElement(YYTable, {
						style: { marginTop: 5, width: '100%' },
						columns: columns,
						rowKey: that.props.idField,
						cookieKey: tableKey,
						dataSource: data,
						loading: this.state.loading,
						pagination: pagination,
						scroll: { x: totalWidth, y: gridTableH - _ReferConstants.REFER_TABLE_PAGINATION_HEIGHT },
						rowActiveKey: that.state.selectedRowKey,
						onRowDoubleClick: multiselect ? noop : this.onRowDoubleClick,
						onRowClick: multiselect ? noop : this.onRowClick,
						rowSelection: rowSelection })
				)
			)
		);
		if (oftenTab === null) {
			return React.createElement(
				Tabs,
				{ defaultActiveKey: '2', onChange: this.changeTags },
				dataTab
			);
		} else {
			return React.createElement(
				Tabs,
				{ defaultActiveKey: '2', onChange: this.changeTags },
				oftenTab,
				dataTab
			);
		}
	},
	render: function render() {
		var that = this;
		var props = {};
		props.refname = this.props.refname;
		props.multiselect = this.props.multiselect;
		props.idField = this.props.idField;
		props.nameField = this.props.nameField;
		props.codeField = this.props.codeField;
		props.onOk = this.btn_ok;
		props.onCancel = this.btn_cancel;
		props.onClean = this.onClean;
		props.onTagClose = this.onTagClose;
		props.selectedDatas = this.state.selectedRows;
		props.refinfokey = this.props.refinfokey;
		return React.createElement(
			'div',
			{ className: this.className() },
			this._renderTabs(),
			React.createElement(_YYReferOperateDlg2.default, { show: that.state.showOperateDialog, operateurl: that.state.operateurl, onCancel: that.onCloseOperate }),
			React.createElement(YYFootInRefer, props)
		);
	}
});

module.exports = (0, _reactRedux.connect)(mapStateToProps)(YYReferTreeGrid);