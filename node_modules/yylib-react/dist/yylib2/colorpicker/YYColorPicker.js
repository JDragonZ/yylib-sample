'use strict';

/**
 * Created by wuhao on 16/7/21.
 */

var React = require('react');

var _require = require('react-dom');

var findDOMNode = _require.findDOMNode;

var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYToolbar = require('../toolbar/YYToolbar');
var YYButton = require('../button/YYButton');
var ColorPicker = require('rc-color-picker');
require('rc-color-picker/assets/index.css');
require('./style/index.less');
function noop() {}
var uiMeta = {
    name: 'colorpicker',
    fields: [field('animation', 'slide-up', PropTypes.string, false, '打开面板的动画'), field('transitionName', '', PropTypes.number, false, '动画类名'), field('getCalendarContainer', function () {
        return document.body;
    }, PropTypes.func, false, '组件父容器'), field('align', {}, PropTypes.object, false, '组件放置参数'), field('alpha', 100, PropTypes.number, false, '初始透明度'), field('defaultAlpha', 100, PropTypes.number, false, '初始默认透明度'), field('color', '#36c', PropTypes.string, false, '初始颜色'), field('defaultColor', '#36c', PropTypes.string, false, '初始默认颜色'), field('onChange', noop, PropTypes.func, false, '颜色改变时的回调'), field('onOpen', noop, PropTypes.func, false, '取色面板打开时的回调'), field('onClose', noop, PropTypes.func, false, '取色面板关闭时的回调'), field('placement', 'topLeft', PropTypes.oneOf(['topLeft', 'topRight', 'bottomLeft', 'bottomRight']), false, '相对触发元素的位置'), field('mode', 'RGB', PropTypes.oneOf(['RGB', 'HSB', 'HSL']), false, '颜色显示模式')]
};
var YYColorPicker = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var value = this.props.value;
        return {
            isShow: false,
            defaultValue: value,
            value: value
        };
    },
    statics: {
        Panel: ColorPicker.Panel
    },
    showPanel: function showPanel() {
        this.setState({
            isShow: !this.state.isShow
        });
    },
    onChange: function onChange(obj) {
        this.setState({
            defaultValue: obj.color
        });
    },
    _clickOk: function _clickOk() {
        var defaultValue = this.state.defaultValue;
        this.setState({
            value: defaultValue,
            isShow: false
        });
        if (typeof this.props.onChange == 'function') {
            this.props.onChange(defaultValue);
        }
    },
    componentDidMount: function componentDidMount() {
        this._addEvent();
    },
    _addEvent: function _addEvent() {
        document.addEventListener('mousedown', this._onDocumentClick);
    },
    componentWillUnmount: function componentWillUnmount() {
        document.removeEventListener('mousedown', this._onDocumentClick);
    },
    _onDocumentClick: function _onDocumentClick(e) {
        var isShow = this.state.isShow;
        var target = e.target;
        if (isShow) {
            var colorPanel = document.querySelector('.color-panel');
            var trigger = document.querySelector('.colortrigger');
            if (target != trigger && !colorPanel.contains(target)) {
                this.setState({
                    isShow: false
                });
            }
        }
    },
    _clickCancel: function _clickCancel() {
        this.setState({
            isShow: false
        });
    },
    _clickReset: function _clickReset() {
        this.setState({
            value: this.props.value
        });
    },
    getColorPanel: function getColorPanel() {
        var Panel = this.constructor.Panel;
        var value = this.state.value;
        return React.createElement(
            'div',
            { className: 'color-panel' },
            React.createElement(Panel, { defaultColor: value, onChange: this.onChange }),
            React.createElement(
                YYToolbar,
                null,
                React.createElement(
                    YYButton,
                    { type: 'warning', ghost: true, onClick: this._clickReset },
                    '清除'
                ),
                React.createElement(
                    YYButton,
                    { type: 'primary', ghost: true, onClick: this._clickCancel },
                    '取消'
                ),
                React.createElement(
                    YYButton,
                    { type: 'primary', onClick: this._clickOk },
                    '确定'
                )
            )
        );
    },
    render: function render() {
        var isShow = this.state.isShow;
        var Panel = isShow ? this.getColorPanel() : null;
        return React.createElement(
            'div',
            { className: this.className() },
            React.createElement('span', { onClick: this.showPanel, className: 'colortrigger', style: { backgroundColor: this.state.value } }),
            Panel
        );
    }
});
module.exports = YYColorPicker;