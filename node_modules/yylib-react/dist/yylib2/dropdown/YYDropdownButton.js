'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * 下拉菜单组件按钮组件
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd');

var Dropdown = _require.Dropdown;
var Menu = _require.Menu;

var DropdownButton = Dropdown.Button;
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'dropdownbutton',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('type', '', PropTypes.oneOf(['primary', 'ghost', 'dashed', '']), false, '设置按钮类型，可选值为 primary ghost 或者不设'), field('onClick', null, PropTypes.func, false, '点击左侧按钮的回调'), field('trigger', 'hover', PropTypes.oneOf(['click', 'hover']), false, '触发下拉的行为'), field('overlay', null, PropTypes.instanceOf(Menu), false, '菜单'), field('visible', null, PropTypes.bool, false, '菜单是否显示'), field('onVisibleChange', null, PropTypes.func, false, '菜单显示状态改变时调用，参数为 { visible }')]
};
var YYDropdownButton = YYClass.create({
    uiMeta: uiMeta,
    render: function render() {
        return React.createElement(
            DropdownButton,
            _extends({}, this.props, { className: this.className() }),
            this.props.children
        );
    }
});
module.exports = YYDropdownButton;