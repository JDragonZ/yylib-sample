'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Created by wuhao on 16/9/9.
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var YYTree = require('../tree/YYTree');
var YYCol = require('../layout/YYCol');
var YYRow = require('../layout/YYRow');
var YYTreeNode = require('../tree/YYTreeNode');
var YYModal = require('../modal/YYModal');
var YYForm = require('../formcontrols/form/YYForm');
var YYFormItem = require('../formcontrols/form/YYFormItem');
var YYInput = require('../formcontrols/input/YYInput');
var YYButton = require('../button/YYButton');
var _ = require('lodash');
require('./style/index.less');
var configTreeConfig = [{
    key: 'visible',
    title: '显示的列'
}, {
    key: 'fixed-left',
    title: '冻结列(前)'
}, {
    key: 'fixed-right',
    title: '冻结列(后)'
}, {
    key: 'hidden',
    title: '隐藏的列'
}];

var getChildren = function getChildren(data) {
    if (data && data.length) {
        return data;
    } else {
        return [];
    }
};
var getLeafNode = function getLeafNode(data) {
    return {
        key: data.key, title: data.title, isLeaf: true
    };
};

var YYColumnConfig;
YYColumnConfig = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            visible: false
        };
    },
    getInitialState: function getInitialState() {
        return {
            configTree: []
        };
    },
    componentDidMount: function componentDidMount() {
        var newConfigTree = _.cloneDeep(configTreeConfig);
        var show = [],
            fixedLeft = [],
            fixedRight = [],
            hidden = [];
        this.props.data.forEach(function (item) {
            var leafNode = getLeafNode(item);
            if (item.isShow != false) {
                // 未指定为false
                show.push(leafNode);
            } else if (item.fixed == 'left') {
                fixedLeft.push(leafNode);
            } else if (item.fixed == 'right') {
                fixedRight.push(leafNode);
            } else if (item.isShow == false) {
                hidden.push(leafNode);
            }
        });

        newConfigTree.map(function (node) {
            if (node.key == 'visible') {
                node.children = show;
            } else if (node.key == 'fixed-left') {
                node.children = fixedLeft;
            } else if (node.key == 'fixed-right') {
                node.children = fixedRight;
            } else if (node.key == 'hidden') {
                node.children = hidden;
            }
            return node;
        });

        this.setState({ configTree: newConfigTree });
    },
    handlerOK: function handlerOK() {
        var columnShow = [],
            columnHide = [],
            columnAll = [];
        this.state.configTree.forEach(function (node) {
            if (node.key == 'visible' && node.children && node.children.length) {
                node.children.map(function (item) {
                    columnAll.push(item);
                });
            } else if (node.key == 'fixed-left' && node.children && node.children.length) {
                node.children.map(function (item) {
                    item.fixed = 'left';
                    columnAll.push(item);
                });
            } else if (node.key == 'fixed-right' && node.children && node.children.length) {
                node.children.map(function (item) {
                    item.fixed = 'right';
                    columnAll.push(item);
                });
            } else if (node.key == 'hidden' && node.children && node.children.length) {
                node.children.forEach(function (item) {
                    item.isShow = false;
                    columnAll.push(item);
                });
            }
        });

        console.log('columnAll', columnAll);

        // 执行回调
        if (_.isFunction(this.props.onOk)) {
            this.props.onOk(columnAll, columnShow, columnHide);
        }
    },
    handlerCancel: function handlerCancel() {
        if (_.isFunction(this.props.onCancel)) {
            this.props.onCancel();
        }
    },
    /**
     * 1.只能拖动子节点(isLeaf = true)
     * 2.不能拖到子节点(isLeaf = true)的节点中
     * @param info
     * @returns {*}
     */
    onDropValidate: function onDropValidate(info) {
        var node = info.node;
        var dragNode = info.dragNode;
        console.log('dragNode.nodrag', dragNode.props);
        if (!dragNode.props.isLeaf || node.props.isLeaf) {
            return false;
        } else {
            return true;
        }
    },
    // 拖动节点
    onDrop: function onDrop(info) {
        var _this = this;

        if (!this.onDropValidate(info)) {
            console.log('不允许的拖动');
            return false;
        } else {
            (function () {
                var dropKey = info.node.props.eventKey;
                var dragKey = info.dragNode.props.eventKey;
                // const dragNodesKeys = info.dragNodesKeys;
                var loop = function loop(data, key, callback) {
                    data.forEach(function (item, index, arr) {
                        if (item.key === key) {
                            return callback(item, index, arr);
                        }
                        if (item.children) {
                            return loop(item.children, key, callback);
                        }
                    });
                };
                var data = [].concat(_toConsumableArray(_this.state.configTree));
                var dragObj = void 0;
                loop(data, dragKey, function (item, index, arr) {
                    arr.splice(index, 1);
                    dragObj = item;
                });
                if (info.dropToGap) {
                    var ar = void 0;
                    var i = void 0;
                    loop(data, dropKey, function (item, index, arr) {
                        ar = arr;
                        i = index;
                    });
                    ar.splice(i, 0, dragObj);
                } else {
                    loop(data, dropKey, function (item) {
                        item.children = item.children || [];
                        // where to insert 示例添加到尾部，可以是随意位置
                        item.children.push(dragObj);
                    });
                }
                _this.setState({
                    configTree: data
                });
            })();
        }
    },

    onSelectTreeNode: function onSelectTreeNode(selectedKeys, e) {
        console.log(selectedKeys[0], e);
        // TODO 如果选择的冻结列 设置相应的属性在右边的form
    },
    render: function render() {
        var visible = this.props.visible;

        var loop = function loop(data) {
            return data.map(function (item) {
                if (item.children && item.children.length) {
                    return React.createElement(
                        YYTreeNode,
                        { key: item.key, isLeaf: item.isLeaf, title: item.title },
                        loop(item.children)
                    );
                }
                return React.createElement(YYTreeNode, { key: item.key, isLeaf: item.isLeaf, title: item.title });
            });
        };

        return React.createElement(
            YYModal,
            { className: '', width: 600, ref: 'modal', visible: visible, title: '配置', onOk: this.handlerOK,
                onCancel: this.handlerCancel },
            React.createElement(
                YYCol,
                { span: '12' },
                React.createElement(
                    YYTree,
                    { onSelect: this.onSelectTreeNode, loadData: this.onLoadData, draggable: true, onDrop: this.onDrop },
                    loop(this.state.configTree)
                )
            ),
            React.createElement(YYCol, null)
        );
    }
});
var formItemLayout = {
    labelCol: { span: 6 },
    wrapperCol: { span: 14 }
};
// var ColumnForm = YYClass.create({
//     render: function () {
//         return (
//         {/*<YYForm horizontal form={this.props.form}>
//                 <YYCol span="12">
//                     <YYFormItem required label="title" type="text" {...formItemLayout}>
//                         <YYInput/>
//                     </YYFormItem>
//                 </YYCol>
//                 <YYCol span="12">
//                     <YYFormItem required label="link" type="text" {...formItemLayout}>
//                         <YYInput/>
//                     </YYFormItem>
//                 </YYCol>
//                 <YYCol span="12">
//                     <YYFormItem required label="icon" type="text" {...formItemLayout}>
//                         <YYInput/>
//                     </YYFormItem>
//                 </YYCol>
//                 <YYCol span="12">
//                     <YYFormItem required label="file" type="text" {...formItemLayout}>
//                         <YYInput/>
//                     </YYFormItem>
//                 </YYCol>
//             </YYForm>*/}
//         )
//     }
// })

module.exports = YYColumnConfig;