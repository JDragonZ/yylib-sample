'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by Dio on 2016/5/11.
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var YYTable = require('./YYTable');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var _ = require('lodash');
var isArray = _.isArray;
var isFunction = _.isFunction;
var uiMetaFields = require('./uiMetaFields');
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'edittable',
    fields: uiMetaFields
};

var YYEditTable = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return { columns: this._renderColumns(this.props.columns), allRows: this.props.dataSource, selectedRowKeys: [] };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('dataSource' in nextProps) {
            this.setState({ allRows: nextProps.dataSource, selectedRowKeys: [] });
        }
        if ('columns' in nextProps) {
            this.setState({ columns: this._renderColumns(nextProps.columns) });
        }
    }
    //渲染列定义
    , _renderColumns: function _renderColumns(columns) {
        var columns = _.cloneDeep(columns);
        if (isArray(columns)) {
            for (var i = 0; i < columns.length; i++) {
                var col = columns[i];
                if (col.render) {
                    //为render绑定当前对象
                    col.render = col.render.bind(this);
                }
            }
        }
        return columns;
    }
    //pos-行插入的位置:first-首行、last-尾行
    , _addRow: function _addRow(pos, rowData, callback) {
        var rows = this.state.allRows;
        var newRow = { isEdit: true };
        newRow[this.props.rowKey] = "new_" + YYClass.uuid();
        _.assign(newRow, rowData);
        if (pos == 'first') {
            rows.unshift(newRow);
        } else {
            rows.push(newRow);
        }
        this.setState({ allRows: rows }, function () {
            if (isFunction(callback)) callback(rows);
        });
    }
    //将指定行启用为编辑
    , editRow: function editRow(rowIndex) {
        var rows = this.state.allRows;
        if (rows && rowIndex >= 0 && rowIndex < rows.length) {
            rows[rowIndex].isEdit = true;
            this.setState({ allRows: rows });
        }
    }
    //将指定行保存为非编辑
    , saveRow: function saveRow(rowIndex, rowData, callback) {
        var rows = this.state.allRows;
        if (rows && rowIndex >= 0 && rowIndex < rows.length) {
            rows[rowIndex] = rowData;
            rows[rowIndex].isEdit = false;
            this.setState({ allRows: rows }, function () {
                if (isFunction(callback)) callback(rows);
            });
        }
    }
    //将指定行对应单元格数据进行保存
    , saveCell: function saveCell(rowIndex, dataIndex, cellValue, callback) {
        var rows = this.state.allRows;
        if (rows && rowIndex >= 0 && rowIndex < rows.length) {
            rows[rowIndex][dataIndex] = cellValue;
            this.setState({ allRows: rows }, function () {
                if (isFunction(callback)) callback(rows);
            });
        }
    }
    //添加一行数据到首行
    , addRow: function addRow(rowData, callback) {
        this._addRow('first', rowData, callback);
    }
    //添加一行数据到尾行
    , addRowLast: function addRowLast(rowData, callback) {
        this._addRow('last', rowData, callback);
    }
    //删除指定的行数据
    , delRow: function delRow(rowKey, callback) {
        var rowKeys = [];
        if (_.isArray(rowKey)) {
            rowKeys = rowKey; //批量
        } else {
            rowKeys.push(rowKey); //单个
        }
        //获取当前所有行数据
        var rows = this.state.allRows;
        var _rowKey = this.props.rowKey;
        //移除需要删除的数据
        for (var i = 0; i < rowKeys.length; i++) {
            rows = _.filter(rows, function (rowData) {
                //console.log('rowData', rowData)
                return rowData[_rowKey] != rowKeys[i];
            });
        }
        //清理被勾选的key
        var selectedKeys = this.state.selectedRowKeys;
        if (selectedKeys) {
            for (var i = 0; i < rowKeys.length; i++) {
                selectedKeys = _.filter(selectedKeys, function (key) {
                    return key != rowKeys[i];
                });
            }
        }
        this.setState({ allRows: rows, selectedRowKeys: selectedKeys }, function () {
            if (isFunction(callback)) callback(rows);
        });
    }
    //获取当前全部行数据
    , getRowData: function getRowData() {
        return this.state.allRows;
    }
    //获取当前选中的行keys
    , getSelectedRowKeys: function getSelectedRowKeys() {
        return this.state.selectedRowKeys;
    }
    //当行被勾选|全选，selectedRowKeys-被勾选的行keys，selectedRows-被勾选的行数据
    , _onRowChangeChecked: function _onRowChangeChecked(selectedRowKeys, selectedRows) {
        this.setState({ selectedRowKeys: selectedRowKeys });
    },
    render: function render() {
        var rowSelection = this.props.rowSelection == false ? false : { selectedRowKeys: this.state.selectedRowKeys, onChange: this._onRowChangeChecked };
        var pagination = this.props.pagination ? this.props.pagination : false;
        return React.createElement(YYTable, _extends({}, this.props, { dataSource: this.state.allRows, columns: this.state.columns, rowSelection: rowSelection, pagination: pagination }));
    }
});

module.exports = YYEditTable;