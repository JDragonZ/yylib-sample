'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by Dio on 2016/5/11.
 */
var React = require('react');
var ReactDOM = require('react-dom');
var YYClass = require('../base/YYClass');
var rowSelection = require('./rowSelection');
var YYTableCol = require('./YYTableCol');

var _require = require('antd');

var Table = _require.Table;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var _ = require('lodash');

var uiMetaFields = require('./uiMetaFields');
var EventUtils = require('./utils/EventUtils');
var DomUtils = require('./utils/DomUtils');
var ResizerLine = require('./ResizerLine');
var DataUtil = require('../../utils/DataUtil');

var PAGE_SIZE_LOCAL_KEY = '_YYTABLE_PAGE_SIZE_'; //本地记录切换后的每页显示数
var COLUMNS_LOCAL_KEY = '_YYTABLE_COLUMNS_DATA_'; //本地存储记录列定义信息
require('./style/index.less');

var prefixTableColCls = 'yyui-table-col'; //表格列类前缀

//定义META
var uiMeta = {
    name: 'table',
    fields: uiMetaFields
};
//获取默认的分页数
function getDefaultPageSize(key) {
    var pageSize = DataUtil.localRead(PAGE_SIZE_LOCAL_KEY + (key ? key : '')); //读取本地记录的每页显示数
    return pageSize ? parseInt(pageSize) : 10;
}
var YYTable = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var columns = this._renderColumns(this.props.columns, this.props.children);
        return {
            columns: columns,
            rowActiveKey: this.props.rowActiveKey //当前高亮状态的行
        };
    },
    statics: {
        rowSelection: rowSelection,
        cloumns: YYTableCol,
        //获取默认的分页数
        getDefaultPageSize: getDefaultPageSize
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('rowActiveKey' in nextProps) {
            this.setState({ rowActiveKey: nextProps.rowActiveKey });
        }
        if ('columns' in nextProps) {
            this.setState({ columns: this._renderColumns(nextProps.columns, nextProps.children) });
        }
        if ('children' in nextProps) {
            this.setState({ columns: this._renderColumns(nextProps.columns, nextProps.children) });
        }
    }
    //当每页分页数发生变更时
    , _onShowSizeChange: function _onShowSizeChange(current, pageSize) {
        DataUtil.localSave(PAGE_SIZE_LOCAL_KEY + (this.props.cookieKey ? this.props.cookieKey : ''), pageSize); //本地记录每页显示数
        if (this.props.pagination && _.isFunction(this.props.pagination.onShowSizeChange)) {
            this.props.pagination.onShowSizeChange(current, pageSize);
        }
    }
    //默认的分页配置
    , getDefaultPagination: function getDefaultPagination() {
        if (this.props.pagination == false) return false;
        var pageSize = getDefaultPageSize(this.props.cookieKey); //读取本地记录的每页显示数
        //存在指定值则使用指定值
        if (this.props.pagination && this.props.pagination.pageSize) {
            pageSize = this.props.pagination.pageSize;
        }
        var p = {
            showQuickJumper: true, size: 'default',
            showSizeChanger: true,
            showTotal: function showTotal(total) {
                return '共 ' + total + ' 条';
            }
        };
        return _.assign(p, this.props.pagination, { pageSize: pageSize, onShowSizeChange: this._onShowSizeChange });
    }
    //默认的勾选配置
    , getDefaultRowSelection: function getDefaultRowSelection() {
        var rowSelection;
        if (this.props.checkable) {
            rowSelection = { type: 'checkbox' };
        };
        if (this.props.checkable != false && this.props.rowSelection) {
            if (rowSelection) {
                rowSelection = _.assign(rowSelection, this.props.rowSelection);
            } else {
                rowSelection = this.props.rowSelection;
            }
        }
        return rowSelection;
    }
    // 配置列 是否显示 显示顺序
    , _resolveData: function _resolveData(columns) {
        if (!_.isArray(columns) || columns.length == 0) return columns; //返回原始值
        // 排除 isShow == false 的项
        var columnsShow = _.filter(columns, function (column) {
            if (!column || column.isShow == undefined) return true;
            return column.isShow === false ? false : true; //只有为false则排除
        });

        // 排除 showIndex == undefiend 的项
        var columnWithOutShowIndex = [];
        var columnsWithShowIndex = _.filter(columnsShow, function (column) {
            if (!column) return true;
            if (column.showIndex == undefined) {
                columnWithOutShowIndex.push(column);
            }
            return column.showIndex != undefined;
        });
        // 排序
        var columnsSort = columnsWithShowIndex.sort(function (col1, col2) {
            return col1.showIndex - col2.showIndex;
        });
        // 加入 showIndex == undefined 的项, 处理title
        return columnsSort.concat(columnWithOutShowIndex);
    }
    //处理外部的column.render方法，克隆形成新的columns集合
    , _cloneColumns: function _cloneColumns(columns) {
        var newColumns = _.cloneDeep(columns);
        for (var i = 0; i < newColumns.length; i++) {
            var oldCol = columns[i];
            var col = newColumns[i];
            //处理超长标题的title
            if (_.isString(oldCol.title)) {
                col.title = React.createElement('span', { title: oldCol.title }, oldCol.title);
            }
            if (_.isFunction(col.render)) {
                //将外部的render方法改为_outRender方法
                col._outRender = col.render;
                delete col.render;
            }
        }
        return newColumns;
    }
    //渲染render回调处理
    , _callbackColumns: function _callbackColumns(columns) {
        for (var i = 0; i < columns.length; i++) {
            var col = columns[i];
            col.render = function (text, record, index) {
                var thisCol = this;
                text = text == 'null' ? '' : text;
                var cellText = text;
                if (thisCol._outRender) {
                    cellText = thisCol._outRender(text, record, index);
                }
                var cellProps = { title: text };
                if (thisCol.color) {
                    cellProps.style = { color: thisCol.color };
                }
                var cell = _.isObject(cellText) ? cellText : React.createElement('span', cellProps, cellText);
                return cell;
            }.bind(col);
        }
        return columns;
    }
    //为列追加index类
    , _addIndexClass: function _addIndexClass(columns) {
        if (this.props.draggable) {
            return _.map(columns, function (column) {
                var _column = column;
                var className = _column.className;
                var dataIndex = _column.dataIndex;

                var resultCls = (prefixTableColCls + '-' + dataIndex + ' ' + (className ? className : '')).trim();
                column = _.assign(column, { className: resultCls });
                return column;
            });
        }
        return columns;
    }
    //渲染列定义
    , _renderColumns: function _renderColumns(columns, children) {
        var _columns = [];
        if (_.isArray(children) && children.length > 0) {
            children.forEach(function (child) {
                if (child.type.prototype.uiMeta.name == 'tablecol') {
                    var column = _.assign({}, child.props);
                    _columns.push(column);
                }
            });
        } else {
            _columns = _.isArray(columns) ? columns : [];
        }
        _columns = this._resolveData(_columns); //处理isShow|showIndex
        _columns = this._cloneColumns(_columns); //处理外部column.render为column._outRender
        _columns = this._callbackColumns(_columns); //处理cell的column.color、title属性
        _columns = this._localReadColsWithWidth(_columns); //如果YYTable，draggable=true并且有cookieKey属性则从本地读取width数据，否则直接返回_columns
        _columns = this._addIndexClass(_columns); //处理cell的column.className,为其追加一个dataindex所指定的classname，如果YYTable，draggable=true时添加，否则直接返回

        return _columns;
    }
    //处理行选择样式
    , _onRowClick: function _onRowClick(record, index) {
        var onRowClick = this.props.onRowClick;
        if (_.isFunction(onRowClick)) {
            onRowClick(record, index);
        }
        var rowKey = this.props.rowKey ? this.props.rowKey : 'key';
        if (record[rowKey]) {
            if (record[rowKey] !== this.state.rowActiveKey) {
                this.setState({ rowActiveKey: record[rowKey] });
            } else {
                this.setState({ rowActiveKey: '' });
            }
        }
    },
    _rowClassName: function _rowClassName(record, index) {
        var rowActiveKey = this.state.rowActiveKey;
        var rowCls = [];
        var rowKey = this.props.rowKey ? this.props.rowKey : 'key';
        if (rowActiveKey && rowActiveKey === record[rowKey]) {
            //当前激活行高亮
            rowCls.push(this.className('row-selected'));
        }
        var rowClassName = this.props.rowClassName;
        if (_.isFunction(rowClassName)) {
            rowCls.push(rowClassName(record, index));
        }
        return rowCls.length > 0 ? rowCls.join(' ') : '';
    }
    //绑定表格行双击事件
    , _rowDoubleClick: function _rowDoubleClick() {
        var domRows = ReactDOM.findDOMNode(this).querySelectorAll('.ant-table-tbody .ant-table-row');
        var dataRows = this.props.dataSource;
        var rowDbClick = this.props.onRowDoubleClick;
        if (domRows && domRows.length > 0) {
            _.forEach(domRows, function (tr, index) {
                tr.ondblclick = function () {
                    //console.log('ondblclick------------>',dataRows[index]);
                    if (rowDbClick) {
                        rowDbClick(dataRows[index], index);
                    }
                };
            });
        }
    }
    //绑定事件
    , _bindEvent: function _bindEvent() {
        this._rowDoubleClick();
    },
    _getIndexOfTableCol: function _getIndexOfTableCol(elem) {
        var dataIndex = '';
        var classList = elem.classList;
        for (var index = 0; index < classList.length; index++) {
            var cls = classList[index];
            var lastSeparater = cls.lastIndexOf('-');
            if (cls.indexOf(prefixTableColCls) !== -1) {
                return cls.substring(++lastSeparater).trim();
            }
        }
        return dataIndex;
    },
    _handleResizeStart: function _handleResizeStart(event) {
        var labelDom = event.currentTarget;
        var tableDom = this.tableDom;
        var currentThDom = labelDom.parentNode;
        var tableColIndex = this._getIndexOfTableCol(currentThDom);

        var tableRect = DomUtils.getNodeClientRect(tableDom); //表格
        var currentThRect = DomUtils.getNodeClientRect(currentThDom); //当前的表头列
        var resizerLabelRect = DomUtils.getNodeClientRect(labelDom); //当前的伸缩label

        var resizerLineWidth = currentThRect.width;
        var resizerLineHeight = tableRect.height;
        var resizerLineLeft = resizerLabelRect.right - tableRect.left;

        this.refs.resizerLine.onLabelMouseDown(event); //开始捕获鼠标移动

        this.currentThDom = currentThDom;
        this.setState({
            visibleResizer: true,
            currentColKey: tableColIndex,
            resizerLineWidth: resizerLineWidth,
            resizerLineHeight: resizerLineHeight,
            resizerLineLeft: resizerLineLeft - resizerLineWidth
        });
    },
    _localSaveColumnsWidth: function _localSaveColumnsWidth(columns) {
        var _props = this.props;
        var cookieKey = _props.cookieKey;
        var draggable = _props.draggable;

        if (cookieKey && draggable) {
            //只在支持拖拽及存在cookieKey属性时才进行存储
            var saveKey = ('' + COLUMNS_LOCAL_KEY + (cookieKey ? cookieKey : '')).trim();
            var data = _.map(columns, function (column) {
                var dataIndex = column.dataIndex;
                var width = column.width;

                return { dataIndex: dataIndex, width: width };
            });
            DataUtil.localSave(saveKey, data);
        }
    },
    _localReadColsWithWidth: function _localReadColsWithWidth(columns) {
        var _props2 = this.props;
        var cookieKey = _props2.cookieKey;
        var draggable = _props2.draggable;

        if (cookieKey && draggable) {
            //只在支持拖拽及存在cookieKey属性时才进行读取
            var key = ('' + COLUMNS_LOCAL_KEY + (cookieKey ? cookieKey : '')).trim();
            var columnsWidth = DataUtil.localReadObject(key);
            return _.map(columns, function (column) {
                _.forEach(columnsWidth, function (info) {
                    if (column.dataIndex === info.dataIndex && info.width != undefined) {
                        column = _.assign(column, { width: info.width });
                    }
                });
                return column;
            });
        }
        return columns;
    },
    _handleResizeEnd: function _handleResizeEnd(width, key) {
        var currentThDom = this.currentThDom;
        var columns = this.state.columns;

        if (currentThDom) {
            columns = _.map(columns, function (column) {
                var _column2 = column;
                var dataIndex = _column2.dataIndex;

                if (key === dataIndex) {
                    column = _.assign(column, { width: width });
                }
                return column;
            });
        }

        this._localSaveColumnsWidth(columns);
        this.setState({ visibleResizer: false, columns: columns });
    },
    _operResizerLabel: function _operResizerLabel(domThs, action) {
        if (domThs && domThs.length) {
            for (var index = 0; index < domThs.length - 1; index++) {
                //排除最后一个
                DomUtils[action](domThs[index], this._handleResizeStart);
            }
        }
    },
    componentDidMount: function componentDidMount() {
        var tableDom = ReactDOM.findDOMNode(this).querySelector('.ant-table');
        var domThs = tableDom.querySelectorAll('.ant-table-thead th');
        this.tableDom = tableDom;
        this.domThs = domThs;

        if (this.props.draggable) {
            this._operResizerLabel(domThs, 'addResizerLabel');
        }

        this._bindEvent();
    },
    componentDidUpdate: function componentDidUpdate() {
        this._bindEvent();
    },
    componentWillUnmount: function componentWillUnmount() {
        if (this.props.draggable) {
            this._operResizerLabel(this.domThs, 'removeResizerLabel');
        }
        this.tableDom = null;
        this.domThs = null;
        this.currentThDom = null;
    },
    render: function render() {
        var cls = this.className();
        var locale = {};
        var emptyView = this.props.emptyView;

        emptyView ? locale.emptyText = emptyView : null;

        var tableComponent = React.createElement(Table, _extends({}, this.props, {
            ref: 'mytable',
            rowClassName: this._rowClassName.bind(this),
            onRowClick: this._onRowClick,
            className: cls,
            columns: this.state.columns,
            locale: locale,
            rowSelection: this.getDefaultRowSelection(),
            pagination: this.getDefaultPagination()
        }));
        if (this.props.draggable) {
            return React.createElement(
                'div',
                { className: 'yyui-table-resizer' },
                tableComponent,
                React.createElement(ResizerLine, {
                    ref: 'resizerLine',
                    left: this.state.resizerLineLeft,
                    height: this.state.resizerLineHeight,
                    visible: this.state.visibleResizer,
                    onResizeEnd: this._handleResizeEnd,
                    currentColKey: this.state.currentColKey,
                    initialWidth: this.state.resizerLineWidth
                })
            );
        }

        return tableComponent;
    }
});

module.exports = YYTable;