'use strict';

/**
 * Created by wuhao on 16/8/27.
 */

var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
//定义META
var uiMeta = {
    name: 'tablecol',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('title', '', PropTypes.oneOfType([PropTypes.string, PropTypes.element]), false, '列头显示文字'), field('key', '', PropTypes.string, false, 'React 需要的 key，建议设置'), field('dataIndex', '', PropTypes.string, false, '列数据在数据项中对应的 key，支持 a.b.c 的嵌套写法'), field('render', null, PropTypes.func, false, '	生成复杂数据的渲染函数，参数分别为当前行的值，当前行数据，行索引，@return里面可以设置表格行/列合并'), field('filters', null, PropTypes.array, false, '表头的筛选菜单项'), field('onFilter', null, PropTypes.func, false, '本地模式下，确定筛选的运行函数'), field('filterMultiple', true, PropTypes.bool, false, '是否多选'), field('filterDropdown', null, PropTypes.element, false, '可以自定义筛选菜单，此函数只负责渲染图层，需要自行编写各种交互'), field('sorter', null, PropTypes.oneOfType([PropTypes.func], PropTypes.bool), false, '排序函数，本地排序使用一个函数，需要服务端排序可设为 true'), field('colSpan', null, PropTypes.number, false, '表头列合并,设置为 0 时，不渲染'), field('width', null, PropTypes.oneOfType([PropTypes.string, PropTypes.number], PropTypes.bool), false, '列宽度'), field('className', '', PropTypes.string, false, '列的className'), field('fixed', false, PropTypes.oneOfType([PropTypes.bool, PropTypes.string]), false, '列是否固定，可选 true(等效于 left) left|right'), field('filteredValue', null, PropTypes.array, false, '筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组'), field('sortOrder', null, PropTypes.oneOfType([PropTypes.bool, PropTypes.string]), false, '排序的受控属性，外界可用此控制列的排序，可设置为ascend|descend|false')]
};
var YYTableCol = YYClass.create({
    uiMeta: uiMeta
});

module.exports = YYTableCol;