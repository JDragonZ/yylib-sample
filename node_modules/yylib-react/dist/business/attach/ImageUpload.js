'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * 图片上传组件
 *
 * Created by 张远志 on 16/08/17.
 */
var React = require('react');

var _require = require('yylib-ui');

var YYClass = _require.YYClass;
var YYPage = _require.YYPage;
var YYUpload = _require.YYUpload;
var YYMessage = _require.YYMessage;
var YYButton = _require.YYButton;
var YYIcon = _require.YYIcon;
var YYTooltip = _require.YYTooltip;
var YYNotice = _require.YYNotice;

var _require2 = require("./attachaction");

var loadAttachList = _require2.loadAttachList;
var delAttach = _require2.delAttach;
var downloadUrl = _require2.downloadUrl;
var listUrl = _require2.listUrl;
var uploadUrl = _require2.uploadUrl;
var delUrl = _require2.delUrl;
//var {Upload} = require("antd");
//下载url
//const downloadUrl = "/icop-file/file/download?id=";
//获取附件列表的url
//const listUrl = "/icop-file/file/list";
//上传url
//const uploadUrl = "/icop-file/file/upload2";
//const delUrl = "/icop-file/file/del";

var ImageUpload = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        //serverUrl为上传接口服务url前缀，fileUrl为文件访问url前缀
        return { serverUrl: '', fileUrl: "", value: '', height: 100, width: 100, sourceId: '', sourceType: '', billType: '', title: '附件上传' };
    },
    getInitialState: function getInitialState() {
        var value = null;
        if (this.props.__meta != undefined && this.props.__meta.initialValue != undefined) {
            value = this.props.__meta.initialValue;
        } else if (this.props.value != undefined) {
            value = this.props.value;
        } else {
            value = this.props.value;
        }
        return {
            value: value, fileList: [], isload: false, fileid: '', sourceId: '', filePath: '' //sourceId用于控制加载次数
        };
    },

    componentWillMount: function componentWillMount() {
        this.props.onChange(null);
    },
    _loadImg: function _loadImg(serverUrl, billType, sourceId, sourceType) {
        var url = serverUrl + listUrl;
        var that = this;
        loadAttachList(url, { id: sourceId, billType: billType, type: sourceType }, function (data) {
            if (data) {
                var fileid = data[0].gid;
                var filepath = data[0].filePath;
                that.setState({ fileid: fileid, filePath: filepath });
            } else {
                that.setState({ value: null, fileList: [], fileid: '', filePath: '' });
            }
        });
    },
    componentDidMount: function componentDidMount() {
        //由于只有在sourceId为固定值时才会调用该区域，而现实情况不会有这种情况，所以暂时注释掉
        /* if(this.state.isload){
             return;
         }*/
        /*var sourceId = this.props.sourceId;
        var billType = this.props.billType;
        if(sourceId && billType){
            this.setState({isload:true});
              var serverUrl = this.props.serverUrl;
            var sourceType = this.props.sourceType;
            this._loadImg(serverUrl,billType,sourceId,sourceType);
        }
        this.setState({sourceId:sourceId});*/
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        /*if(this.state.isload){
            return;
        }*/
        var sourceId = nextProps.sourceId;
        var billType = nextProps.billType;
        var lastSourceId = this.state.sourceId;
        if (!sourceId) {
            sourceId = "";
        }
        if (!lastSourceId) {
            lastSourceId = "";
        }
        if (sourceId && billType) {
            this.setState({ isload: true });
            if (this.state.sourceId != sourceId) {
                //sourceId变化时才加载图片
                var serverUrl = nextProps.serverUrl;
                var sourceType = nextProps.sourceType;
                this._loadImg(serverUrl, billType, sourceId, sourceType);
            }
        } else {
            if (sourceId != lastSourceId) {
                //如果sourceId改变了，则清空数据
                this.setState({ value: null, fileList: [], fileid: '', filePath: '' });
            }
        }
        this.setState({ sourceId: sourceId });
    },
    handleChange: function handleChange(info) {
        var that = this;
        if (info.file.status === 'done') {
            that.setState({ fileList: [] });
            var back = info.file.response;
            if (back.success) {
                var attachArr = back.backData;
                var newFileid = attachArr[0].gid;
                var newFilePath = attachArr[0].filePath;
                if (that.props.sourceId) {
                    //修改时，先上传后删除
                    var sourceId = that.props.sourceId;
                    var billType = that.props.billType;
                    var sourceType = that.props.sourceType;
                    //删除旧的文件
                    var ids = that.state.fileid;
                    //图片更新为新的链接
                    that.setState({ fileid: newFileid, filePath: newFilePath });

                    delAttach(this.props.serverUrl + delUrl, { id: sourceId, billType: billType, sourceType: sourceType, attachIds: ids }, function (data) {
                        if (data.success) {
                            if (console) {
                                console.log("删除成功");
                            }
                        }
                    }, function (err) {
                        if (console) {
                            console.log("删除失败" + err);
                        }
                    });
                } else {
                    //新增时，直接更新组件的value
                    that.setState({ fileid: newFileid, filePath: newFilePath });
                    that.props.onChange(newFileid);
                }
            }
        }
    },
    staticUrl: function staticUrl() {
        if (this.props.fileUrl) {
            return this.props.fileUrl;
        }
        return this.props.serverUrl;
    },
    image: function image() {
        var width = parseInt(this.props.width);
        var height = parseInt(this.props.height);
        //if(this.state.fileid){
        //console.log("_"+width+"x"+height);
        if (this.state.filePath) {
            var staticUrl = this.staticUrl();
            var url = staticUrl + "/" + this.state.filePath;
            //缩略图尺寸
            var dimension = "_" + width + "x" + height;
            var idx = url.lastIndexOf(".");
            if (idx > -1) {
                var ext = url.substr(idx);
                url = url.substr(0, idx) + dimension + ext;
                console.log(url);
            }
            return React.createElement(
                'div',
                { style: { 'border': '1px dashed #d9d9d9', 'border-radius': '6px', 'height': height + 5, 'width': width + 5 } },
                React.createElement('img', { width: width, height: height, src: url })
            );
        } else {
            //没有上传照片时
            return React.createElement(
                'div',
                { className: 'ant-upload ant-upload-select ant-upload-select-picture-card', width: width, height: height },
                React.createElement(YYIcon, { type: 'plus' }),
                React.createElement(
                    'div',
                    { className: 'ant-upload-text' },
                    '请先上传照片'
                )
            );
        }
    },
    onUpload: function onUpload(e) {
        e.preventDefault();
    },
    render: function render() {
        var sourceId = this.props.sourceId;
        var billType = this.props.billType;
        var sourceType = this.props.sourceType;
        var that = this;
        var props = {
            action: this.props.serverUrl + uploadUrl,
            data: { sourceId: sourceId, billType: billType, sourceType: sourceType },
            onChange: this.handleChange,
            showUploadList: false,
            multiple: false
        };
        var title = this.props.title ? this.props.title : '点击上传';
        return React.createElement(
            'div',
            null,
            this.image(),
            React.createElement(
                'div',
                null,
                React.createElement(
                    YYUpload,
                    _extends({}, props, { accept: 'image/*' }),
                    React.createElement(
                        YYTooltip,
                        { placement: 'top', title: '请选择图片上传' },
                        React.createElement(
                            YYButton,
                            { type: 'ghost', onClick: that.onUpload },
                            React.createElement(YYIcon, { type: 'upload' }),
                            title
                        )
                    )
                )
            )
        );
    }
});

module.exports = ImageUpload;