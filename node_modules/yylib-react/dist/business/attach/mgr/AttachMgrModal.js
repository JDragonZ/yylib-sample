'use strict';

/**
 * Created by Administrator on 2016/7/26.
 */
var React = require('react');
var AttachTable = require('./AttachMgrTable');

var _require = require('yylib-ui');

var YYClass = _require.YYClass;
var YYModal = _require.YYModal;
var YYButton = _require.YYButton;
var YYTree = _require.YYTree;
var YYTreeNode = _require.YYTreeNode;
var YYCol = _require.YYCol;
var YYRow = _require.YYRow;


var AttachmentMgrModal = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return { fileTypes: '', showUploadBtn: true, showDelBtn: true, readOnly: false, beforeUpload: null, beforeDel: null, userId: '', userName: '' };
    },
    getInitialState: function getInitialState() {
        return {
            serverUrl: '', //接口
            fileUrl: "", //文件
            visible: false,
            sourceId: null,
            billType: null,
            sourceType: null,
            loading: false,
            value: this.props.value != undefined ? this.props.value : "",
            defaultKey: ''
        };
    },

    changeValue: function changeValue(value) {
        if (!this.props.readOnly) {
            this.props.onChange(value);
        }
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        //解决sourceId发生变化的时候组件的返回值问题
        var lastSourceId = this.state.sourceId;
        if (!lastSourceId) {
            lastSourceId = "";
        }
        var sourceId = nextProps.sourceId;
        if (!sourceId) {
            sourceId = "";
        }
        this.setState({ sourceId: sourceId });
        if (sourceId != lastSourceId) {
            //如果sourceId变化，则组件的值为空
            this.changeValue(null);
        }
    },
    componentWillMount: function componentWillMount() {
        // this.changeValue(null);
        var fileTypeMap = this.props.fileTypes;
        if (fileTypeMap) {
            var defaultKey = fileTypeMap[0].code;
            this.setState({ defaultKey: defaultKey, fileTypes: fileTypeMap, sourceType: defaultKey });
        } else {
            this.setState({ sourceType: '102345678' });
        }
    },
    handleCancel: function handleCancel() {
        this.props.onCancel();
    },
    onSelectNode: function onSelectNode(selectedKeys, info) {
        //console.log(selectedKeys,info);
        var key = selectedKeys[0];
        this.setState({ sourceType: key });
    },
    render: function render() {
        var that = this;
        var nameMap = this.props.fileTypes;
        //是否定义文件分类
        var showTree = false;
        var tableWidth = 24;
        if (nameMap) {
            showTree = true;
            tableWidth = 19;
        }
        var defaultKey = this.state.defaultKey;
        var loop = function loop(data) {
            return data.map(function (item) {
                return React.createElement(YYTreeNode, { key: item.code, title: item.name });
            });
        };
        console.log("this.state.sourceType:" + this.state.sourceType);
        return React.createElement(
            YYModal,
            { ref: 'modal',
                wrapClassName: 'vertical-center-infomodal',
                visible: this.props.visible,
                title: '附件管理', width: '800',
                onCancel: this.handleCancel, footer: [React.createElement(
                    YYButton,
                    { key: 'back', onClick: this.handleCancel },
                    '关闭'
                )] },
            React.createElement(
                YYRow,
                { className: 'batch-opt' },
                showTree ? React.createElement(
                    YYCol,
                    { span: '5' },
                    React.createElement(
                        YYTree,
                        { defaultSelectedKeys: defaultKey, onSelect: this.onSelectNode },
                        loop(nameMap)
                    )
                ) : '',
                React.createElement(
                    YYCol,
                    { span: tableWidth },
                    React.createElement(AttachTable, { serverUrl: this.props.serverUrl, fileUrl: this.props.fileUrl, readOnly: this.props.readOnly, modal: this, billType: this.props.billType,
                        showUploadBtn: this.props.showUploadBtn, showDelBtn: this.props.showDelBtn, sourceId: this.state.sourceId,
                        sourceType: this.state.sourceType, pageVisible: true, beforeUpload: this.props.beforeUpload,
                        beforeDel: this.props.beforeDel, userId: this.props.userId, userName: this.props.userName })
                )
            )
        );
    }
});
module.exports = AttachmentMgrModal;