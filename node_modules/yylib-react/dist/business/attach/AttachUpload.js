'use strict';

/**
 * Created by Administrator on 2016/5/11.
 * 上传附件组件
 */
require("./upload.css");
var React = require('react');

var _require = require('yylib-ui');

var YYUpload = _require.YYUpload;
var YYButton = _require.YYButton;
var YYIcon = _require.YYIcon;
var YYTooltip = _require.YYTooltip;
var YYNotice = _require.YYNotice;
var YYClass = _require.YYClass;

var _require2 = require("./attachaction");

var loadAttachList = _require2.loadAttachList;
var delAttach = _require2.delAttach;
var showErrMsg = _require2.showErrMsg;
var downloadUrl = _require2.downloadUrl;
var listUrl = _require2.listUrl;
var uploadUrl = _require2.uploadUrl;
var delUrl = _require2.delUrl;
//var {Upload} = require("antd");

//文件类型限制，暂不使用
//const allowTypes = ['jpg','png','gif','txt','doc','docx','xls','xlsx','pdf','rar','zip'];
//下载url
//const downloadUrl = "/icop-file/file/download?id=";
//获取附件列表的url
//const listUrl = "/icop-file/file/list";
//上传url
//const uploadUrl = "/icop-file/file/upload2";
//const delUrl = "/icop-file/file/del";

var AttachUpload = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return { serverUrl: '', fileUrl: "", value: '', allowFileExts: '', uploadFailCallback: null, uploadSuccessCallback: null,
            title: '点击上传', beforeUpload: null, beforeDel: null, userId: '', userName: '' };
    },
    getInitialState: function getInitialState() {
        var value = null;
        if (this.props.__meta != undefined && this.props.__meta.initialValue != undefined) {
            value = this.props.__meta.initialValue;
        } else if (this.props.value != undefined) {
            value = this.props.value;
        } else {
            value = this.props.value;
        }
        return {
            value: value,
            fileList: [],
            isload: false, //保证在fileids有值之后只接收一次参数
            disable: false, //是否只读
            sourceId: ''
        };
    },
    _loadList: function _loadList(serverUrl, billType, sourceId, sourceType) {
        var url = serverUrl + listUrl;
        var that = this;
        var staticUrl = this.staticUrl();
        loadAttachList(url, { id: sourceId, billType: billType, type: sourceType }, function (data) {
            if (data) {
                var attachArr = new Array();
                for (var i = 0, len = data.length; i < len; i++) {
                    var item = data[i];
                    var file = { uid: item.gid, name: item.fileName, url: staticUrl + "/" + item.filePath + "?filename=" + item.fileName, status: 'done' };
                    attachArr.push(file);
                }
                that.setState({ fileList: attachArr });

                that.changeValue();
            }
        });
    },
    _canLoad: function _canLoad(billType, sourceId) {
        return billType && sourceId;
    },
    _removeItemFromListById: function _removeItemFromListById(fileList, fileid) {
        var sourceId = this.props.sourceId;
        var sourceType = this.props.sourceType;
        var billType = this.props.billType;
        if (sourceId && billType) {
            var url = this.props.serverUrl + delUrl;
            var that = this;
            delAttach(url, { id: sourceId, billType: billType, sourceType: sourceType, attachIds: fileid }, function (data) {
                if (data.success) {
                    that.doRemove(fileList, fileid);

                    that.changeValue();
                } else {
                    showErrMsg("删除失败", data.backMsg);
                }
            }, function (err) {
                showErrMsg("删除失败", err);
            });
        } else {
            this.doRemove(fileList, fileid);
            this.changeValue();
        }
    },
    doRemove: function doRemove(fileList, fileid) {
        var idx = -1;
        fileList.map(function (item, i) {
            if (item.uid == fileid) {
                idx = i;
                return;
            }
        });
        if (idx > -1) {
            fileList.splice(idx, 1);
            this.setState({ fileList: fileList });
        }
    },
    componentWillMount: function componentWillMount() {
        this.props.onChange(null);
    },
    componentDidMount: function componentDidMount() {
        /*debugger
        var billType = this.props.billType;
        var sourceId = this.props.sourceId;//loadValue
        this.setState({sourceId:sourceId});
        var serverUrl = this.props.serverUrl;
        var sourceType = this.props.sourceType;
        if(this._canLoad(billType,sourceId)){
            //保证在fileids有值之后只接收一次参数
            this.setState({isload:true});
            this._loadList(serverUrl,billType,sourceId,sourceType);
        }*/
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({ disable: nextProps.disable });
        var sourceId = nextProps.sourceId; //loadValue
        var billType = nextProps.billType;
        var sourceType = nextProps.sourceType;
        var serverUrl = nextProps.serverUrl;

        if (this._canLoad(billType, sourceId)) {
            //保证在fileids有值之后只接收一次参数
            this.setState({ isload: true });
            if (sourceId != this.state.sourceId) {
                //sourceId变化时才加载附件列表
                this._loadList(serverUrl, billType, sourceId, sourceType);
            }
        } else {
            //清空数据
            var stateSourceId = this.state.sourceId;
            if (stateSourceId != sourceId) {
                //只有在sourceid发生变化时才清空数据
                this.setState({ fileList: [], value: null });
            }
        }

        this.setState({ sourceId: sourceId });
    },
    changeValue: function changeValue() {
        //获取上传文件的fileid
        var sourceId = this.props.sourceId;
        //if(sourceId){
        // }else{
        var idArr = [];
        this.state.fileList.map(function (item, i) {
            idArr.push(item.uid);
        });
        var newIds = idArr.join(',');
        this.props.onChange(newIds);
        //}
    },
    staticUrl: function staticUrl() {
        if (this.props.fileUrl) {
            return this.props.fileUrl;
        }
        return this.props.serverUrl;
    },
    handleChange: function handleChange(info) {
        if (info.file.status == 'done') {
            var resultObj = info.file.response;
            if (resultObj) {
                //上传接口返回文件的uid
                if (resultObj.success) {
                    var staticUrl = this.staticUrl();
                    var fileid = resultObj.backData[0].gid;
                    var filePath = resultObj.backData[0].filePath;
                    var fileName = resultObj.backData[0].fileName;
                    info.file.uid = fileid;
                    info.file.url = staticUrl + "/" + filePath + "?filename=" + fileName;
                    this.changeValue();
                }
            }
        }
        this.setState({ fileList: info.fileList });
    },
    handleRemove: function handleRemove(file) {
        //删除前判断
        if (this.props.beforeDel) {
            if (!this.props.beforeDel(file)) {
                return false;
            }
        }
        var uid = file.uid;
        var fileList = this.state.fileList;
        //从fileList中删除
        this._removeItemFromListById(fileList, uid);
    },

    onPreview: function onPreview(file) {
        window.open(file.url);
    },
    render: function render() {
        var allowFileTypes = this.props.allowFileExts;
        var sourceType = this.props.sourceType;
        var sourceId = this.props.sourceId;
        var billType = this.props.billType;
        var serverUrl = this.props.serverUrl;
        var multiple = this.props.multiple;
        var fileList = this.state.fileList;
        var attachProps = {
            data: { billType: billType, sourceId: sourceId, sourceType: sourceType, userId: this.props.userId, userName: this.props.userName },
            action: serverUrl + uploadUrl,
            onChange: this.handleChange,
            onRemove: this.handleRemove,
            onPreview: this.onPreview,
            showUploadList: true,
            fileList: fileList,
            multiple: multiple,
            beforeUpload: function beforeUpload(file) {
                var fileTypes = allowFileTypes;
                if (fileTypes) {
                    var allowFileExts = fileTypes.split(',');
                    var name = file.name;
                    var index = name.lastIndexOf('.');
                    if (index == -1) {
                        showErrMsg('上传失败', '请选择正确的文件格式');
                        return false;
                    }
                    var extend = name.substr(index + 1);
                    var idx = -1;
                    allowFileExts.map(function (item, i) {
                        if (item == extend) {
                            idx = i;
                            return;
                        }
                    });
                    if (idx > -1) {
                        return true;
                    }
                    showErrMsg('上传失败', '请上传正确的文件格式类型：' + fileTypes);
                    return false;
                }
            }
        };
        var title = this.props.title;
        if (!title) {
            title = '点击上传';
        }
        var disable = this.state.disable;
        if (disable == undefined) {
            disable = false;
        }
        var that = this;
        return React.createElement(
            'div',
            null,
            disable == false ? React.createElement(
                'div',
                null,
                React.createElement(
                    YYUpload,
                    attachProps,
                    allowFileTypes ? React.createElement(
                        YYTooltip,
                        { placement: 'top', title: '允许上传：' + allowFileTypes },
                        React.createElement(
                            YYButton,
                            { type: 'goust' },
                            React.createElement(YYIcon, { type: 'upload' }),
                            ' ',
                            title
                        )
                    ) : React.createElement(
                        YYButton,
                        { type: 'goust' },
                        React.createElement(YYIcon, { type: 'upload' }),
                        ' ',
                        title
                    )
                )
            ) : React.createElement(
                'div',
                { className: 'ant-upload-list ant-upload-list-text' },
                React.createElement(
                    'span',
                    null,
                    fileList.map(function (item, i) {
                        return React.createElement(
                            'div',
                            { className: 'ant-upload-list-item ant-upload-list-item-done' },
                            React.createElement(
                                'div',
                                { className: 'ant-upload-list-item-info' },
                                React.createElement('i', { className: 'anticon anticon-paper-clip' }),
                                React.createElement(
                                    'a',
                                    { href: '' + item.url, target: '_blank', className: 'ant-upload-list-item-name' },
                                    '' + item.name
                                ),
                                React.createElement('i', { className: 'anticon' })
                            )
                        );
                    })
                )
            )
        );
    }
});

module.exports = AttachUpload;