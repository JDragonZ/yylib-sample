'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _antd = require('antd');

var _reactCustomScrollbars = require('react-custom-scrollbars');

var _reactRedux = require('react-redux');

require('./bpm/styles/less/yyapproveuser.less');

var _bpm = require('./bpm/actions/bpm');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by gaoyangk on 2017/2/10.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var _require = require('yylib-ui');

var YYButton = _require.YYButton;
var YYModal = _require.YYModal;
var YYTable = _require.YYTable;

var TabPane = _antd.Tabs.TabPane;
var mapStateToProps = function mapStateToProps(state) {
				return {
								bpm: state.bpm
				};
};
//规范属性类型
var propTypes = {
				dispatch: _react2.default.PropTypes.func
};
var pageSize = 5;

var YYBpmSubmit = function (_React$Component) {
				_inherits(YYBpmSubmit, _React$Component);

				function YYBpmSubmit(props) {
								_classCallCheck(this, YYBpmSubmit);

								var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(YYBpmSubmit).call(this, props));

								_this.state = {
												visible: false,
												title: null,
												showTab: false,

												options: false,
												assginable: false,
												currentPage: 1,

												billTypeId: null,
												activeKey: null,
												selectedItem: []
								};
								_this.close = _this.close.bind(_this);
								_this.comfirm = _this.comfirm.bind(_this);
								_this.nextStep = _this.nextStep.bind(_this);

								_this.onTableClick = _this.onTableClick.bind(_this);
								_this.getProcData = _this.getProcData.bind(_this);

								_this.renderItem = _this.renderItem.bind(_this);
								_this.handleChange = _this.handleChange.bind(_this);
								_this.onChangeTab = _this.onChangeTab.bind(_this);
								return _this;
				}

				_createClass(YYBpmSubmit, [{
								key: 'componentDidMount',
								value: function componentDidMount() {
												var _props = this.props;
												var visible = _props.visible;
												var param = _props.param;
												var billTypeId = _props.billTypeId;
												var userId = _props.userId;
												var orgId = _props.orgId;
												var serUrl = _props.serUrl;
												var dispatch = _props.dispatch;

												var title = "";
												if (param != null) {
																var showTab = param.showTab;
																var prokey = param.prokey != null ? param.prokey : "";
																if (showTab == true) {
																				title = "选择下一个环节的参与者";
																				var _param = {
																								userId: userId,
																								prockey: prokey
																				};
																				dispatch((0, _bpm.getAssignByProckey)(serUrl, _param));
																} else {
																				title = "选择提交的流程";
																				var proc = {
																								size: pageSize,
																								page: 1,
																								userId: userId,
																								billTypeId: billTypeId,
																								searchText: ""

																				};

																				dispatch((0, _bpm.getConfigList)(serUrl, proc));
																}
																this.setState({
																				visible: visible,
																				title: title,
																				billTypeId: billTypeId,
																				serUrl: serUrl,
																				showTab: showTab
																});
												}
								}
				}, {
								key: 'componentWillReceiveProps',
								value: function componentWillReceiveProps(nextProps) {
												var bpm = nextProps.bpm;

												if (bpm != null && bpm.user != null) {
																if (bpm.user.data != null && bpm.user.data.length > 0) {
																				this.setState({
																								activeKey: bpm.user.data[0].activityId
																				});
																				var keys = [];
																				for (var i = 0; i < bpm.user.data.length; i++) {
																								var activeKey = bpm.user.data[i].activityId;
																								var item = {
																												activeKey: activeKey
																								};
																								keys.push(item);
																				}
																				this.setState({
																								selectedItem: keys
																				});
																}
												}
								}
				}, {
								key: 'close',
								value: function close(e) {
												this.props.close();
								}
				}, {
								key: 'comfirm',
								value: function comfirm(e) {
												var _state = this.state;
												var tableData = _state.tableData;
												var selectedItem = _state.selectedItem;

												var data = {
																prockey: tableData,
																assign: selectedItem
												};
												this.props.comfirm(data);
								}
				}, {
								key: 'nextStep',
								value: function nextStep() {
												if (this.state.activeKey) {
																this.setState({
																				showTab: true,
																				title: "选择下一个环节的参与者"
																});
												}
								}
				}, {
								key: 'getProcData',
								value: function getProcData(current) {
												this.setState({
																currentPage: current
												});
												var _state2 = this.state;
												var billTypeId = _state2.billTypeId;
												var serUrl = _state2.serUrl;
												var userId = _state2.userId;

												var proc = {
																size: pageSize,
																page: current,
																userId: userId,
																billTypeId: billTypeId,
																searchText: ""

												};
												var dispatch = this.props.dispatch;

												dispatch((0, _bpm.getConfigList)(serUrl, proc));
								}
				}, {
								key: 'onTableClick',
								value: function onTableClick(record, index) {
												var _state3 = this.state;
												var serUrl = _state3.serUrl;
												var userId = _state3.userId;
												var dispatch = this.props.dispatch;

												var data = [index];
												this.setState({
																selectedRowKeys: data,
																tableData: record.prokey,
																showTab: false,
																activeKey: null
												});

												var param = {
																userId: userId,
																prockey: record.prokey
												};
												dispatch((0, _bpm.getAssignByProckey)(serUrl, param));
								}

								//指派相关

				}, {
								key: 'renderItem',
								value: function renderItem(item) {
												var customLabel = _react2.default.createElement(
																'span',
																{ className: 'yyui-bpm-custom-item', title: item.title },
																item.description,
																'      ',
																item.title
												);

												return {
																label: customLabel, // for displayed item
																value: item.title };
								}
				}, {
								key: 'handleChange',
								value: function handleChange(targetKeys, direction, moveKeys) {
												var _state4 = this.state;
												var activeKey = _state4.activeKey;
												var selectedItem = _state4.selectedItem;

												if (selectedItem.length > 0) {
																for (var i = 0; i < selectedItem.length; i++) {
																				if (activeKey == selectedItem[i].activeKey) {
																								selectedItem[i].targetKeys = targetKeys;
																				}
																}
												}
												this.setState({
																selectedItem: selectedItem
												});
								}
				}, {
								key: 'onChangeTab',
								value: function onChangeTab(activeKey) {
												this.setState({ activeKey: activeKey });
								}
				}, {
								key: 'render',
								value: function render() {
												var _this2 = this,
												    _React$createElement;

												//选择流程
												var data = [];
												var tableTotal = 0;
												var columns = [{
																title: '流程编号',
																dataIndex: 'prokey'
												}, {
																title: '流程名称',
																dataIndex: 'processName'
												}, {
																title: '流程设计组织',
																color: '#f00', //自定义文本颜色
																dataIndex: 'orgName'
												}];
												var rowSelection = {
																selectedRowKeys: this.state.selectedRowKeys
												};
												var bpm = this.props.bpm;

												if (bpm != null && bpm.config != null) {
																data = bpm.config.data;
																tableTotal = bpm.config.total;
												}
												var pagination = {
																total: tableTotal,
																showSizeChanger: false,
																pageSize: 5,
																current: this.state.currentPage,
																onChange: this.getProcData
												};

												//指派信息
												var titles = ["待选审批人", "已选审批人"];
												var assignList = [];
												if (bpm != null && bpm.user != null) {
																var assign = bpm.user;
																if (assign.assignAble) {
																				assignList = assign.data;
																}
												}

												for (var _i = 0; _i < assignList.length; _i++) {
																var participants = assignList[_i].participants;
																var mockData = [];
																for (var j = 0; j < participants.length; j++) {
																				var _data = {
																								key: participants[j].id,
																								title: participants[j].name,
																								description: participants[j].code

																				};
																				mockData.push(_data);
																}
																assignList[_i].mockData = mockData;
												}
												var selectKey = [];
												var _state5 = this.state;
												var activeKey = _state5.activeKey;
												var selectedItem = _state5.selectedItem;

												for (var i = 0; i < selectedItem.length; i++) {
																if (selectedItem[i].activeKey == activeKey) {
																				selectKey = selectedItem[i].targetKeys;
																}
												}
												var footerButton = [];
												if (this.state.activeKey != null) {
																footerButton = [_react2.default.createElement(
																				YYButton,
																				{ onClick: this.close },
																				'取消'
																), _react2.default.createElement(
																				YYButton,
																				{ type: 'primary', onClick: this.nextStep },
																				'下一步'
																)];
												} else {
																footerButton = [_react2.default.createElement(
																				YYButton,
																				{ onClick: this.close },
																				'取消'
																), _react2.default.createElement(
																				YYButton,
																				{ type: 'primary', onClick: this.comfirm },
																				'确定'
																)];
												}
												if (this.state.showTab) {
																footerButton = [_react2.default.createElement(
																				YYButton,
																				{ onClick: this.close },
																				'取消'
																), _react2.default.createElement(
																				YYButton,
																				{ type: 'primary', onClick: this.comfirm },
																				'确定'
																)];
												}
												return _react2.default.createElement(
																'div',
																null,
																_react2.default.createElement(
																				YYModal,
																				(_React$createElement = { ref: 'modal',
																								visible: this.state.visible,
																								closable: false,
																								width: 580,
																								title: this.state.title
																				}, _defineProperty(_React$createElement, 'closable', true), _defineProperty(_React$createElement, 'onCancel', this.close), _defineProperty(_React$createElement, 'footer', footerButton), _React$createElement),
																				!this.state.showTab ? _react2.default.createElement(
																								'div',
																								null,
																								_react2.default.createElement(
																												_reactCustomScrollbars.Scrollbars,
																												{ style: { height: 350 } },
																												_react2.default.createElement(YYTable, { rowSelection: rowSelection, dataSource: data, onRowClick: this.onTableClick, pagination: pagination, columns: columns })
																								)
																				) : null,
																				this.state.showTab ? _react2.default.createElement(
																								'div',
																								null,
																								_react2.default.createElement(
																												_antd.Tabs,
																												{
																																ref: 'tabs',
																																type: 'card',
																																onChange: this.onChangeTab },
																												assignList.map(function (pane) {
																																return _react2.default.createElement(
																																				TabPane,
																																				{ tab: pane.activityName, key: pane.activityId },
																																				_react2.default.createElement(_antd.Transfer, {
																																								className: 'yyui-bpm-custom',
																																								dataSource: pane.mockData,
																																								listStyle: {
																																												width: 250,
																																												height: 300
																																								},
																																								'data-id': pane.activityId,
																																								titles: titles,
																																								targetKeys: selectKey,
																																								onChange: _this2.handleChange,
																																								render: _this2.renderItem })
																																);
																												})
																								)
																				) : null
																)
												);
								}
				}]);

				return YYBpmSubmit;
}(_react2.default.Component);

YYBpmSubmit.propTypes = propTypes;
module.exports = (0, _reactRedux.connect)(mapStateToProps)(YYBpmSubmit);