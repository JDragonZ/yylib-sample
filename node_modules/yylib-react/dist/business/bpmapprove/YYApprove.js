'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

require('./bpm/styles/less/bpmtask.less');

var _antd = require('antd');

var _reactCustomScrollbars = require('react-custom-scrollbars');

var _bpm = require('./bpm/actions/bpm');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('yylib-ui');

var YYReferInput = _require.YYReferInput;
var YYButton = _require.YYButton;


var YYViewApprove = require('./YYViewApprove');
var ViewRecord = require('./ViewRecord');
var YYApproveUser = require('./YYApproveUser');
var FormItem = _antd.Form.Item;
var Option = _antd.Select.Option;
var OptGroup = _antd.Select.OptGroup;
var RadioGroup = _antd.Radio.Group;

var USERID = null;

var mapStateToProps = function mapStateToProps(state) {

  return {
    bpm: state.bpm
  };
};

var propTypes = {
  bpmObject: _react2.default.PropTypes.object,
  dispatch: _react2.default.PropTypes.func
};

var YYApprove = function (_React$Component) {
  _inherits(YYApprove, _React$Component);

  function YYApprove(props) {
    _classCallCheck(this, YYApprove);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(YYApprove).call(this, props));

    _this.doApprove = _this.doApprove.bind(_this);
    _this.cancel = _this.cancel.bind(_this);
    _this.radioOnChange = _this.radioOnChange.bind(_this);
    _this.operateHistory = _this.operateHistory.bind(_this);
    _this.showUserRef = _this.showUserRef.bind(_this);
    _this.closeModal = _this.closeModal.bind(_this);
    _this.selectData = _this.selectData.bind(_this);
    _this.onChangeUser = _this.onChangeUser.bind(_this);
    _this.confirm = _this.confirm.bind(_this);
    _this.closeHistory = _this.closeHistory.bind(_this);
    _this.openBill = _this.openBill.bind(_this);
    _this.viewRecord = _this.viewRecord.bind(_this);
    _this.closeRecord = _this.closeRecord.bind(_this);
    _this.beforeApprove = _this.beforeApprove.bind(_this);
    _this.viewAssign = _this.viewAssign.bind(_this);
    _this.closeAssign = _this.closeAssign.bind(_this);
    _this.comfirmAssign = _this.comfirmAssign.bind(_this);
    _this.state = {
      opinion: 1,
      customTip: '',
      bill: [],
      assign: null,
      showView: false,
      rejectAble: false,
      assignAble: false,
      ViewRecord: false,
      ViewAssign: false,
      inPower: false,
      placeholder: "请输入审批语"
    };
    return _this;
  }

  _createClass(YYApprove, [{
    key: 'selectData',
    value: function selectData(value, option) {
      this.setState({ activityId: value, selectOption: option.refs });
    }
  }, {
    key: 'radioOnChange',
    value: function radioOnChange(e) {
      var opinion = e.target.value;
      this.setState({
        opinion: opinion
      });
    }
  }, {
    key: 'inputOnChange',
    value: function inputOnChange(e) {
      this.setState({
        customTip: e.target.value
      });
    }

    //初始化渲染执行之后立刻调用一次

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props;
      var bill = _props.bill;
      var showApprove = _props.showApprove;
      var userId = _props.userId;
      var orgId = _props.orgId;
      var serUrl = _props.serUrl;
      var refUrl = _props.refUrl;
      var viewBench = _props.viewBench;

      var bpmId = bill.bpmId ? bill.bpmId : null;
      var data = { userId: userId, bpmId: bpmId };
      this.setState({
        bill: bill,
        showApprove: showApprove,
        userId: userId,
        bpmId: bpmId,
        orgId: orgId,
        serUrl: serUrl,
        refUrl: refUrl
      });
      if (viewBench) {
        this.setState({
          viewBench: viewBench
        });
      }
      var dispatch = this.props.dispatch;

      dispatch((0, _bpm.bpmPrereject)(serUrl, data));
    }

    //数据更新后通知此方法

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var bpm = nextProps.bpm;

      if (bpm && bpm.type) {
        switch (bpm.type) {
          case 'bpmapprove':
            _antd.message.info(bpm.data.msg);this.excuteResult(bpm.data);break;
          case 'bpmdelegate':
            _antd.message.info(bpm.data.msg);this.excuteResult(bpm.data);break;
          case 'bpmdisapprove':
            _antd.message.info(bpm.data.msg);this.excuteResult(bpm.data);break;
          default:
            break;
        }
      }
    }
  }, {
    key: 'excuteResult',
    value: function excuteResult(data) {
      if (data) {
        if (data.success == true || data.success == "true") {
          this.confirm(data);
        } else {
          return;
        }
      }
    }
    //显示用户参照

  }, {
    key: 'showUserRef',
    value: function showUserRef() {
      this.setState({ comModal: true });
    }
  }, {
    key: 'closeModal',
    value: function closeModal() {
      this.setState({ comModal: false });
    }
  }, {
    key: 'beforeApprove',
    value: function beforeApprove(e) {
      var assignAble = this.props.bpm.data.assignAble;

      var opinion = this.state.opinion ? this.state.opinion : null; //审批意见
      if (assignAble != null && assignAble == true && (opinion == 1 || opinion == 3)) {
        this.viewAssign();
      } else {
        var assign = [];
        this.doApprove(assign);
      }
    }

    //审批操作

  }, {
    key: 'doApprove',
    value: function doApprove(assign) {
      var userId = this.state.userId; //登录用户ID
      var bill = {};
      bill = this.state.bill ? this.state.bill : null; //单据信息
      var changeKey = USERID; //改派的用户Id
      var bpmId = null;
      if (bill) {
        bpmId = bill.bpmId ? bill.bpmId : null; //流程实例ID
      }

      var opinion = this.state.opinion ? this.state.opinion : null; //审批意见
      var activityId = this.state.activityId ? this.state.activityId : null; //不同意且退回，退回到的哪里    
      var opinionContent = null;
      if (opinion == 1) {
        opinionContent = "同意";
      } else if (opinion == 2) {
        opinionContent = "不同意且退回";
        if (activityId == null || activityId == '') {
          _antd.message.info("请选择需要退回的节点！");
          return;
        }
      } else if (opinion == 3) {
        opinionContent = "不同意但继续";
      } else if (opinion == 4) {
        opinionContent = "改派";
        if (!changeKey) {
          _antd.message.error("请选择需要改派处！");
          return;
        }
      } else if (opinion == 5) {
        opinionContent = "加签";
      }
      var comment = this.state.customTip ? this.state.customTip : "";
      if (comment == "") {
        comment = opinionContent;
      }
      var approveObject = [];
      var assignAble = false;
      console.log("doapprove", assign);
      if (assign != null && assign.length > 0) {
        assignAble = true;
      }
      approveObject = {
        userId: userId,
        bill: bill,
        bpmId: bpmId,
        approveType: opinionContent,
        comment: comment,
        delegateUser: changeKey,
        activityId: activityId,
        assignAble: assignAble,
        assign: assign
      }; //回调数据
      console.log(approveObject);
      this.onBpmApprove(approveObject);
    }
    //提交审批

  }, {
    key: 'onBpmApprove',
    value: function onBpmApprove(data) {
      var dispatch = this.props.dispatch;
      var serUrl = this.state.serUrl;

      if (data.approveType == "同意") {
        dispatch((0, _bpm.bpmApprove)(serUrl, data));
      } else if (data.approveType == "改派") {
        dispatch((0, _bpm.bpmDelegate)(serUrl, data));
      } else if (data.approveType == "不同意且退回") {
        dispatch((0, _bpm.bpmDisApprove)(serUrl, data));
      } else if (data.approveType == "不同意但继续") {
        dispatch((0, _bpm.bpmApprove)(serUrl, data));
      } else if (data.approveType == "加签") {
        //dispatch(bpmDelegate(serUrl, data));
        console.log("敬请期待……");
      }
      //this.cancel();
    }

    //取消审批

  }, {
    key: 'confirm',
    value: function confirm(data) {
      this.props.closeApprove(data);
    }
  }, {
    key: 'cancel',
    value: function cancel(e) {
      var data = { method: "cancel", type: "取消" };
      if (this.props.closeApprove) {
        this.props.closeApprove(data);
      }
    }
  }, {
    key: 'onChangeUser',
    value: function onChangeUser(e, b) {
      if (e && e.id && e.name) {
        USERID = e.id;
      } else {
        _antd.message.info("未选中用户！");
      }
    }
    //审批历史

  }, {
    key: 'operateHistory',
    value: function operateHistory(e) {
      this.setState({
        showView: true
      });
    }
  }, {
    key: 'openBill',
    value: function openBill(e) {
      var bill = this.state.bill;

      this.props.onOpenBill(bill.formurl);
    }
  }, {
    key: 'viewRecord',
    value: function viewRecord() {
      this.setState({
        ViewRecord: true
      });
    }
  }, {
    key: 'closeRecord',
    value: function closeRecord(e) {
      this.setState({
        ViewRecord: false
      });
    }
  }, {
    key: 'closeHistory',
    value: function closeHistory(e) {
      this.setState({
        showView: false
      });
    }
  }, {
    key: 'viewAssign',
    value: function viewAssign() {
      this.setState({
        ViewAssign: true
      });
    }
  }, {
    key: 'closeAssign',
    value: function closeAssign() {
      this.setState({
        ViewAssign: false
      });
    }
  }, {
    key: 'comfirmAssign',
    value: function comfirmAssign(assign) {
      this.closeAssign();
      this.doApprove(assign);
    }
  }, {
    key: 'render',
    value: function render() {
      var selectData = null;
      var rejectData = null;
      var inPower = this.state.inPower;
      var addsignAble = false;
      var rejectAble = false;
      var maskLayer = "";
      var content = "";
      if (this.props.bpm && this.props.bpm.data && this.props.bpm.data.data) {
        rejectData = this.props.bpm.data.data;
        inPower = this.props.bpm.data.inPower;
        if (!inPower) {
          maskLayer = "yyui-bpm-approve-maskLayer";
          content = "yyui-bpm-content";
        } else {
          maskLayer = "";
        }
        addsignAble = this.props.bpm.data.addsignAble != null ? this.props.bpm.data.addsignAble : false;
        rejectAble = this.props.bpm.data.rejectAble != null ? this.props.bpm.data.rejectAble : false;
      }
      if (rejectData != null && rejectData.array != null) {
        var rejectArray = rejectData.array;
        selectData = [_react2.default.createElement(
          'div',
          { className: 'yyui-bpm-approve-reject' },
          _react2.default.createElement(
            'div',
            null,
            '流程将退回到'
          ),
          _react2.default.createElement(
            'div',
            { className: 'yyui-bpm-approve-reject-text yyui-bpm-approve-reject' },
            _react2.default.createElement(
              _antd.Select,
              { id: 'select', onSelect: this.selectData, style: { width: 265 } },
              _react2.default.createElement(
                Option,
                { value: "提交人" },
                '提交人'
              ),
              rejectArray.map(function (s, i) {
                return _react2.default.createElement(
                  Option,
                  { value: s.activityId },
                  s.activityName
                );
              })
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'yyui-bpm-approve-reject-text' },
            '处'
          )
        )];
      } else {
        selectData = [_react2.default.createElement(
          'div',
          { className: 'yyui-bpm-approve-reject' },
          _react2.default.createElement(
            'div',
            { className: 'yyui-bpm-approve-reject-text' },
            '流程将退回到'
          ),
          _react2.default.createElement(
            'div',
            { className: 'yyui-bpm-approve-reject-text' },
            _react2.default.createElement(
              _antd.Select,
              { id: 'select', style: { width: 265 }, onSelect: this.selectData },
              _react2.default.createElement(
                Option,
                { value: "提交人" },
                '提交人'
              )
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'yyui-bpm-approve-reject-text' },
            '处'
          )
        )];
      }
      var opinion = this.state.opinion;
      var radioText = null;
      switch (opinion) {
        case 1:
          radioText = [_react2.default.createElement(
            'div',
            null,
            '流程将继续'
          )];break;
        case 2:
          radioText = selectData;break;
        case 3:
          radioText = [_react2.default.createElement(
            'div',
            null,
            '流程继续流转,本项一般在会签时使用'
          )];break;
        case 4:
          radioText = [_react2.default.createElement(
            'div',
            { className: 'yyui-bpm-approve-delegate' },
            _react2.default.createElement(
              'div',
              { className: 'yyui-bpm-delegate-userRef' },
              '当前任务改在'
            ),
            _react2.default.createElement(
              'div',
              { className: 'yyui-bpm-delegate-userRef yyui-bpm-approve-userRef' },
              _react2.default.createElement(YYReferInput, {
                serverUrl: this.state.refUrl,
                often: true,
                multiselect: false,
                onChange: this.onChangeUser,
                refinfokey: '00023' })
            ),
            _react2.default.createElement(
              'div',
              { className: 'delegate-userRef' },
              '处'
            )
          )];break;
        case 5:
          radioText = [_react2.default.createElement(
            'div',
            null,
            '当前任务后将增 ',
            _react2.default.createElement('input', { type: 'text' }),
            ' 进行处理'
          )];break;
        default:
          radioText = [_react2.default.createElement(
            'div',
            null,
            'opinion'
          )];break;
      }
      var viewHistory = _react2.default.createElement(
        'div',
        { className: 'yyui-bpm-viewHistory' },
        this.state.showView ? _react2.default.createElement(YYViewApprove, {
          showViewApprove: this.state.showView,
          userId: this.state.userId,
          serUrl: this.state.serUrl,
          bpmId: this.state.bpmId,
          closeMethod: this.closeHistory }) : null
      );
      var viewAssign = this.state.ViewAssign ? _react2.default.createElement(YYApproveUser, { key: 'bpmAssign',
        visible: this.state.ViewAssign,
        type: "approve",
        serUrl: this.state.serUrl,
        orgId: this.state.orgId,
        bpmId: this.state.bpmId,
        userId: this.state.userId,
        close: this.closeAssign,
        comfirm: this.comfirmAssign }) : null;
      var formItemLayout = {
        labelCol: { span: 4 },
        wrapperCol: { span: 19 }
      };

      var title = [_react2.default.createElement(
        'div',
        null,
        '审批'
      )];
      var bill = this.state.bill;
      if (this.state.viewBench) {
        title = [_react2.default.createElement(
          _antd.Row,
          null,
          _react2.default.createElement(
            _antd.Col,
            { span: 8 },
            '审批'
          ),
          _react2.default.createElement(
            _antd.Col,
            { span: 8, className: 'yyui-bpm-title-proinsname', title: bill.processInsName },
            bill.processInsName
          ),
          _react2.default.createElement(
            _antd.Col,
            { span: 8, className: 'yyui-bpm-title-recvtime' },
            bill.recvTime
          )
        )];
      }
      return _react2.default.createElement(
        'div',
        { className: 'yyui-bpm-main' },
        viewHistory,
        viewAssign,
        _react2.default.createElement(
          _antd.Modal,
          { style: { top: 50 },
            title: title,
            width: 630,
            visible: this.state.showApprove,
            closable: false,
            className: 'yyui-bpm-main',
            footer: [_react2.default.createElement(
              'div',
              { className: 'yyui-bpm-footBtn' },
              _react2.default.createElement(
                'div',
                { className: 'yyui-bpm-viewHistory' },
                _react2.default.createElement(
                  'div',
                  { className: 'yyui-bpm-viewHistory-btn' },
                  _react2.default.createElement(
                    YYButton,
                    { onClick: this.operateHistory, type: 'error', icon: 'info-circle-o' },
                    '查看审批记录'
                  )
                ),
                this.state.viewBench ? _react2.default.createElement(
                  'div',
                  { className: 'yyui-bpm-viewHistory-btn' },
                  _react2.default.createElement(
                    YYButton,
                    { onClick: this.openBill, type: 'error', icon: 'info-circle-o' },
                    '单据详情'
                  )
                ) : null
              ),
              _react2.default.createElement(
                'div',
                { className: 'yyui-bpm-operateBtn' },
                _react2.default.createElement(
                  'div',
                  { className: 'yyui-bpm-cancel' },
                  _react2.default.createElement(
                    YYButton,
                    { onClick: this.cancel, 'data-id': 'cancel', type: 'default' },
                    '取消'
                  )
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'yyui-bpm-comfirm' },
                  inPower ? _react2.default.createElement(
                    YYButton,
                    { onClick: this.beforeApprove, type: 'primary' },
                    '确定'
                  ) : _react2.default.createElement(
                    YYButton,
                    { onClick: this.beforeApprove, type: 'primary', disabled: true },
                    '确定'
                  )
                )
              )
            )] },
          _react2.default.createElement(
            'div',
            { className: content },
            _react2.default.createElement(
              _reactCustomScrollbars.Scrollbars,
              { style: { height: 300 } },
              _react2.default.createElement(
                _antd.Form,
                { horizontal: true, form: this.props.form, className: 'yyui-bpm-bpmtask-form' },
                _react2.default.createElement(
                  _antd.Row,
                  null,
                  _react2.default.createElement(
                    _antd.Col,
                    { span: '23' },
                    _react2.default.createElement(
                      FormItem,
                      _extends({ className: 'yyui-bpm-form-item',
                        label: '审批意见：'
                      }, formItemLayout),
                      _react2.default.createElement(
                        RadioGroup,
                        { defaultValue: 1, onChange: this.radioOnChange, value: this.state.opinion },
                        _react2.default.createElement(
                          _antd.Radio,
                          { value: 1 },
                          '同意'
                        ),
                        _react2.default.createElement(
                          _antd.Radio,
                          { value: 2, disabled: !rejectAble },
                          '不同意且退回'
                        ),
                        _react2.default.createElement(
                          _antd.Radio,
                          { value: 3 },
                          '不同意但继续'
                        ),
                        _react2.default.createElement(
                          _antd.Radio,
                          { value: 4, disabled: !addsignAble },
                          '改派'
                        )
                      )
                    ),
                    _react2.default.createElement(
                      'div',
                      { className: 'yyui-bpm-radioText' },
                      radioText
                    )
                  )
                ),
                _react2.default.createElement('hr', { className: 'yyui-bpm-cut-off' }),
                _react2.default.createElement(
                  _antd.Row,
                  null,
                  _react2.default.createElement(
                    _antd.Col,
                    { span: '23' },
                    _react2.default.createElement(
                      FormItem,
                      _extends({ className: 'yyui-bpm-ant-form-item',
                        id: 'control-textarea',
                        label: '审批语：'
                      }, formItemLayout),
                      _react2.default.createElement(_antd.Input, { type: 'textarea', placeholder: this.state.placeholder, value: this.state.customTip, onChange: this.inputOnChange.bind(this), className: 'yyui-bpm-textarea-input', rows: '5' })
                    )
                  )
                )
              )
            )
          ),
          _react2.default.createElement('div', { className: maskLayer })
        )
      );
    }
  }]);

  return YYApprove;
}(_react2.default.Component);

;
//export default ApproveComp;
YYApprove.propTypes = propTypes;
module.exports = (0, _reactRedux.connect)(mapStateToProps)(YYApprove);