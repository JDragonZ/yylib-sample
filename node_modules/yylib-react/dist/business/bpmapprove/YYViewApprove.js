'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./bpm/styles/less/bpmviewapproveal.less');

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _antd = require('antd');

var _BPMURL = require('./bpm/url/BPMURL');

var _BPMURL2 = _interopRequireDefault(_BPMURL);

var _reactCustomScrollbars = require('react-custom-scrollbars');

var _reactRedux = require('react-redux');

var _bpm = require('./bpm/actions/bpm');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Step = _antd.Timeline.Item;
var pageSize = 5;
var mapStateToProps = function mapStateToProps(state) {
  return {
    bpm: state.bpm
  };
};
//规范属性类型
var propTypes = {
  bpmObject: _react2.default.PropTypes.object,
  dispatch: _react2.default.PropTypes.func
};

var YYViewApprove = function (_React$Component) {
  _inherits(YYViewApprove, _React$Component);

  function YYViewApprove(props) {
    _classCallCheck(this, YYViewApprove);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(YYViewApprove).call(this, props));

    _this.handleOk = _this.handleOk.bind(_this);
    _this.state = {
      visible: false,
      viewapprovealData: null,
      showHistory: null,
      bpmId: null
    };
    return _this;
  }

  _createClass(YYViewApprove, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props;
      var showViewApprove = _props.showViewApprove;
      var userId = _props.userId;
      var bpmId = _props.bpmId;
      var serUrl = _props.serUrl;

      this.setState({
        visible: showViewApprove,
        userId: userId,
        bpmId: this.props.bpmId,
        serUrl: serUrl
      });
      var start = 0;
      var data = [];
      data = { userId: userId ? userId : null, bpmId: bpmId ? bpmId : null, size: pageSize, start: start };
      var dispatch = this.props.dispatch;

      dispatch((0, _bpm.bpmViewapproveal)(serUrl, data));
    }

    //数据更新后通知此方法

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var bpm = nextProps.bpm;

      var data = null;
      var type = null;
      if (bpm && bpm.type && bpm.view) {
        type = bpm.type;
        data = bpm.view;
      }

      if (data) {
        if (data.success != undefined) {
          if (data.success) {
            if (type != null && type == "bpmviewapproveal") {
              //查看审批流
              var viewapprovealData = [];
              viewapprovealData['processInstanceId'] = this.state.bpmId;
              viewapprovealData['approveHistorys'] = data.data.array;
              viewapprovealData['total'] = data.data.total;
              viewapprovealData['processDefinitionName'] = data.data.processDefinitionName;
              this.setState({ viewapprovealData: viewapprovealData });
            }
          }
        }
      }
    }
  }, {
    key: 'handleOk',
    value: function handleOk() {
      this.props.closeMethod();
    }
  }, {
    key: 'handleCancel',
    value: function handleCancel() {
      this.props.closeMethod();
    }

    //审批历史

  }, {
    key: 'operateHistory',
    value: function operateHistory(e) {
      var flag = !this.state.showHistory;
      this.setState({ showHistory: flag });
    }
  }, {
    key: 'render',
    value: function render() {

      var viewdata = this.state.viewapprovealData ? this.state.viewapprovealData : null;
      var diagramSrc = null;
      var _props2 = this.props;
      var userId = _props2.userId;
      var serUrl = _props2.serUrl;

      var historyContent = null;
      var processInstanceId = null;
      var total = 0;
      var processDefinitionName = '流程名称';
      if (viewdata) {
        processInstanceId = viewdata.processInstanceId;
        if (processInstanceId) {
          diagramSrc = serUrl + _BPMURL2.default.BPM_VIEWAPPROVEAL_VIEWURL + "/index.html?" + "processInstanceId=" + processInstanceId + "&userId=" + userId;
        }

        historyContent = viewdata.approveHistorys;
        total = viewdata.total;
        processDefinitionName = viewdata.processDefinitionName;
      }
      var title = "查看审批流 -- " + processDefinitionName;

      var columns = [{
        title: '流程环节',
        dataIndex: 'activityName',
        width: 10,
        render: function render(text, record, index) {
          var tip = null;
          if (text != null && text.length > 85) {
            tip = text.substring(0, 82) + "...";
          } else {
            tip = text;
          }
          return _react2.default.createElement(
            'lable',
            { title: text },
            tip
          );
        }
      }, {
        title: '审批状态',
        dataIndex: 'approveState',
        width: 10,
        render: function render(text, record, index) {
          var tip = null;
          if (text != null && text.length > 85) {
            tip = text.substring(0, 82) + "...";
          } else {
            tip = text;
          }
          return _react2.default.createElement(
            'lable',
            { title: text },
            tip
          );
        }
      }, {
        title: '开始日期',
        dataIndex: 'taskStartTime',
        width: 15,
        render: function render(text, record, index) {
          var tip = null;
          if (text != null && text.length > 118) {
            tip = text.substring(0, 114) + "...";
          } else {
            tip = text;
          }
          return _react2.default.createElement(
            'lable',
            { title: text },
            tip
          );
        }
      }, {
        title: '结束日期',
        dataIndex: 'approveDatetime',
        width: 15,
        render: function render(text, record, index) {
          var tip = null;
          if (text != null && text.length > 118) {
            tip = text.substring(0, 114) + "...";
          } else {
            tip = text;
          }
          return _react2.default.createElement(
            'lable',
            { title: text },
            tip
          );
        }
      }, {
        title: '历时',
        dataIndex: 'approveDuration',
        width: 10,
        render: function render(text, record, index) {
          var tip = null;
          if (text != null && text.length > 85) {
            tip = text.substring(0, 82) + "...";
          } else {
            tip = text;
          }
          return _react2.default.createElement(
            'lable',
            { title: text },
            tip
          );
        }
      }, {
        title: '审批人',
        dataIndex: 'approveUserName',
        width: 10,
        render: function render(text, record, index) {
          var tip = null;
          if (text != null && text.length > 85) {
            tip = text.substring(0, 82) + "...";
          } else {
            tip = text;
          }
          return _react2.default.createElement(
            'lable',
            { title: text },
            tip
          );
        }
      }, {
        title: '审批语',
        dataIndex: 'approveComment',
        width: 30,
        render: function render(text, record, index) {
          var tip = null;
          if (text != null && text.length > 249) {
            tip = text.substring(0, 246) + "...";
          } else {
            tip = text;
          }
          return _react2.default.createElement(
            'lable',
            { title: text },
            tip
          );
        }
      }];

      var historyDatas = [];
      if (historyContent) {
        for (var i = 0; i < historyContent.length; i++) {
          historyDatas.push({
            key: i,
            activityName: historyContent[i].activityName,
            taskStartTime: historyContent[i].taskStartTime,
            approveState: historyContent[i].approveState,
            approveDatetime: historyContent[i].approveDatetime,
            approveDuration: historyContent[i].approveDuration,
            approveComment: historyContent[i].approveComment,
            approveUserName: historyContent[i].approveUserName,
            state: historyContent[i].state
          });
        }
      }
      var bpmId = null;
      bpmId = this.state.bpmId ? this.state.bpmId : null;
      var dispatch = this.props.dispatch;

      var pagination = {
        total: total,
        pageSize: pageSize,
        showQuickJumper: true,
        size: "small",
        onChange: function onChange(current) {
          var start = pageSize * (current - 1);
          var userId = userId;
          var data = [];
          data = { userId: userId ? userId : null, bpmId: bpmId ? bpmId : null, size: pageSize, start: start };
          dispatch((0, _bpm.bpmViewapproveal)(serUrl, data));
        }
      };
      var closable = false;
      return _react2.default.createElement(
        'div',
        { className: 'bpmviewapproveal-comp' },
        _react2.default.createElement(
          _antd.Modal,
          { width: '900', className: 'bpmviewapproveal-modal', title: title, closable: closable, visible: this.state.visible, onOk: this.handleOk.bind(this),
            footer: [_react2.default.createElement(
              _antd.Button,
              { key: 'submit', type: 'primary', size: 'large', onClick: this.handleOk.bind(this) },
              '关闭'
            )]
          },
          _react2.default.createElement(
            'div',
            { className: 'bpmvoewapproveal-content' },
            _react2.default.createElement(
              _antd.Row,
              null,
              _react2.default.createElement(
                _antd.Col,
                null,
                _react2.default.createElement(
                  'div',
                  { className: '' },
                  _react2.default.createElement('iframe', { className: 'bpmvoewapproveal-iframe', frameborder: '1', scrolling: 'yes', src: diagramSrc })
                )
              )
            ),
            _react2.default.createElement(
              _antd.Row,
              null,
              _react2.default.createElement(
                _antd.Col,
                null,
                _react2.default.createElement(
                  'div',
                  { className: '' },
                  _react2.default.createElement(
                    _reactCustomScrollbars.Scrollbars,
                    { style: { height: 200 } },
                    _react2.default.createElement(
                      _antd.Timeline,
                      null,
                      historyDatas.map(function (s, i) {
                        return s.approveState == "审批中" ? _react2.default.createElement(
                          Step,
                          { color: 'blue', className: 'yyui-bpm-view-approving' },
                          _react2.default.createElement(
                            'p',
                            null,
                            s.taskStartTime,
                            '   ',
                            "历时" + s.approveDuration
                          ),
                          _react2.default.createElement(
                            'p',
                            null,
                            s.approveUserName + " 在【" + s.activityName + "】环节，当前状态为：" + s.approveState
                          )
                        ) : _react2.default.createElement(
                          Step,
                          { color: '#c1c1c1', className: 'yyui-bpm-view-approved' },
                          _react2.default.createElement(
                            'p',
                            null,
                            s.taskStartTime,
                            '   ',
                            "历时" + s.approveDuration
                          ),
                          _react2.default.createElement(
                            'p',
                            null,
                            s.approveUserName + " 在【" + s.activityName + "】环节，当前状态为：" + (s.state == "" ? s.approveState : s.state) + "，审批意见【" + s.approveComment + "】。"
                          )
                        );
                      })
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);

  return YYViewApprove;
}(_react2.default.Component);
//export default ViewapprovealComp;


YYViewApprove.propTypes = propTypes;
module.exports = (0, _reactRedux.connect)(mapStateToProps)(YYViewApprove);