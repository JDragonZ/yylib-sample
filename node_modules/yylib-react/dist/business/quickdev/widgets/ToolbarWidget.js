'use strict';

/**
 * Created by Dio on 2016/9/3.
 */
var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui');

var YYClass = _require.YYClass;
var YYToolbar = _require.YYToolbar;
var YYButton = _require.YYButton;
/**
 *      {
            id: "query", children: "查询", type: "primary", icon: "search"
        }, {
            id: "add", children: "新增", type: "info", icon: "plus", ghost: true
        }, {
            id: "edit", children: "编辑", type: "info", icon: "edit", ghost: true
        }, {
            id: "delete", children: "删除", type: "error", icon: "delete", ghost: true
        }, {
            id: "save", children: "保存", type: "info", icon: "save", ghost: true
        }, {
            id: "cancel", children: "取消", type: "info", icon: "rollback", ghost: true
        }
 */

var ToolbarWidget = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            query: true //查询
            , add: true //新增
            , delete: true //删除
            , edit: true //编辑
            , view: true // 查看
        };
    },
    statics: {
        defaultChildren: {
            query: {
                id: "query", uitype: 'YYButton', children: "查询", type: "primary", icon: "search", ghost: false, uititle: '查询'
            },
            add: {
                id: "add", uitype: 'YYButton', children: "新增", type: "info", icon: "plus", ghost: true, uititle: '新增'
            },
            edit: {
                id: "edit", uitype: 'YYButton', children: "编辑", type: "info", icon: "edit", ghost: true, uititle: '编辑'
            },
            delete: {
                id: "delete", uitype: 'YYButton', children: "删除", type: "error", icon: "delete", ghost: true, uititle: '删除'
            },
            view: {
                id: "view", uitype: 'YYButton', children: "查看", type: "info", icon: "eye-o", ghost: true, uititle: '查看'
            }
        }
    },
    renderContent: function renderContent() {
        var contentView = [];
        var items = this.constructor.defaultChildren;
        for (var key in this.props) {
            if (this.constructor.defaultChildren[key] && this.props[key] == true) {
                contentView.push(React.createElement(
                    YYButton,
                    {
                        id: items[key].key,
                        type: items[key].type,
                        icon: items[key].icon,
                        ghost: items[key].ghost
                    },
                    items[key].children
                ));
            }
        }
        return contentView;
    },
    render: function render() {
        return React.createElement(
            YYToolbar,
            null,
            this.renderContent()
        );
    }
});
module.exports = ToolbarWidget;