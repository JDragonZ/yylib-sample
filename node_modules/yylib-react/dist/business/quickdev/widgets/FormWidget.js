'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui');

var YYClass = _require.YYClass;
var YYForm = _require.YYForm;
var YYInput = _require.YYInput;
var YYFormItem = _require.YYFormItem;
var YYRow = _require.YYRow;
var YYCol = _require.YYCol;


var FormWidget = YYClass.create({
    _generateChunks: function _generateChunks(children, colnumber) {
        // [[0,0],1,[0,0],[0],1,[0,0],[0,0],1,[0,0]]
        // [2,6,11]
        var separate = []; //分隔位置
        if (_.isArray(children)) {
            _.forEach(children, function (childItem, childIndex) {
                if (childItem.props && childItem.props.newline) {
                    separate.push(childIndex);
                }
            });
        }
        var chunks = [];
        var sepLength = separate.length;
        if (sepLength) {
            _.forEach(separate, function (separateItem, separateIndex) {
                //在分隔之间的数据块
                var prevIdx = separateIndex === 0 ? -1 : separate[--separateIndex];

                chunks = chunks.concat(_.chunk(children.slice(++prevIdx, separateItem), colnumber));
                chunks.push(children[separateItem]);
            });
            var lastIdx = ++separate[--sepLength]; //在最后剩余的数据块
            chunks = chunks.concat(_.chunk(children.slice(lastIdx), colnumber));
        } else {
            chunks = _.chunk(children, colnumber);
        }
        return chunks;
    },
    _renderChildren: function _renderChildren(children, colnumber) {
        var _this = this;
        var rowGroup = [];
        var chunks = this._generateChunks(children, colnumber); //[[],{},[],{}]
        _.forEach(chunks, function (rowChild, rowIndex) {
            if (_.isArray(rowChild) && rowChild.length) {
                var colGroup = _.map(rowChild, function (colChild, colIndex) {
                    return React.createElement(
                        YYCol,
                        { key: colIndex, span: Math.floor(24 / colnumber) },
                        React.cloneElement(colChild, { form: _this.props.form, formLabelCol: _this.props.labelCol, formWrapperCol: _this.props.wrapperCol })
                    );
                });
                rowGroup.push(React.createElement(
                    YYRow,
                    null,
                    colGroup
                ));
            } else {
                rowGroup.push(React.createElement(
                    YYRow,
                    null,
                    React.createElement(
                        YYCol,
                        { span: '24' },
                        rowChild
                    )
                ));
            }
        });
        return rowGroup;
    },
    render: function render() {
        var _props = this.props;
        var children = _props.children;
        var colnumber = _props.colnumber;


        return React.createElement(
            YYForm,
            _extends({}, this.props, { form: null }),
            this._renderChildren(children, colnumber)
        );
    }
});

FormWidget = YYForm.create()(FormWidget);
module.exports = FormWidget;