'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui');

var YYClass = _require.YYClass;
var YYFormItem = _require.YYFormItem;
var YYInput = _require.YYInput;
var YYSelect = _require.YYSelect;
var YYOption = _require.YYOption;
var YYInputNumber = _require.YYInputNumber;
var YYDatePicker = _require.YYDatePicker;
var YYTextarea = _require.YYTextarea;
var YYReferInput = _require.YYReferInput;
var YYSwitch = _require.YYSwitch;

var FormItemType = require('./FormItemType');
function getVerifyProps(props, state) {
    var getFieldProps = props.form && props.form.getFieldProps;
    var passProps = {}; //只有在外部有YYForm的情况下才提供校验
    if (getFieldProps && props.uikey) {
        var rules = []; //验证规则
        if (props.required && props.uititle) {
            //必填验证
            rules.push({ required: props.required, message: props.uititle + '为必填项' });
        }
        //正则验证
        if (props.pattern) {
            try {
                rules.push({ pattern: new RegExp(props.pattern), message: props.patternMsg });
            } catch (error) {
                console.log('RegExp has error!!!');
            }
        }
        if (_.isArray(state.rules) && state.rules.length) {
            rules = rules.concat(state.rules);
        }
        var options = {};
        if (props.defaultValue) {
            //设置默认值
            options.initialValue = props.defaultValue;
        }
        if (rules.length) {
            options.rules = rules;
        }
        passProps = getFieldProps(props.uikey, options);
    }
    return passProps;
}

function renderInput(props, state) {
    var inputProps = {};
    if (props.maxlength) {
        inputProps.maxlength = props.maxlength;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(YYInput, _extends({}, inputProps, passProps));
}

function renderIptHidden(props, state) {
    var passProps = {};
    var getFieldProps = props.form && props.form.getFieldProps;
    if (getFieldProps && props.uikey) {
        passProps = getFieldProps(props.uikey);
    }
    return React.createElement(YYInput, _extends({ type: 'hidden' }, passProps));
}

function renderSelect(props, state) {
    var selectProps = {};
    if (props.children) {
        selectProps.items = _.map(props.children, function (child) {
            return {
                value: child.props.value,
                text: child.props.text
            };
        });
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(YYSelect, _extends({}, selectProps, passProps));
}

function renderIptRefer(props, state) {
    var referProps = {};
    if (props.refinfokey) {
        referProps.refinfokey = props.refinfokey;
    }
    if (props.serverUrl) {
        referProps.serverUrl = props.serverUrl;
    }
    if (props.multiselect) {
        referProps.multiselect = props.multiselect;
    }
    if (props.often) {
        referProps.often = props.often;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(YYReferInput, _extends({}, referProps, passProps));
}

function renderDate(props, state) {
    var dateProps = {};
    if (props.format) {
        dateProps.format = props.format;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(YYDatePicker, _extends({}, dateProps, passProps));
}

function renderNumber(props, state) {
    var numProps = {};
    if (props.min) {
        numProps.min = props.min;
    }
    if (props.max) {
        numProps.max = props.max;
    }
    if (props.type) {
        numProps.type = props.type;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(YYInputNumber, _extends({}, numProps, passProps));
}

function renderTextarea(props, state) {
    var textProps = {};
    if (props.autosize) {
        textProps.autosize = props.autosize;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(YYTextarea, _extends({}, textProps, passProps));
}

function renderSwitch(props, state) {
    var switchProps = {};
    if (props.checked) {
        switchProps.defaultChecked = props.checked;
    }
    if (props.checkedChildren) {
        switchProps.checkedChildren = props.checkedChildren;
    }
    if (props.unCheckedChildren) {
        switchProps.unCheckedChildren = props.unCheckedChildren;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(YYSwitch, _extends({}, switchProps, passProps));
}

var FormItemWidget = YYClass.create({
    getInitialState: function getInitialState() {
        return {
            rules: this.props.rules || []
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps.rules && !_.isEqual(nextProps.rules, this.state.rules)) {
            this.setState({ rules: nextProps.rules });
        }
    },
    //动态设置验证规则
    setRules: function setRules(rules) {
        this.setState({ rules: rules });
    },
    _renderContent: function _renderContent(uitype, children) {
        var props = this.props;
        var state = this.state;
        switch (uitype) {
            case FormItemType.input:
                {
                    return renderInput(props, state);
                }
            case FormItemType.inputhidden:
                {
                    return renderIptHidden(props, state);
                }
            case FormItemType.select:
                {
                    return renderSelect(props, state);
                }
            case FormItemType.inputrefer:
                {
                    return renderIptRefer(props, state);
                }
            case FormItemType.date:
                {
                    return renderDate(props, state);
                }
            case FormItemType.number:
                {
                    return renderNumber(props, state);
                }
            case FormItemType.textarea:
                {
                    return renderTextarea(props, state);
                }
            case FormItemType.switch:
                {
                    return renderSwitch(props, state);
                }
            case FormItemType.enumselect:
                {
                    //TODO
                }
            default:
                return null;
        }
    },
    getFormItemCol: function getFormItemCol(attr) {
        var _props = this.props;
        var labelCol = _props.labelCol;
        var formLabelCol = _props.formLabelCol;
        var wrapperCol = _props.wrapperCol;
        var formWrapperCol = _props.formWrapperCol;

        if (attr === 'label') {
            if (labelCol) {
                //自身的
                return labelCol;
            } else if (formLabelCol) {
                //form传下来的
                return formLabelCol;
            } else {
                return { span: 6 }; //都未定义的
            }
        } else if (attr === 'wrapper') {
            if (wrapperCol) {
                return wrapperCol;
            } else if (formWrapperCol) {
                return formWrapperCol;
            } else {
                return { span: 14 };
            }
        }
    },
    render: function render() {
        var _props2 = this.props;
        var className = _props2.className;
        var extra = _props2.extra;
        var hasFeedback = _props2.hasFeedback;
        var help = _props2.help;
        var label = _props2.label;
        var required = _props2.required;
        var uitype = _props2.uitype;
        var validateStatus = _props2.validateStatus;

        return React.createElement(
            YYFormItem,
            {
                label: label,
                help: help,
                extra: extra,
                className: className,
                required: required,
                labelCol: this.getFormItemCol('label'),
                wrapperCol: this.getFormItemCol('wrapper'),
                hasFeedback: hasFeedback,
                validateStatus: validateStatus },
            this._renderContent(this.props.uisubtype, this.props.children)
        );
    }
});

module.exports = FormItemWidget;