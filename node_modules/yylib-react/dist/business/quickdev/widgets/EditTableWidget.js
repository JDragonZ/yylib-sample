'use strict';

var _YYClass$create;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui');

var YYClass = _require.YYClass;
var YYPage = _require.YYPage;
var YYToolbar = _require.YYToolbar;
var YYEditTable = _require.YYEditTable;
var YYButton = _require.YYButton;
var YYDatePicker = _require.YYDatePicker;
var YYCheckbox = _require.YYCheckbox;
var YYTextarea = _require.YYTextarea;
var YYSwitch = _require.YYSwitch;
var YYIcon = _require.YYIcon;
var YYSelect = _require.YYSelect;
var YYOption = _require.YYOption;
var YYInput = _require.YYInput;
var YYInputNumber = _require.YYInputNumber;
var YYReferInput = _require.YYReferInput;

var formatUtils = require('yylib-utils/formatUtils');
var FormItemType = require('./FormItemType');
// 更改单元格数据 rowData-行数据、index-行索引、dataIndex-列索引名、event-事件对象或者值、datestr-日期控件返回的字符串值
function onCellChange(rowData, index, dataIndex, event, datestr) {
    //获取修改后的单元格数据，注意：此处依据输入类型不同，取值行为需要进行对应调整（如：参照、勾选、输入框等），通过dataIndex可判断当前是哪列，即可明确取值行为。
    var newVal = event && event.target ? event.target.value : event;
    //日期控件返回的格式为Date对象，所以需要取后面的参数值
    if (newVal instanceof Date) newVal = datestr;
    this.saveCell(index, dataIndex, newVal); //修改指定单元格的值，此方法由YYEditTable提供
}

function renderInput(props, value, rowData, index) {
    var inputProps = {};
    if (props && props.maxlength) {
        inputProps.maxlength = props.maxlength;
    }
    if (props && props.defaultValue) {
        inputProps.defaultValue = props.defaultValue;
    }
    if (rowData.isEdit) {
        //编辑态显示
        return React.createElement(YYInput, _extends({}, inputProps, { defaultValue: value, onChange: onCellChange.bind(this, rowData, index, props.dataIndex) }));
    } else {
        //非编辑态显示
        return React.createElement(
            'span',
            null,
            value
        );
    }
}
function renderSelect(props, value, rowData, index) {
    var selectProps = {};
    if (props && props.children) {
        selectProps.items = _.map(props.children, function (child) {
            return {
                value: child.props.value,
                text: child.props.text
            };
        });
    }
    if (rowData.isEdit) {
        //编辑态显示
        return React.createElement(YYSelect, _extends({}, selectProps, { defaultValue: value, style: { width: 120 }, onChange: onCellChange.bind(this, rowData, index, props.dataIndex) }));
    } else {
        //非编辑态显示
        var curOption = _.filter(props.children, function (option) {
            return option.value === value;
        });
        if (curOption.length) {
            return React.createElement(
                'span',
                null,
                curOption[0].text
            );
        }
    }
}
function renderInputRefer(props, value, rowData, index) {
    var referProps = {};
    if (props && props.refinfokey) {
        referProps.refinfokey = props.refinfokey;
    }
    if (props && props.serverUrl) {
        referProps.serverUrl = props.serverUrl;
    }
    if (props && props.multiselect) {
        referProps.multiselect = props.multiselect;
    }
    if (props && props.often) {
        referProps.often = props.often;
    }
    if (rowData.isEdit) {
        //编辑态显示
        return React.createElement(YYReferInput, _extends({}, referProps, {
            defaultValue: value,
            onChange: onCellChange.bind(this, rowData, index, props.dataIndex) }));
    } else {
        //非编辑态显示
        return value ? value.name : '';
    }
}
function renderDate(props, value, rowData, index) {
    var dateProps = {};
    if (props && props.format) {
        dateProps.format = props.format;
    }
    if (rowData.isEdit) {
        //编辑态显示
        return React.createElement(YYDatePicker, _extends({}, dateProps, { defaultValue: value, onChange: onCellChange.bind(this, rowData, index, props.dataIndex) }));
    } else {
        //非编辑态显示
        return formatUtils.formatDate(value, 'yyyy-MM-dd');
    }
}
function renderNumber(props, value, rowData, index) {
    var numProps = {};
    if (props && props.min) {
        numProps.min = props.min;
    }
    if (props && props.max) {
        numProps.max = props.max;
    }
    if (rowData.isEdit) {
        //编辑态显示
        return React.createElement(YYInputNumber, _extends({}, numProps, { defaultValue: value, onChange: onCellChange.bind(this, rowData, index, props.dataIndex) }));
    } else {
        //非编辑态显示
        return React.createElement(
            'span',
            null,
            value
        );
    }
}
function renderTextarea(props, value, rowData, index) {
    var textProps = {};
    if (props && props.autosize) {
        textProps.autosize = props.autosize;
    }
    if (rowData.isEdit) {
        //编辑态显示
        return React.createElement(YYTextarea, _extends({}, textProps, { defaultValue: value, onChange: onCellChange.bind(this, rowData, index, props.dataIndex) }));
    } else {
        //非编辑态显示
        return React.createElement(
            'span',
            null,
            value
        );
    }
}
function renderSwitch(props, value, rowData, index) {
    var switchProps = {};
    if (props && props.checked) {
        switchProps.defaultChecked = props.checked;
    }
    if (props && props.checkedChildren) {
        switchProps.checkedChildren = props.checkedChildren;
    }
    if (props && props.unCheckedChildren) {
        switchProps.unCheckedChildren = props.unCheckedChildren;
    }
    if (rowData.isEdit) {
        //编辑态显示
        return React.createElement(YYSwitch, _extends({}, switchProps, { defaultChecked: value, onChange: onCellChange.bind(this, rowData, index, props.dataIndex) }));
    } else {
        //非编辑态显示
        if (value) {
            return '启用';
        } else {
            return '停用';
        }
    }
}
function addRenderProp(props, value, rowData, index) {
    switch (props.uisubtype) {
        case FormItemType.input:
            return renderInput.call(this, props, value, rowData, index);
        case FormItemType.select:
            return renderSelect.call(this, props, value, rowData, index); //选项
        case FormItemType.number:
            return renderNumber.call(this, props, value, rowData, index);
        case FormItemType.inputrefer:
            return renderInputRefer.call(this, props, value, rowData, index);
        case FormItemType.date:
            return renderDate.call(this, props, value, rowData, index);
        case FormItemType.textarea:
            return renderTextarea.call(this, props, value, rowData, index);
        case FormItemType.switch:
            return renderSwitch.call(this, props, value, rowData, index);
        case FormItemType.enumselect:
        //TODO
        default:
            return renderInput.call(this, props, value, rowData, index);
    }
}

//可编辑表格模板页面
var EditTableWidget = YYClass.create((_YYClass$create = {
    //添加一行数据到首行
    addRow: function addRow(rowData, callback) {
        this.refs.editTableWidget.addRow(rowData, callback);
    },
    //添加一行数据到尾行
    addRowLast: function addRowLast(rowData, callback) {
        this.refs.editTableWidget.addRowLast(rowData, callback);
    },
    //将指定行启用为编辑
    editRow: function editRow(rowIndex) {
        this.refs.editTableWidget.editRow(rowIndex);
    },
    //删除指定的行数据
    delRow: function delRow(rowKey, callback) {
        this.refs.editTableWidget.delRow(rowKey, callback);
    },
    //获取当前全部行数据
    getRowData: function getRowData() {
        return this.refs.editTableWidget.getRowData();
    },
    //获取当前选中的行keys
    getSelectedRowKeys: function getSelectedRowKeys() {
        return this.refs.editTableWidget.getSelectedRowKeys();
    }
}, _defineProperty(_YYClass$create, 'editRow', function editRow(rowIndex) {
    this.refs.editTableWidget.editRow(rowIndex);
}), _defineProperty(_YYClass$create, 'saveRow', function saveRow(rowIndex, rowData, callback) {
    this.refs.editTableWidget.saveRow(rowIndex, rowData, callback);
}), _defineProperty(_YYClass$create, 'saveCell', function saveCell(rowIndex, dataIndex, cellValue, callback) {
    this.refs.editTableWidget.saveCell(rowIndex, dataIndex, cellValue, callback);
}), _defineProperty(_YYClass$create, '_renderColumns', function _renderColumns() {
    var columns = [];
    var _this = this;
    var children = this.props.children;
    if (children) {
        children = React.Children.toArray(children);
        if (_.isArray(children) && children.length > 0) {
            children.forEach(function (child) {
                if (child.type.prototype.uiMeta.name == 'edititemw') {
                    var column = _.assign({}, child.props, {
                        render: function render(value, rowData, index) {
                            return addRenderProp.call(this, child.props, value, rowData, index);
                        }
                    });
                    columns.push(column);
                }
            });
        }
    }
    return columns;
}), _defineProperty(_YYClass$create, 'shouldComponentUpdate', function shouldComponentUpdate(nextProps, nextState) {
    if (!_.isEqual(nextProps.children, this.props.children)) {
        return true;
    }
}), _defineProperty(_YYClass$create, 'render', function render() {
    var columns = this._renderColumns(this.props.children);
    var props = {};
    if (this.props.className) {
        props.className = this.props.className;
    }
    if (this.props.rowKey) {
        props.rowKey = this.props.rowKey;
    }
    return React.createElement(YYEditTable, _extends({}, props, { ref: 'editTableWidget', columns: columns }));
}), _YYClass$create));
module.exports = EditTableWidget;