'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui');

var YYClass = _require.YYClass;
var YYTable = _require.YYTable;
var YYMessage = _require.YYMessage;
var YYModal = _require.YYModal;

var ajax = require('yylib-utils/ajax');
var REST_QUERY = "/common/findJsonArrayPage";
var REST_DELETE = "/common/batchdelete";
var TableWidget = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            queryUrl: null, //分页查询请求的URL
            queryParam: null, //分页查询请求的附加参数
            deleteUrl: null, //删除行数据请求的URL
            deleteParam: null };
    },
    getInitialState: function getInitialState() {
        return {
            loading: false, rowSelection: this._rowSelection(), pagination: this._pagination()
        };
    },
    _getBaseUrl: function _getBaseUrl() {
        var dataprops = this.props.dataprops;

        if (dataprops && dataprops.system && dataprops.system.baseUrl && dataprops.system.systemName) {
            return dataprops.system.baseUrl + dataprops.system.systemName;
        }
    },
    _getEntityName: function _getEntityName() {
        var dataprops = this.props.dataprops;

        if (dataprops && dataprops.entity && dataprops.entity.entityFullName) {
            return dataprops.entity.entityFullName;
        }
    },
    _rowSelection: function _rowSelection() {
        var that = this;
        var rowSelection = {
            selectedRowKeys: []
        };
        //行勾选变更时的配置
        rowSelection.onChange = function (selectedRowKeys, selectedRows) {
            that.state.rowSelection.selectedRowKeys = selectedRowKeys;
            that.setState();
        };
        return rowSelection;
    },
    _pagination: function _pagination() {
        var that = this;
        //分页的相关配置
        var pagination = {
            current: 1,
            pageSize: YYTable.getDefaultPageSize(that.props.key)
        };
        //当跳转页码时
        pagination.onChange = function (current) {
            that.state.pagination.current = current;
            that.queryData();
        };
        //当每页显示数发生变更时
        pagination.onShowSizeChange = function (current, pageSize) {
            that.state.pagination.current = current;
            that.state.pagination.pageSize = pageSize;
            that.queryData();
        };
        return pagination;
    },
    queryData: function queryData() {
        var _props = this.props;
        var queryUrl = _props.queryUrl;
        var queryParam = _props.queryParam;
        var children = _props.children;

        var that = this;
        var _params = {};
        //_params.sort = [];
        //查询接口URL
        var _url = queryUrl ? queryUrl : this._getBaseUrl() ? this._getBaseUrl() + "/common/findJsonArrayPage" : null;
        var pagination = this.state.pagination;
        //分页查询参数

        var pageNumber = pagination.current;
        var pageSize = pagination.pageSize;
        //需要查询的对象
        var entityName = this._getEntityName();
        if (entityName) _params.entityName = entityName;
        //需要查询的字段
        var properties = [];
        _.forEach(children, function (column) {
            if (React.isValidElement(column)) {
                properties.push(column.props.dataIndex);
            } else {
                properties.push(column.dataIndex);
            }
        });
        _params = _.assign(_params, {
            properties: properties,
            pageNumber: pageNumber - 1,
            pageSize: pageSize
        }, queryParam);
        if (!_url) return;
        this.setState({ loading: true }); //开启遮罩
        //执行查询
        ajax.postJSON(_url, _params, function (result) {
            if (result && result.success) {
                var dataSource = result.backData;
                //本页数据
                that.state.dataSource = dataSource.content;
                //分页数据
                that.state.pagination.current = dataSource.number + 1;
                that.state.pagination.total = dataSource.totalElements;
                that.state.pagination.pageSize = dataSource.size;
                //关闭遮罩
                that.state.loading = false;
                that.setState();
            }
        }, function () {
            YYMessage.error('查询数据失败');
            //关闭遮罩
            that.state.loading = false;
            that.setState();
        });
    },
    componentDidMount: function componentDidMount() {
        this.queryData(); //初始化查询数据
    },
    deleteData: function deleteData() {
        var _props2 = this.props;
        var deleteUrl = _props2.deleteUrl;
        var deleteParam = _props2.deleteParam;
        var rowSelection = this.state.rowSelection;

        var that = this;
        //获取行勾选的数据键值
        var ids = rowSelection.selectedRowKeys;
        if (ids && ids.length) {
            var confirmOk = function confirmOk() {
                var _params = { ids: ids };
                //需要删除的对象
                var entityName = that._getEntityName();
                if (entityName) _params.entityName = entityName;
                _params = _.assign(_params, deleteParam);
                //删除接口URL
                var _url = deleteUrl ? deleteUrl : that._getBaseUrl() + "/common/batchdelete";
                if (!_url) return;
                //执行删除
                ajax.postJSON(_url, _params, function (result) {
                    if (result && result.success) {
                        //删除成功
                        //清除历史勾选项
                        that.state.rowSelection.selectedRowKeys = [];
                        //重新刷新列表
                        that.queryData();
                    }
                }, function () {
                    YYMessage.error('数据删除失败');
                });
            };

            ;
            YYModal.confirm({
                title: '删除确认',
                content: '您确定要删除这' + ids.length + '行数据?',
                onOk: confirmOk
            });
        } else {
            YYMessage.error('请勾选需要删除的数据');
        }
    },
    render: function render() {
        return React.createElement(YYTable, _extends({}, this.props, { dataSource: this.state.dataSource, loading: this.state.loading, rowSelection: this.state.rowSelection, pagination: this.state.pagination }));
    }
});

module.exports = TableWidget;