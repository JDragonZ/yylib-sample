'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by Dio on 2016/9/3.
 */
var React = require('react');
var _ = require('lodash');
var DefaultParser = require('./DefaultParser');
var DefaultHandler = require('./DefaultHandler');
var TreeUtils = require('../../utils/TreeUtils');
var ViewMeta = require('./ViewMeta');

var YYCreateView = React.createClass({
    displayName: 'YYCreateView',

    getDefaultProps: function getDefaultProps() {
        return {
            uiMeta: null, //UI元数据
            uiParser: null, //UI组件解析器
            uiEvent: null //UI事件处理器
        };
    },
    getInitialState: function getInitialState() {
        var uiParser = this._processUIParser(this.props.uiParser);
        var uiEvent = this._processUIEvent(this.props.uiEvent);
        var uiMeta = this._processUIMeta(this.props.uiMeta);
        return {
            uiMeta: uiMeta, uiParser: uiParser, uiEvent: uiEvent,
            refreshTime: 0 //记录刷新次数
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('uiParser' in nextProps || 'uiParser' in nextProps || 'uiParser' in nextProps) {
            var uiParser = this._processUIParser(nextProps.uiParser);
            var uiEvent = this._processUIEvent(nextProps.uiEvent);
            var uiMeta = this._processUIMeta(nextProps.uiMeta);
            this.setState({
                uiMeta: uiMeta, uiParser: uiParser, uiEvent: uiEvent,
                refreshTime: this.state.refreshTime + 1
            });
        }
    }
    //性能优化，只有当refreshTime发生变更时才触发执行render方法
    ,
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return this.state.refreshTime != nextState.refreshTime;
    },
    componentWillMount: function componentWillMount() {
        //console.log('YYCreateView will mount');
        var _state = this.state;
        var uiMeta = _state.uiMeta;
        var uiEvent = _state.uiEvent;

        this._callEvent('onViewWillMount', { uiMeta: uiMeta, uiEvent: uiEvent });
    },
    componentDidMount: function componentDidMount() {
        //console.log('YYCreateView did mount');
        var _state2 = this.state;
        var uiMeta = _state2.uiMeta;
        var uiEvent = _state2.uiEvent;

        this._callEvent('onViewDidMount', { uiMeta: uiMeta, uiEvent: uiEvent });
    },
    componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
        //console.log('YYCreateView will update');
        var uiMeta = nextState.uiMeta;
        var uiEvent = nextState.uiEvent;

        this._callEvent('onViewWillUpdate', { uiMeta: uiMeta, uiEvent: uiEvent });
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        //console.log('YYCreateView did update');
        var uiMeta = prevState.uiMeta;
        var uiEvent = prevState.uiEvent;

        this._callEvent('onViewDidUpdate', { uiMeta: uiMeta, uiEvent: uiEvent });
    }
    //回调指定的事件
    , _callEvent: function _callEvent(eventName, _ref) {
        var uiMeta = _ref.uiMeta;
        var uiEvent = _ref.uiEvent;

        if (!uiMeta || !uiEvent) return;
        for (var uikey in uiEvent) {
            var itemEvents = uiEvent[uikey];
            if (itemEvents && _.isFunction(itemEvents[eventName])) {
                var itemUI = this.findUI(uikey); //匹配到组件才调用事件
                if (itemUI) {
                    var _itemUI = itemEvents[eventName].call(this, { uiMeta: uiMeta, item: itemUI });
                    if (_itemUI) itemUI = _itemUI;
                }
            }
        }
    }
    ////处理onReady回调
    //,_processOnReady:function(){
    //    //console.log('on processOnReady');
    //    //执行onReady回调
    //    var {uiMeta,uiEvent} = this.state;
    //    if(!uiMeta||!uiEvent)return;
    //    for(var uikey in uiEvent){
    //        var itemEvents = uiEvent[uikey];
    //        if(itemEvents&&_.isFunction(itemEvents['onViewReady'])){
    //            var itemUI = this.findUI(uikey);
    //            if(itemUI)itemEvents['onViewReady'].call(this,itemUI);
    //        }
    //    }
    //}
    //,_processOnViewDidMount:function(){
    //    var that = this;
    //    var {uiMeta,uiEvent} = this.state;
    //TreeUtils.loopAll([uiMeta],function(item,index,pos){
    //    //解析视图事件
    //    var itemEvents = null;
    //    if(item&&item.uikey&&uiEvent){
    //        itemEvents = uiEvent[item.uikey];
    //    }
    //    //解析时的回调事件-onViewInit
    //    if(itemEvents&&_.isFunction(itemEvents['onViewInit'])){
    //        var _itemUI = itemEvents['onViewInit'].call(that,item);
    //        if(_itemUI)item = _itemUI;
    //    }
    //});
    //var {uiMeta,uiEvent} = this.state;
    //if(!uiMeta||!uiEvent)return;
    //for(var uikey in uiEvent){
    //    var itemEvents = uiEvent[uikey];
    //    if(itemEvents&&_.isFunction(itemEvents['onViewInit'])){
    //        var itemUI = this.findUI(uikey);
    //        if(itemUI)itemEvents['onViewInit'].call(this,itemUI);
    //    }
    //}
    //}
    //元数据助手方法
    , _processUIMeta: function _processUIMeta(uiMeta) {
        var _uiMeta = uiMeta;
        return _uiMeta;
    }
    //解析器助手方法
    , _processUIParser: function _processUIParser(uiParser) {
        var _uiParser = _.assign({}, DefaultParser, uiParser);
        return _uiParser;
    }
    //事件助手方法
    , _processUIEvent: function _processUIEvent(uiEvent) {
        //注意此次需要克隆，以防止引用共享
        var copyDefault = _.cloneDeep(DefaultHandler);
        var copyUiEvent = _.cloneDeep(uiEvent);
        var _uiEvent = _.assign(copyDefault, copyUiEvent);
        for (var uikey in _uiEvent) {
            var itemEvents = _uiEvent[uikey];
            for (var name in itemEvents) {
                itemEvents[name] = itemEvents[name].bind(this);
            }
        }
        return _uiEvent;
    }
    /**
     * 刷新页面
     */
    , refresh: function refresh(callback) {
        this.setState({ refreshTime: this.state.refreshTime + 1 }, callback);
    }
    /**
     * 获取当前页面
     */
    , getPage: function getPage() {
        var that = this;
        return that;
    }
    /**
     * 路由到指定页面
     * @param url   路由路径
     * @param params 路由附加的参数
     */
    , routeTo: function routeTo(url, params) {
        if (!this.props.router) {
            console.error('调用routeTo失败,router不存在');return;
        }
        var location = {};
        if (url) location.pathname = url;
        if (params) location.state = params;
        //this.props.history.push(url,_params);
        // this.props.history.push(location);
        this.props.router.push(location); // Router版本升级修改
    }
    /**
     * 获取路由传递的参数值
     */
    , getRouteParams: function getRouteParams() {
        if (!this.props.location) {
            console.error('调用getRouteParams失败,location不存在');return;
        }
        return _.isEmpty(this.props.location.state) ? null : this.props.location.state;
    }
    /**
     * 获取路由传递的URL参数值（直接链接在URL的?后面的参数列表）
     */
    , getRouteQuery: function getRouteQuery() {
        if (!this.props.location) {
            console.error('调用getRouteQuery失败,location不存在');return;
        }
        return _.isEmpty(this.props.location.query) ? null : this.props.location.query;
    }
    /**
     * 返回前一个页面
     */
    , goBack: function goBack() {
        if (!this.props.router) {
            console.error('调用goBack失败,router不存在');return;
        }
        this.props.router.go(-2);
    }
    /**
     * 通过键值查找UI数据模型
     * @param uikey
     */
    , findUI: function findUI(uikey) {
        if (this.state.uiMeta) {
            var results = TreeUtils.findWithPropName([this.state.uiMeta], 'uikey', uikey, true, true);
            if (results && results.length > 0) {
                results[0].api = this._findComp(results[0].nid); //扩展API对象
                return results[0];
            }
        }
        return null;
    },
    _findComp: function _findComp(ref) {
        return ref && this.refs[ref] ? this.refs[ref] : null;
    }
    /**
     * 通过键值查找UI组件实例
     * @param uikey
     */
    , findComp: function findComp(uikey) {
        if (this.state.uiMeta) {
            var results = TreeUtils.findWithPropName([this.state.uiMeta], 'uikey', uikey, true, true);
            return this._findComp(results.length > 0 ? results[0].nid : null);
        }
        return null;
    }
    //获取解析后的视图
    , _getViewContent: function _getViewContent(options) {
        //console.log('第'+this.state.refreshTime+'次进行视图解析');
        var uiMeta = options.uiMeta;
        var uiEvent = options.uiEvent;
        var uiParser = options.uiParser;

        var views = uiMeta ? this._processViews([uiMeta], uiEvent, uiParser) : null;
        return views && views.length > 0 ? views[0] : null;
    }
    //解析视图
    , _processViews: function _processViews(items, uiEvent, uiParser) {
        if (!_.isArray(items)) return null;
        var views = [];
        var that = this;
        for (var i = 0; i < items.length; i++) {
            var itemUI = items[i];
            if (!itemUI || _.isEmpty(itemUI)) continue;
            //解析子视图
            var childView = itemUI.children;
            var doEachChild = _.isArray(itemUI.children);
            if (doEachChild) {
                childView = this._processViews(itemUI.children, uiEvent, uiParser);
            }
            //解析视图事件
            var itemEvents = null;
            if (itemUI.uikey && uiEvent) {
                itemEvents = uiEvent[itemUI.uikey];
            }
            ////解析前的回调事件
            //if(itemEvents&&_.isFunction(itemEvents['onParserBefore'])){
            //    var _itemUI = itemEvents['onParserBefore'].call(that,itemUI);
            //    if(_itemUI)itemUI = _itemUI;
            //}
            //解析当前组件
            var UIComponent = itemUI.uitype ? uiParser[itemUI.uitype] : null;
            //清理掉API对象
            delete itemUI.api;
            //添加到视图集合，当uidisabled==true时，则不进行组件解析，返回原始数据。
            if (itemUI.uidisabled == true) {
                //不进行组件解析
                views.push(itemUI);
            } else if (UIComponent) {
                //存在相关组件解析器
                //将当前UI元数据绑定到组件的ui属性
                var itemView = React.createElement(UIComponent, _extends({}, itemUI, { ref: itemUI.nid }, itemEvents, { children: childView }));
                ////解析后的回调事件
                //if(itemEvents&&_.isFunction(itemEvents['onParserAfter'])){
                //    var _itemView = itemEvents['onParserAfter'].call(that,itemUI,itemView);
                //    if(_itemView)itemView = _itemView;
                //}
                views.push(itemView);
            } else {
                //不存在相关组件解析器则返回包含元数据的空视图组件
                var viewMeta = React.createElement(ViewMeta, itemUI);
                views.push(viewMeta);
            }
        }
        return views;
    },
    render: function render() {
        var _state3 = this.state;
        var uiMeta = _state3.uiMeta;
        var uiParser = _state3.uiParser;
        var uiEvent = _state3.uiEvent;
        //获取解析后的视图

        var viewContent = this._getViewContent({ uiMeta: uiMeta, uiParser: uiParser, uiEvent: uiEvent });
        return viewContent;
    }
});
module.exports = YYCreateView;