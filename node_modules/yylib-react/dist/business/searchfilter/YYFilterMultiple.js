'use strict';

/*
 * 筛选栏-复选框组件
 * 动态响应用户在界面上选中的项，给选中项对应的字段赋值
 */
var React = require('react');

var _require = require('yylib-ui');

var YYClass = _require.YYClass;
var YYCheckbox = _require.YYCheckbox;
var YYCol = _require.YYCol;
var YYButton = _require.YYButton;

var _require2 = require('lodash');

var isFunction = _require2.isFunction;


var YYFilterMultiple = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            onSubmit: null, //点击确定的回调方法,传递被勾选的项目集合
            onCancel: null, //点击取消的回调方法
            items: [] //{value:1, text:''} 数组 value值不可重复
        };
    },
    getInitialState: function getInitialState() {
        var checkedItems = [];
        var _props = this.props;
        var defaultSelectedKeys = _props.defaultSelectedKeys;
        var items = _props.items;

        items.forEach(function (item) {
            if (defaultSelectedKeys.indexOf(item.value) !== -1) {
                checkedItems.push(item);
            }
        });

        return {
            checkedItems: checkedItems //存储被选择的选项
        };
    },
    _onChange: function _onChange(e) {
        var checkedItems = this.state.checkedItems;
        if (e.target.checked) {
            var checkedItem = { value: e.target.value, text: e.target.text };
            checkedItems.push(checkedItem);
            this.setState({ checkedItems: checkedItems });
        } else {
            for (var i = 0; i < checkedItems.length; i++) {
                if (e.target.value == checkedItems[i].value) {
                    checkedItems.splice(i, 1);
                    this.setState({ checkedItems: checkedItems });
                    return;
                };
            }
        }
    },
    _onClickSubmit: function _onClickSubmit() {
        var onSubmit = this.props.onSubmit;
        if (isFunction(onSubmit)) {
            onSubmit(this.state.checkedItems);
        }
    },
    _onClickCancel: function _onClickCancel() {
        this.setState({ checkedItems: [] });
        var onCancel = this.props.onCancel;
        if (isFunction(onCancel)) {
            onCancel();
        }
    },
    render: function render() {
        var items = [];
        var checkedItems = this.state.checkedItems;
        var item;
        var isChecked;
        for (var i = 0; i < this.props.items.length; i++) {
            item = this.props.items[i];
            for (var index in checkedItems) {
                if (checkedItems[index].value == item.value) {
                    isChecked = true;
                    break;
                } else {
                    isChecked = false;
                }
            }
            items.push(React.createElement(
                YYCol,
                { span: '3' },
                React.createElement(
                    'label',
                    { style: { cursor: 'pointer' } },
                    React.createElement(YYCheckbox, { checked: isChecked, value: item.value, text: item.text, onChange: this._onChange }),
                    item.text
                )
            ));
        }
        return React.createElement(
            'div',
            { className: 'yyui-filter-multiple' },
            React.createElement(
                'div',
                { className: 'ant-row yyui-filter-items' },
                items
            ),
            React.createElement(
                'div',
                { className: 'ant-row yyui-filter-buttons' },
                React.createElement(
                    YYButton,
                    { type: 'primary', onClick: this._onClickSubmit },
                    '提交'
                ),
                React.createElement(
                    YYButton,
                    { style: { marginLeft: '10px' }, type: 'ghost', onClick: this._onClickCancel },
                    '取消'
                )
            )
        );
    }
});

module.exports = YYFilterMultiple;