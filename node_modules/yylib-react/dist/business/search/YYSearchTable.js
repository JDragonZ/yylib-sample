'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');

var _require = require('react-dom');

var findDOMNode = _require.findDOMNode;

var classNames = require('classnames');

var _require2 = require('yylib-ui');

var YYClass = _require2.YYClass;
var YYModal = _require2.YYModal;
var YYEditTable = _require2.YYEditTable;
var YYToolbar = _require2.YYToolbar;
var YYButton = _require2.YYButton;
var YYSelect = _require2.YYSelect;
var YYOption = _require2.YYOption;
var YYPopover = _require2.YYPopover;
var YYDropdownButton = _require2.YYDropdownButton;
var YYPopconfirm = _require2.YYPopconfirm;
var YYReferInput = _require2.YYReferInput;
var YYCheckbox = _require2.YYCheckbox;
var YYIcon = _require2.YYIcon;
var YYInput = _require2.YYInput;
var YYDatePicker = _require2.YYDatePicker;
var YYDropdown = _require2.YYDropdown;
var YYMenuItem = _require2.YYMenuItem;
var YYMenu = _require2.YYMenu;
var YYMessage = _require2.YYMessage;
var YYForm = _require2.YYForm;
var YYFormItem = _require2.YYFormItem;
var YYSpin = _require2.YYSpin;
var YYScrollbar = _require2.YYScrollbar;


var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var confirm = YYModal.confirm;

var Constant = require('./Constant');
var ajax = require('../../utils/ajax');
var formatUtils = require('../../utils/formatUtils');
var url = require('./Resturl');

// 更改单元格数据 rowData-行数据、index-行索引、dataIndex-列索引名、event-事件对象或者值
function onCellChange(rowData, index, dataIndex, fields, event) {
    //获取修改后的单元格数据，注意：此处依据输入类型不同，取值行为需要进行对应调整（如：参照、勾选、输入框等），通过dataIndex可判断当前是哪列，即可明确取值行为。
    var _this = this;
    var newVal = '';
    if (event) {
        newVal = event.target ? event.target.value : event;
    }
    if (dataIndex === 'field') {
        _.forEach(fields, function (item) {
            //字段改变值域联动
            switch (item.inputtype) {
                case ('text', 'select'):
                    _this.saveCell(index, 'data', '');
                    break;
                case 'date':
                    _this.saveCell(index, 'data', new Date());
                    break;
            }
            if (item.key === event) {
                _this.saveCell(index, 'compare', item.oper[0]);
            }
        });
    }
    if (dataIndex === 'compare') {
        //字段改变比较符联动
        _.forEach(fields, function (item) {
            if (item.key === event) {
                _this.saveCell(index, 'compare', null);
            }
        });
    }
    _this.saveCell(index, dataIndex, newVal); //修改指定单元格的值，此方法由YYEditTable提供
}
//逻辑符列
function renderLogicCol(value, rowData, index, dataIndex, fields, containerId) {
    var nowData = this.getRowData();
    // 第一行逻辑符为无
    if (nowData[0] && nowData[0].rowkey === rowData.rowkey) {
        return React.createElement(YYSelect, { disabled: true, value: '', style: { width: 100 } });
    }
    var defaultValue = "and";
    value = value ? value : defaultValue;
    return React.createElement(
        YYSelect,
        {
            value: value,
            style: { width: 100 },
            getPopupContainer: function getPopupContainer() {
                return document.getElementById(containerId);
            },
            onChange: onCellChange.bind(this, rowData, index, dataIndex, fields) },
        React.createElement(
            YYOption,
            { key: 'and', value: 'and' },
            '并且(AND)'
        ),
        React.createElement(
            YYOption,
            { key: 'or', value: 'or' },
            '或者(OR)'
        )
    );
}
//左括号
function renderLeftCol(value, rowData, index, dataIndex, fields, containerId) {
    var defaultValue = false;
    value = value ? value : defaultValue;
    return React.createElement(
        YYSelect,
        {
            value: value,
            style: { width: 100 },
            getPopupContainer: function getPopupContainer() {
                return document.getElementById(containerId);
            },
            onChange: onCellChange.bind(this, rowData, index, dataIndex, fields) },
        React.createElement(
            YYOption,
            { key: 'left', value: true },
            '('
        ),
        React.createElement(
            YYOption,
            { key: 'no', value: false },
            '无'
        )
    );
}
//字段
function renderFieldCol(value, rowData, index, dataIndex, fields, containerId) {
    if (fields.length > -0) {
        var defaultValue = fields[0].key;
        var options = fields.map(function (item) {
            return React.createElement(
                YYOption,
                { key: item.key, value: item.key },
                item.title
            );
        });
    }
    value = value ? value : defaultValue;
    return React.createElement(
        YYSelect,
        {
            value: value,
            style: { width: 150 },
            getPopupContainer: function getPopupContainer() {
                return document.getElementById(containerId);
            },
            onChange: onCellChange.bind(this, rowData, index, dataIndex, fields) },
        options
    );
}
//比较符
function renderCompareCol(value, rowData, index, dataIndex, fields, containerId) {
    var _this = this;
    //匹配关键字下的oper
    var options = [];
    var defaultOptions = []; //初始下拉选项
    var defaultValue = '';
    if (fields.length > 0) {
        defaultValue = fields[0].oper[0]; //默认选中 eg: 'eq'
        fields[0].oper.forEach(function (item) {
            defaultOptions.push(React.createElement(
                YYOption,
                { key: item, value: item },
                Constant.oper[item]
            ));
        });

        fields.forEach(function (item, idx) {

            if (rowData.field === item.key) {
                defaultValue = item.oper[0]; //查询字段切换时修改默认选中值
                item.oper.forEach(function (subItem) {
                    options.push(React.createElement(
                        YYOption,
                        { key: subItem, value: subItem },
                        Constant.oper[subItem]
                    ));
                });
            }
        });
    }

    options = options.length > 0 ? options : defaultOptions;
    value = value ? value : defaultValue;
    //key与查询字段相匹配
    return React.createElement(
        YYSelect,
        {
            value: value,
            key: rowData.field,
            style: { width: 150 },
            getPopupContainer: function getPopupContainer() {
                return document.getElementById(containerId);
            },
            onChange: onCellChange.bind(this, rowData, index, dataIndex, fields) },
        options
    );
}
//比较符
function renderDataCol(value, rowData, index, dataIndex, fields, containerId) {
    var _this = this;
    //默认为输入框
    var cont = React.createElement(YYInput, {
        value: value,
        style: { width: 150 },
        onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) });
    if (fields.length > 0) {
        fields.forEach(function (item) {
            if (rowData.field === item.key) {
                //匹配关键字下 的 inputtype
                var inputprops = item.inputprops;
                switch (item.inputtype) {
                    case 'date':
                        cont = React.createElement(YYDatePicker, _extends({}, inputprops, {
                            value: value,
                            style: { width: 150 },
                            getCalendarContainer: function getCalendarContainer() {
                                return document.getElementById(containerId);
                            },
                            onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
                        break;
                    case 'select':
                        cont = React.createElement(YYSelect, _extends({}, inputprops, {
                            value: value,
                            style: { width: 150 },
                            getPopupContainer: function getPopupContainer() {
                                return document.getElementById(containerId);
                            },
                            onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
                        break;
                    case 'refer':
                        cont = React.createElement(YYReferInput, _extends({}, inputprops, {
                            value: value,
                            style: { width: 150 },
                            wrapClassName: 'yyui-search-refer',
                            getPopupContainer: function getPopupContainer() {
                                return document.getElementById(containerId);
                            },
                            onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
                        break;
                }
            }
        });
    }
    //当比较符为 ‘nu’， ‘ie’时将不显示,直接返回
    if (rowData.compare === 'nu' || rowData.compare === 'ie') {
        return React.createElement('div', { style: { width: 150 } });
    }
    return cont;
}
//右括号
function renderRightCol(value, rowData, index, dataIndex, fields, containerId) {
    var defaultValue = false;
    value = value ? value : defaultValue;
    return React.createElement(
        YYSelect,
        {
            value: value,
            style: { width: 100 },
            getPopupContainer: function getPopupContainer() {
                return document.getElementById(containerId);
            },
            onChange: onCellChange.bind(this, rowData, index, dataIndex, fields) },
        React.createElement(
            YYOption,
            { key: 'right', value: true },
            ')'
        ),
        React.createElement(
            YYOption,
            { key: 'no', value: false },
            '无'
        )
    );
}
//方案列表
function renderTplOpts(tplList) {
    return _.map(tplList, function (option) {
        return React.createElement(
            YYOption,
            { key: option.tplId, value: option.tplId },
            option.tplName
        );
    });
}
//获取columns
function getColumns(columns, showSenior) {
    var showColumns = ['field', 'compare', 'data', 'oper'];
    if (!showSenior) {
        return _.filter(columns, function (column) {
            return showColumns.indexOf(column.dataIndex) !== -1;
        });
    } else {
        return columns;
    }
}
//从方案列表里查询tplName对应的tplId
function getTplIdByName(tplList, name) {
    if (Array.isArray(tplList) && tplList.length > 0) {
        return tplList.filter(function (item) {
            return item.tplName === name;
        })[0]['tplId'];
    } else {
        return '';
    }
}
//从方案列表里查询tplId对应的tplName
function getTplNameById(tplList, id) {
    if (Array.isArray(tplList) && tplList.length > 0) {
        return tplList.filter(function (item) {
            return item.tplId === id;
        })[0]['tplName'];
    } else {
        return '';
    }
}

var YYSearchTable = YYClass.create({
    getInitialState: function getInitialState() {
        this.containerId = "yyui-search-container-" + YYClass.uuid();
        return {
            dataSource: [],
            showSenior: false,
            tplList: [],
            tplId: undefined,
            showModal: false, //对话框是否显示
            isLoading: false
        };
    },
    componentDidMount: function componentDidMount() {
        //获取方案列表
        var _props = this.props;
        var userId = _props.userId;
        var gridId = _props.gridId;

        var _this = this;
        ajax.getJSON(this.props.searchUrl + '?userId=' + userId + '&gridId=' + gridId, function (result) {
            if (result.success) {
                // console.log('tplList-result', result.backData)
                _this.setState({ tplList: result.backData });
            } else {
                YYMessage.warning(result.backMsg);
            }
        });
    },
    //添加一行
    addRowClick: function addRowClick() {
        //直接添加一行到行尾
        this.refs.myEditTable.addRowLast();
    },
    //清除所有
    delAllClick: function delAllClick() {
        this.setState({ dataSource: [], tplId: undefined });
    },
    //删除指定的行数据
    onDelRow: function onDelRow(rowData, index, event) {
        var dataSource = this.state.dataSource;

        dataSource.splice(index, 1);
        this.refs.myEditTable.delRow();
        this.setState({ dataSource: dataSource });
    },
    //格式化当前所有行数据
    _formatAllRows: function _formatAllRows() {
        //当未定义时取以下默认值
        var fields = this.props.fields;
        var defaultValue = { logic: 'and', left: false, field: fields[0].key, compare: fields[0].oper[0], data: '', right: false };
        var allRows = this.refs.myEditTable.getRowData();
        var newAllRows = [];
        allRows.forEach(function (row) {
            var newRow = {};
            for (var key in defaultValue) {
                if (row[key] == undefined) {
                    newRow[key] = defaultValue[key];
                } else {
                    newRow[key] = row[key];
                    if (row[key] instanceof Date) {
                        newRow[key] = formatUtils.formatDate(row[key], 'yyyy-MM-dd');
                    }
                }
            }
            //为行添加对应的fieldtype字段
            _.forEach(fields, function (item, itemIndex) {
                if (item.key === newRow.field) {
                    newRow.fieldtype = item.fieldtype;
                }
            });

            newAllRows.push(newRow);
        });
        console.log('格式化后的各行数据:', newAllRows);
        return newAllRows;
    },
    //验证左括号是否等于右括号，如果相等执行callback
    _isValidate: function _isValidate(callback) {
        var left = 0; //左括号的个数
        var right = 0; //右括号的个数
        var allRows = this._formatAllRows();

        _.forEach(allRows, function (row) {
            if (row.left) {
                left++;
            }
            if (row.right) {
                right++;
            }
        });

        if (left === right) {
            callback && callback(allRows);
        } else {
            YYMessage.warning('左括号与右括号不相等，请检查');
        }
    },
    //是否启用高级搜索
    checkboxChange: function checkboxChange() {
        this.setState({ showSenior: !this.state.showSenior });
    },
    //搜索
    searchClick: function searchClick() {
        //验证通过执行搜索
        var _this = this;
        var _props2 = this.props;
        var searchUrl = _props2.searchUrl;
        var onSearch = _props2.onSearch;
        var onSearchResult = _props2.onSearchResult;
        var entityName = _props2.entityName;
        var fieldKeys = _props2.fieldKeys;

        this._isValidate(function (allRows) {
            if (_.isFunction(onSearch)) {
                onSearch('table', allRows, fieldKeys, entityName);
                _this.setState({ visible: false });
                return; // 如果传入onSearch则不执行onSearchResult
            }
            if (_.isFunction(onSearchResult)) {
                var reqTable = {};
                reqTable.keys = fieldKeys;
                reqTable.type = 'table';
                reqTable.condition = allRows;
                reqTable.entityName = entityName;

                ajax.postJSON(searchUrl, reqTable, function (result) {
                    if (result.success) {
                        onSearchResult(result.backData);
                        _this.setState({ visible: false });
                    } else {
                        YYMessage.warning(result.backMsg);
                    }
                });
            }
        });
    },
    //添加方案
    addTplClick: function addTplClick() {
        var _this = this;
        this._isValidate(function () {
            _this.setState({ showModal: true });
        });
    },
    //取消收藏方案
    cancelClick: function cancelClick() {
        this.setState({ showModal: false, loading: false });
    },
    //设置默认方案
    setDefault: function setDefault() {
        var _this = this;
        if (this.state.tplId) {
            ajax.postJSON('', null, function (result) {
                if (result.success) {
                    YYMessage.success(result.backMsg);
                } else {
                    YYMessage.error(result.backMsg);
                }
            });
        } else {
            _this._isValidate(function () {
                _this.setState({ showModal: true });
            });
        }
    },
    //收藏方案
    saveTplClick: function saveTplClick() {
        var _this = this;
        this.props.form.validateFields(function (errors, values) {
            if (!!errors) {
                console.log('Errors in form!!!');
                return;
            } else {
                _this.setState({ isLoading: true });
                console.log(values);
                //添加新的方案
                var searchTemplate = {};
                searchTemplate.filter = JSON.stringify(_this._formatAllRows());
                searchTemplate.gridId = _this.props.gridId;
                searchTemplate.userId = _this.props.userId;
                searchTemplate.templateName = values.tplName;
                ajax.postJSON(_this.props.serveUrl, searchTemplate, function (result) {
                    if (result.success) {
                        YYMessage.success(result.backMsg);
                        _this.setState({ isLoading: false, tplList: result.backData, tplId: getTplIdByName(result.backData, values.tplName), showModal: false });
                    } else {
                        YYMessage.error(result.backMsg);
                        _this.setState({ isLoading: false, showModal: false });
                    }
                });
            }
        });
    },
    //删除方案数据
    deleteTplClick: function deleteTplClick(tplId, gridId) {
        //根据方案ID删除
        var _this = this;
        if (tplId) {
            confirm({
                title: '您是否确认要删除该方案',
                onOk: function onOk() {
                    _this.setState({ isLoading: true });
                    ajax.delJSON(_this.props.serveUrl + '/' + tplId, null, function (result) {
                        if (result.success) {
                            console.log(result.backData);
                            YYMessage.success(result.backMsg);
                            _this.setState({ isLoading: false, tplList: result.backData, dataSource: [], tplId: '' });
                            _this.delAllClick();
                        } else {
                            YYMessage.error(result.backMsg);
                            _this.setState({ isLoading: false });
                        }
                    });
                },
                onCancel: function onCancel() {}
            });
        } else {
            YYMessage.error('请选择要删除的方案');
        }
    },
    //修改方案数据
    changeTplClick: function changeTplClick(tplId, gridId, userId) {
        var allRows = this._formatAllRows();
        var tplList = this.state.tplList;

        if (tplId) {
            var tplName = getTplNameById(tplList, tplId);
            //根据方案ID修改
            var searchTemplate = {};
            searchTemplate.id = tplId;
            searchTemplate.filter = JSON.stringify(allRows);
            searchTemplate.gridId = gridId;
            searchTemplate.userId = userId;
            searchTemplate.templateName = tplName || '方案名称';
            ajax.postJSON(this.props.serveUrl, searchTemplate, function (result) {
                console.log(result);
                if (result.success) {
                    YYMessage.success(result.backMsg);
                } else {
                    YYMessage.error(result.backMsg);
                }
            });
        } else {
            YYMessage.error('请选择要修改的方案');
        }
    },
    //格式化dataSource,为每一项添加rowkey
    _formatDataSource: function _formatDataSource(dataSource, tplId) {
        var fields = this.props.fields;

        if (_.isArray(dataSource) && dataSource.length > 0) {
            return dataSource.map(function (dataItem, index) {
                dataItem.rowkey = tplId + '_' + index;

                _.forEach(fields, function (fieldItem) {
                    if (fieldItem.key === dataItem.field && fieldItem.inputtype === 'date') {
                        //日期格式转化
                        dataItem.data = new Date(dataItem.data);
                    }
                });

                return dataItem;
            });
        }
    },
    //切换当前方案
    switchTplClick: function switchTplClick(tplId, option) {
        var _this = this;
        //根据方案ID查询
        ajax.getJSON(this.props.serveUrl + '/' + tplId, null, function (result) {
            if (result.success) {
                console.log(result.backData.filter);
                _this.setState({
                    tplId: tplId,
                    dataSource: _this._formatDataSource(JSON.parse(result.backData.filter), tplId)
                });
            } else {
                YYMessage(result.backMsg);
            }
        });
    },
    editTplClick: function editTplClick(_ref) {
        var item = _ref.item;
        var key = _ref.key;
        var selectedKeys = _ref.selectedKeys;

        var tplId = this.state.tplId;
        var _props3 = this.props;
        var gridId = _props3.gridId;
        var userId = _props3.userId;

        switch (key) {
            case 'delete':
                this.deleteTplClick(tplId, gridId, userId);
                break;
            case 'save':
                this.changeTplClick(tplId, gridId, userId);
        }
    },
    //方案编辑按钮集合
    _renderTplBtns: function _renderTplBtns() {
        return React.createElement(
            YYMenu,
            { onSelect: this.editTplClick, style: { width: 100 } },
            React.createElement(
                YYMenuItem,
                { key: 'delete' },
                '删除方案'
            ),
            React.createElement(
                YYMenuItem,
                { key: 'save' },
                '保存方案'
            )
        );
    },
    render: function render() {
        var _this = this;
        var getFieldProps = this.props.form.getFieldProps;

        var fields = this.props.fields;
        var containerId = this.containerId; //容器id
        //编辑表格的列定义
        var columns = [{
            title: '逻辑符',
            dataIndex: 'logic',
            key: 'logic',
            width: 100,
            render: function render(value, rowData, index) {
                return renderLogicCol.call(this, value, rowData, index, 'logic', fields, containerId);
            }
        }, {
            title: '左括号',
            dataIndex: 'left',
            key: 'left',
            width: 100,
            render: function render(value, rowData, index) {
                return renderLeftCol.call(this, value, rowData, index, 'left', fields, containerId);
            }
        }, {
            title: '查询字段',
            dataIndex: 'field',
            key: 'field',
            width: 150,
            render: function render(value, rowData, index) {
                return renderFieldCol.call(this, value, rowData, index, 'field', fields, containerId);
            }
        }, {
            title: '比较符',
            dataIndex: 'compare',
            key: 'compare',
            width: 150,
            render: function render(value, rowData, index) {
                return renderCompareCol.call(this, value, rowData, index, 'compare', fields, containerId);
            }
        }, {
            title: '值',
            dataIndex: 'data',
            key: 'data',
            width: 150,
            render: function render(value, rowData, index) {
                return renderDataCol.call(this, value, rowData, index, 'data', fields, containerId);
            }
        }, {
            title: '右括号',
            dataIndex: 'right',
            key: 'right',
            width: 100,
            render: function render(value, rowData, index) {
                return renderRightCol.call(this, value, rowData, index, 'right', fields, containerId);
            }
        }, {
            title: '操作',
            dataIndex: 'oper',
            key: 'oper',
            width: 50,
            render: function render(text, rowData, index) {
                return React.createElement(
                    'div',
                    { style: { width: 50 } },
                    React.createElement(YYIcon, { type: 'delete', title: '删除', onClick: _this.onDelRow.bind(this, rowData, index) })
                );
            }
        }];

        var searchBoxCls = classNames({
            'search-box': true,
            'search-box-large': this.state.showSenior
        });

        return React.createElement(
            'div',
            { className: searchBoxCls, id: containerId },
            React.createElement(
                YYSpin,
                { spinning: this.state.isLoading },
                React.createElement(
                    YYToolbar,
                    null,
                    React.createElement(
                        YYButton,
                        { onClick: this.searchClick, type: 'primary', icon: 'search' },
                        '搜索'
                    ),
                    React.createElement(
                        YYButton,
                        { onClick: this.addRowClick, type: 'primary', icon: 'plus' },
                        '添加'
                    ),
                    React.createElement(
                        YYButton,
                        { onClick: this.delAllClick, type: 'error', icon: 'delete', ghost: true },
                        '清除'
                    ),
                    React.createElement(
                        YYSelect,
                        {
                            getPopupContainer: function getPopupContainer() {
                                return document.getElementById(containerId);
                            },
                            onSelect: this.switchTplClick, value: this.state.tplId, placeholder: '请选择方案', style: { width: 100 } },
                        renderTplOpts(this.state.tplList)
                    ),
                    React.createElement(
                        YYDropdownButton,
                        {
                            getPopupContainer: function getPopupContainer() {
                                return document.getElementById(containerId);
                            },
                            onClick: this.addTplClick, trigger: ['click'], type: 'primary', overlay: this._renderTplBtns() },
                        '收藏方案'
                    ),
                    React.createElement(
                        YYButton,
                        { onClick: this.setDefault, type: 'primary', ghost: true },
                        '设置默认方案'
                    ),
                    !this.props.disableSenior ? React.createElement(
                        YYCheckbox,
                        { onChange: this.checkboxChange, style: { marginTop: 6 } },
                        React.createElement(
                            'span',
                            { style: { position: 'relative', top: '5px' } },
                            '高级搜索'
                        )
                    ) : null
                ),
                React.createElement(YYEditTable, {
                    size: 'small',
                    rowKey: 'rowkey',
                    ref: 'myEditTable',
                    scroll: { y: 274 },
                    columns: getColumns(columns, this.state.showSenior),
                    rowSelection: false,
                    pagination: false,
                    dataSource: this.state.dataSource }),
                React.createElement(
                    YYModal,
                    { wrapClassName: 'yyui-search-modal', title: '请输入新方案名称', visible: this.state.showModal, onOk: this.saveTplClick, onCancel: this.cancelClick },
                    React.createElement(
                        YYForm,
                        null,
                        React.createElement(
                            YYFormItem,
                            null,
                            React.createElement(YYInput, _extends({ autocomplete: 'off' }, getFieldProps('tplName', { rules: [{ required: true, message: '模板名称不能为空' }] }), { type: 'text' }))
                        )
                    )
                )
            )
        );
    }
});

module.exports = YYForm.create()(YYSearchTable);