'use strict';

var React = require('react');
var _ = require('lodash');

var _require = require('react-dom');

var findDOMNode = _require.findDOMNode;

var _require2 = require('yylib-ui');

var YYClass = _require2.YYClass;
var YYInputButton = _require2.YYInputButton;
var YYMenuItem = _require2.YYMenuItem;
var YYMenu = _require2.YYMenu;
var YYMessage = _require2.YYMessage;
var YYInput = _require2.YYInput;
var YYButton = _require2.YYButton;
var YYDropdown = _require2.YYDropdown;

var Trigger = require('rc-trigger');

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var YYSearchTable = require('./YYSearchTable');
var Constant = require('./Constant');
var ajax = require('../../utils/ajax');
var url = require('./Resturl');
require('./index.less');

//定义META
var uiMeta = {
    name: 'search',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('fields', undefined, PropTypes.array, true, '查询字段'), field('userId', '', PropTypes.string, true, '用户的唯一标识'), field('gridId', '', PropTypes.string, true, '表格的唯一标识'), field('entityName', '', PropTypes.string, true, '实体'), field('disableSenior', false, PropTypes.bool, true, '是否禁用高级搜索'), field('searchUrl', url.SEARCH_TEMPLATE, PropTypes.string, false, '执行搜索服务的URL'), field('serveUrl', url.SEARCH_TEMPLATE, PropTypes.string, false, '执行方案服务服务的URL'), field('onSearch', null, PropTypes.func, false, '执行搜索的回调，需要自己主动发送请求，Function(type: string, condition: string/array, keywords: array, entityName: string)。 type有三种类型(item - 下拉单项,table - 表格,text - 文本关键词)'), field('onSearchResult', null, PropTypes.func, false, '返回搜素结果的回调，搜索请求在组件内部调用,只有在未定义onSearch的时候执行，Function(result: any)'), field('popupAlign', '', null, false, '弹出层对齐方式 https://github.com/yiminghe/dom-align')]
};

var YYSearchCondition = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var fieldKeys = this.props.fields ? this._getFieldKeysFrom(this.props.fields) : this._getFieldKeysFrom(this.props.children, 'children');
        return {
            value: '',
            visibleBox: false,
            visibleMenu: false,
            activeKey: '', //激活状态menuItem
            fieldKeys: fieldKeys };
    },
    componentDidMount: function componentDidMount() {
        this._addEvent();
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var isFieldsEqual = _.isEqual(nextProps.fields, this.props.fields);
        var isChildEqual = _.isEqual(nextProps.children, this.props.children);
        if (isFieldsEqual && isChildEqual) {
            return;
        }
        if (nextProps.fields) {
            this.setState({ fieldKeys: this._getFieldKeysFrom(nextProps.fields) });
        } else {
            this.setState({ fieldKeys: this._getFieldKeysFrom(nextProps.children, 'children') });
        }
    },

    componentDidUpdate: function componentDidUpdate() {
        this._addEvent();
    },
    componentWillUnmount: function componentWillUnmount() {
        document.removeEventListener('mousedown', this._onDocumentClick);
    },
    _addEvent: function _addEvent() {
        document.addEventListener('mousedown', this._onDocumentClick);
    },
    //收集fields的key
    _getFieldKeysFrom: function _getFieldKeysFrom(searchFields, from) {
        var searchFields = from === 'children' ? this._getFieldsFormChild(searchFields) : searchFields;
        return _.map(searchFields, function (field) {
            return field.key;
        });
    },
    //从children里获取fields
    _getFieldsFormChild: function _getFieldsFormChild(children) {
        return _.map(React.Children.toArray(children), function (child) {
            return {
                key: child.props.uikey,
                title: child.props.title,
                fieldtype: child.props.fieldtype,
                oper: child.props.oper,
                inputtype: child.props.inputtype
            };
        });
    },
    //判断n是否在root内
    _contains: function _contains(root, n) {
        var node = n;
        while (node) {
            if (node === root) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    },
    //判断一个类数组里的每一个元素是包含target
    _hasTarget: function _hasTarget(arrayLike, target) {
        var _this = this;
        if (arrayLike && arrayLike.length > 0) {
            var array = Array.prototype.slice.call(arrayLike);
            return _.some(array, function (item) {
                return _this._contains(item, target);
            });
        }
    },
    //当点击以下以外的地方将搜索框关闭
    _onDocumentClick: function _onDocumentClick(event) {
        var target = event.target;
        var dropdownNodes = document.querySelectorAll('.ant-dropdown');
        var menuNodes = document.querySelectorAll('.search-condition .yyui-menu');
        var modalMaskNodes = document.querySelectorAll('.ant-modal-mask');
        var searchModals = document.querySelectorAll('.yyui-modal');

        var targetInBox = false;
        var hasTarget = this._hasTarget;
        targetInBox = hasTarget(dropdownNodes, target) || hasTarget(modalMaskNodes, target) || hasTarget(menuNodes, target) || hasTarget(searchModals, target);
        this.targetInBox = targetInBox;
    },

    _onInputChange: function _onInputChange(event) {
        var value = event.target.value;
        if (value.trim() === '') {
            this.setState({ value: value, activeKey: '', visibleMenu: false });
        } else {
            this.setState({ value: value, activeKey: '', visibleMenu: true });
        }
    },
    _onPopupVisibleChange: function _onPopupVisibleChange(visible) {
        if (!this.targetInBox) {
            this.setState({ visibleBox: visible });
        }
    },
    //搜索文本
    _onSearchText: function _onSearchText(text) {
        var _this = this;
        var _props = this.props;
        var searchUrl = _props.searchUrl;
        var onSearch = _props.onSearch;
        var onSearchResult = _props.onSearchResult;
        var entityName = _props.entityName;


        if (_.isFunction(onSearch)) {
            onSearch('text', text, this.state.fieldKeys, entityName);
            setTimeout(function () {
                _this.setState({ visibleMenu: false });
            }, 1000);
            return; //如果传入onSearch则不执行onSearchResult
        }
        if (_.isFunction(onSearchResult)) {
            //直接回车搜索
            var reqText = {};
            reqText.keys = this.state.fieldKeys;
            reqText.type = 'text';
            reqText.entityName = entityName;
            reqText.searchText = text;

            ajax.postJSON(searchUrl, reqText, function (result) {
                if (result.success) {
                    onSearchResult(result.backData);
                } else {
                    YYMessage.warning(result.backMsg);
                }
                _this.setState({ visibleMenu: false });
            });
        }
    },
    //搜索单项
    _onSearchItem: function _onSearchItem(item) {
        var _this = this;
        var _props2 = this.props;
        var searchUrl = _props2.searchUrl;
        var onSearch = _props2.onSearch;
        var onSearchResult = _props2.onSearchResult;
        var entityName = _props2.entityName;


        if (_.isFunction(onSearch)) {
            onSearch('item', item, this.state.fieldKeys, entityName);
            setTimeout(function () {
                _this.setState({ visibleMenu: false });
            }, 1000);
            return; //如果传入onSearch则不执行onSearchResult
        }
        if (_.isFunction(onSearchResult)) {
            //选择下拉点击或回车搜索
            var reqItem = {};
            reqItem.keys = this.state.fieldKeys;
            reqItem.type = 'item';
            reqItem.condition = item;
            reqItem.entityName = entityName;

            ajax.postJSON(searchUrl, reqItem, function (result) {
                if (result.success) {
                    onSearchResult(result.backData);
                } else {
                    YYMessage.warning(result.backMsg);
                }
                _this.setState({ visibleMenu: false });
            });
        }
    },
    //选中下拉菜单某一项时
    _onClickMenu: function _onClickMenu(_ref) {
        var item = _ref.item;
        var key = _ref.key;
        var selectedKeys = _ref.selectedKeys;

        if (item) {
            // item
            this._onSearchItem([{ logic: 'and', left: false, right: false, data: this.state.value, compare: 'cn', field: key }]);
        } else {
            // text
            this._onSearchText(this.state.value);
        }
    },
    //使用键盘操作菜单
    _onKeyDown: function _onKeyDown(searchFields, event) {
        var activeKey = this.state.activeKey;
        var length = searchFields.length;
        //上方向键
        if (event.keyCode === 38) {
            var prev = searchFields[--length].key; //activeKey为空或开头时
            if (activeKey !== '' && activeKey !== searchFields[0].key) {
                _.forEach(searchFields, function (field, index) {
                    if (field.key === activeKey) {
                        prev = searchFields[--index].key;
                    }
                });
            }
            this.setState({ activeKey: prev });
        }
        //下方向键
        if (event.keyCode === 40) {
            var next = searchFields[0].key; //activeKey为空或末尾时
            if (activeKey !== '' && activeKey !== searchFields[--length].key) {
                _.forEach(searchFields, function (field, index) {
                    if (field.key === activeKey) {
                        next = searchFields[++index].key;
                    }
                });
            }
            this.setState({ activeKey: next });
        }
        //回车键
        if (event.keyCode === 13) {
            var target = _.filter(searchFields, function (field) {
                return field.key === activeKey;
            });
            this._onClickMenu({ item: target[0], key: activeKey });
        }
    },
    //下拉菜单
    _renderDropMenu: function _renderDropMenu(searchFields) {
        var _this = this;
        if (_.isArray(searchFields) && searchFields.length) {
            var menus = _.map(searchFields, function (menuItem) {
                var cont = menuItem.title + ':' + _this.state.value;
                var cls = _this.state.activeKey === menuItem.key ? 'ant-menu-item-active' : '';
                return React.createElement(
                    YYMenuItem,
                    { className: cls, key: menuItem.key },
                    cont
                );
            });
            return React.createElement(
                YYMenu,
                { ref: 'menu', onClick: _this._onClickMenu },
                menus
            );
        }
    },
    //搜素容器
    _renderSearchBox: function _renderSearchBox(searchFields) {
        //默认取属性fields
        var conditionProps = {
            fields: searchFields,
            userId: this.props.userId,
            gridId: this.props.gridId,
            onSearch: this.props.onSearch,
            searchUrl: this.props.searchUrl,
            serveUrl: this.props.serveUrl,
            fieldKeys: this.state.fieldKeys,
            entityName: this.props.entityName,
            disableSenior: this.props.disableSenior,
            onSearchResult: this.props.onSearchResult
        };
        return React.createElement(YYSearchTable, conditionProps);
    },
    render: function render() {
        var searchFields = this.props.fields || this._getFieldsFormChild(this.props.children); //如果有子组件则从子组件里取
        return React.createElement(
            'div',
            { className: this.className() },
            React.createElement(
                YYDropdown,
                {
                    trigger: [],
                    visible: this.state.visibleMenu,
                    overlay: this._renderDropMenu(searchFields) },
                React.createElement(YYInput, { onChange: this._onInputChange, onKeyDown: this._onKeyDown.bind(this, searchFields), value: this.state.value })
            ),
            React.createElement(
                Trigger,
                {
                    action: ["click"],
                    popupAlign: this.props.popupAlign,
                    popupVisible: this.state.visibleBox,
                    popup: this._renderSearchBox(searchFields),
                    onPopupVisibleChange: this._onPopupVisibleChange,
                    popupClassName: 'yyui-search-container' },
                React.createElement(YYButton, { icon: 'search' })
            )
        );
    }
});

YYSearchCondition.Constant = Constant;
module.exports = YYSearchCondition;